{"lordeadroid":[{"vending-machine":"\"[{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/lordeadroid/vending-machine/lib/testing-framework.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":10,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":11,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[169,169],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":20,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":21,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[375,375],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":22,\\\"column\\\":26,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":29,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":29,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":30,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[649,649],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":35,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":35,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":36,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":37,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[852,852],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":39,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":39,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":40,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":40,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":41,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":41,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":42,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":43,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[986,986],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":46,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":47,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1046,1046],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":55,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":55,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":56,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":57,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1246,1246],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 5. Maximum allowed is 2.\\\",\\\"line\\\":58,\\\"column\\\":23,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":74,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":74,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":75,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1597,1597],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":80,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":80,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":81,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":82,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1812,1812],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":11,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":6,\\\"fixableErrorCount\\\":9,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"let totalAssertions = 0;\\\\nlet passedAssertions = 0;\\\\n\\\\nconst updateAssertionsCount = function (result) {\\\\n  if (result) {\\\\n    passedAssertions++;\\\\n  }\\\\n\\\\n  totalAssertions++;\\\\n}\\\\n\\\\nconst formatExpectationMismatch = function (actual, expected) {\\\\n  let message = \\\\\\\"\\\\\\\";\\\\n\\\\n  message += \\\\\\\"\\\\\\\\t  Actual : \\\\\\\" + actual;\\\\n  message += \\\\\\\"\\\\\\\\n\\\\\\\";\\\\n  message += \\\\\\\"\\\\\\\\tExpected : \\\\\\\" + expected;\\\\n\\\\n  return message;\\\\n}\\\\n\\\\nconst formatTestResult = function (result, actual, expected, message) {\\\\n  const icon = result ? \\\\\\\"✅\\\\\\\" : \\\\\\\"❌\\\\\\\";\\\\n\\\\n  const firstLine = icon + \\\\\\\" \\\\\\\" + message;\\\\n  const secondLine = result ? \\\\\\\"\\\\\\\" : \\\\\\\"\\\\\\\\n\\\\\\\" + formatExpectationMismatch(actual, expected);\\\\n\\\\n  return firstLine + secondLine;\\\\n}\\\\n\\\\nconst assertEquals = function (actual, expected, message) {\\\\n  const result = expected === actual;\\\\n\\\\n  updateAssertionsCount(result);\\\\n  console.log(formatTestResult(result, actual, expected, message));\\\\n}\\\\n\\\\nconst displayHeading = function (string) {\\\\n  console.log(string);\\\\n  console.log(\\\\\\\"-x-\\\\\\\".repeat(string.length / 3));\\\\n  console.log();\\\\n}\\\\n\\\\nconst onePlus = function (number) {\\\\n  return number + 1;\\\\n}\\\\n\\\\nconst displaySummary = function () {\\\\n  let message = \\\\\\\"\\\\\\\";\\\\n\\\\n  message += \\\\\\\"\\\\\\\\nSummary: \\\\\\\";\\\\n  message += passedAssertions + \\\\\\\" / \\\\\\\" + totalAssertions;\\\\n  message += \\\\\\\" test passed\\\\\\\";\\\\n\\\\n  console.log(message);\\\\n}\\\\n\\\\nconst compareArrays = function (firstArray, secondArray) {\\\\n  if (firstArray === secondArray) {\\\\n    return true;\\\\n  }\\\\n\\\\n  if (firstArray.length !== secondArray.length) {\\\\n    return false;\\\\n  }\\\\n\\\\n  for (let index = 0; index < firstArray.length; index++) {\\\\n    if (firstArray[index] !== secondArray[index]) {\\\\n      return false;\\\\n    }\\\\n  }\\\\n\\\\n  return true;\\\\n}\\\\n\\\\nconst assertArrays = function (actual, expected, message) {\\\\n  const result = compareArrays(expected, actual);\\\\n\\\\n  updateAssertionsCount(result);\\\\n  console.log(formatTestResult(result, actual, expected, message));\\\\n}\\\\n\\\\nexports.assertArrays = assertArrays;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/lordeadroid/vending-machine/src/vending-machine.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":3,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":4,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[99,99],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":7,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":8,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[184,184],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":9,\\\"column\\\":20,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":19,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":19,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":20,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[394,394],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":33,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":33,\\\"endColumn\\\":3,\\\"fix\\\":{\\\"range\\\":[672,672],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-param-reassign\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Assignment to function parameter 'amount'.\\\",\\\"line\\\":41,\\\"column\\\":5,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"assignmentToFunctionParam\\\",\\\"endLine\\\":41,\\\"endColumn\\\":11},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":45,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":46,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[944,944],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":59,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":60,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1279,1279],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":8,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":6,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const numberOfCoins = function (amount, currentCoin) {\\\\n  return Math.floor(amount / currentCoin);\\\\n}\\\\n\\\\nconst newAmount = function (amount, currentCoin) {\\\\n  return amount % currentCoin;\\\\n}\\\\n\\\\nconst maxElement = function (numbers) {\\\\n  let max = numbers[0];\\\\n\\\\n  for (let index = 0; index < numbers.length; index++) {\\\\n    if (max < numbers[index]) {\\\\n      max = numbers[index];\\\\n    }\\\\n  }\\\\n\\\\n  return max;\\\\n}\\\\n\\\\nconst maxSort = function (numbers) {\\\\n  let sorted = [];\\\\n  let unsorted = numbers.slice();\\\\n\\\\n  while (unsorted.length !== 0) {\\\\n    let max = maxElement(unsorted);\\\\n    sorted.push(max);\\\\n    let index = unsorted.indexOf(max);\\\\n    unsorted.splice(index, 1);\\\\n  }\\\\n\\\\n  return sorted;\\\\n} \\\\n\\\\nconst dispenseCoins = function (denominations, amount) {\\\\n  let totalCoins = 0;\\\\n  let coins = maxSort(denominations);\\\\n\\\\n  for (const currentCoin in coins) {\\\\n    totalCoins += Math.floor(amount / currentCoin);\\\\n    amount = amount % currentCoin;\\\\n  }\\\\n\\\\n  return totalCoins;\\\\n}\\\\n\\\\nconst coinsWithName = function (denominations, totalAmount) {\\\\n  const nameCoins = [];\\\\n  const coins = maxSort(denominations);\\\\n  let amount = totalAmount;\\\\n\\\\n  for (let coin of coins) {\\\\n    nameCoins.push(coin.toString());\\\\n    nameCoins.push(numberOfCoins(amount, coin));\\\\n    amount = newAmount(amount, coin);\\\\n  }\\\\n\\\\n  return nameCoins;\\\\n}\\\\n\\\\nexports.notesVend = coinsWithName;\\\\nexports.vend = dispenseCoins;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/lordeadroid/vending-machine/test/vending-machine-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":11,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":12,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[862,862],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":17,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":18,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1304,1304],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":20,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":20,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":22,\\\"column\\\":62,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":22,\\\"endColumn\\\":66,\\\"fix\\\":{\\\"range\\\":[1495,1499],\\\"text\\\":\\\"\\\\\\\"10\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":22,\\\"column\\\":71,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":22,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[1504,1507],\\\"text\\\":\\\"\\\\\\\"5\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":22,\\\"column\\\":79,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":22,\\\"endColumn\\\":82,\\\"fix\\\":{\\\"range\\\":[1512,1515],\\\"text\\\":\\\"\\\\\\\"2\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":22,\\\"column\\\":87,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":22,\\\"endColumn\\\":90,\\\"fix\\\":{\\\"range\\\":[1520,1523],\\\"text\\\":\\\"\\\\\\\"1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":23,\\\"column\\\":58,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":23,\\\"endColumn\\\":61,\\\"fix\\\":{\\\"range\\\":[1641,1644],\\\"text\\\":\\\"\\\\\\\"4\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":23,\\\"column\\\":66,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":23,\\\"endColumn\\\":69,\\\"fix\\\":{\\\"range\\\":[1649,1652],\\\"text\\\":\\\"\\\\\\\"2\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":23,\\\"column\\\":74,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":23,\\\"endColumn\\\":77,\\\"fix\\\":{\\\"range\\\":[1657,1660],\\\"text\\\":\\\"\\\\\\\"1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":24,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":25,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1718,1718],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":27,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":27,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":30,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":31,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1836,1836],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":33,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":33,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":37,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":38,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2105,2105],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":40,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":40,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":44,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":45,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2398,2398],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":48,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":49,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2450,2450],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":14,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":4,\\\"fixableErrorCount\\\":14,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require(\\\\\\\"../lib/testing-framework.js\\\\\\\");\\\\nconst values = require(\\\\\\\"../src/vending-machine.js\\\\\\\");\\\\n\\\\nconst multipleDenominations = function () {\\\\n  testing.assertArrays(values.vend([1, 2], 2), 1, \\\\\\\"For amount 2 with denomination of 1 & 2 it should return 1 coins\\\\\\\");\\\\n  testing.assertArrays(values.vend([1, 2], 5), 3, \\\\\\\"For amount 5 with denomination of 1 & 2 it should return 3 coins\\\\\\\");\\\\n  testing.assertArrays(values.vend([5], 5), 1, \\\\\\\"For amount 5 with denomination of 5 it should return 1 coins\\\\\\\");\\\\n  testing.assertArrays(values.vend([5], 10), 2, \\\\\\\"For amount 10 with denomination of 5 it should return 2 coins\\\\\\\");\\\\n  testing.assertArrays(values.vend([10], 10), 1, \\\\\\\"For amount 10 with denomination of 10 it should return 1 coins\\\\\\\");\\\\n  testing.assertArrays(values.vend([1, 4, 7], 13), 4, \\\\\\\"For amount 13 with denomination of 1, 4 & 7 it should return 4 coins\\\\\\\");\\\\n}\\\\n\\\\nconst randomDenominations = function () {\\\\n  testing.assertArrays(values.vend([1, 7, 4], 13), 4, \\\\\\\"For amount 13 with denomination of 1, 7 & 4 it should return 4 coins\\\\\\\");\\\\n  testing.assertArrays(values.vend([10, 5, 1, 3], 19), 4, \\\\\\\"For amount 19 with denomination of 10, 5, 1 & 3 it should return 4 coins\\\\\\\");\\\\n  testing.assertArrays(values.vend([10, 5, 1, 3], 21), 3, \\\\\\\"For amount 21 with denomination of 10, 5, 1 & 3 it should return 3 coins\\\\\\\");\\\\n}\\\\n\\\\nconst denominationWithName = function () {\\\\n  console.log(\\\\\\\"Test case for random denominations that return coins with value\\\\\\\\n\\\\\\\");\\\\n\\\\n  testing.assertArrays(values.notesVend([1, 2, 5, 10], 18), ['10', 1, '5', 1, '2', 1, '1', 1], \\\\\\\"For amount of 18 and denominations of 10, 5, 2 & 1\\\\\\\");\\\\n  testing.assertArrays(values.notesVend([1, 2, 4], 11), ['4', 2, '2', 1, '1', 1], \\\\\\\"For amount of 11 and denominations of 4, 2 & 1\\\\\\\");\\\\n}\\\\n\\\\nconst vendCoinsTest = function () {\\\\n  console.log(\\\\\\\"\\\\\\\\nTest cases for vending coins:\\\\\\\\n\\\\\\\");\\\\n\\\\n  denominationWithName();\\\\n}\\\\n\\\\nconst testMaxElement = function () {\\\\n  console.log(\\\\\\\"\\\\\\\\nTest cases for maximum element:\\\\\\\\n\\\\\\\");\\\\n\\\\n  testing.assertEquals(values.maxElement([1, 2]), 1, \\\\\\\"For [1, 2] is should return 1\\\\\\\");\\\\n  testing.assertEquals(values.maxElement([3, 2]), 2, \\\\\\\"For [3, 2] is should return 2\\\\\\\");\\\\n}\\\\n\\\\nconst testMaxSort = function () {\\\\n  console.log(\\\\\\\"\\\\\\\\nTest cases for maxSort:\\\\\\\\n\\\\\\\");\\\\n\\\\n  testing.assertArrays(values.maxSort([1]), [1], \\\\\\\"Array of one element should return the same element\\\\\\\");\\\\n  testing.assertArrays(values.maxSort([1, 2]), [1, 2], \\\\\\\"An sorted array should return the same array\\\\\\\");\\\\n}\\\\n\\\\nconst runTest = function () {\\\\n  vendCoinsTest();\\\\n}\\\\n\\\\nrunTest();\\\\n\\\",\\\"usedDeprecatedRules\\\":[]}]\\n\""}],"m-debdutta":[{"vending-machine":"\"[{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/m-debdutta/vending-machine/lib/testing.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":17,\\\"column\\\":22,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":26,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":26,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":27,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[523,523],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":28,\\\"column\\\":24,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":37,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":55,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":56,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1144,1144],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":60,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":60,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":66,\\\"column\\\":16,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":67,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1470,1470],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":71,\\\"column\\\":25,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":78,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":89,\\\"column\\\":74,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":90,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2225,2225],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":90,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":90,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":97,\\\"column\\\":74,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":98,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2498,2498],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":98,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":98,\\\"endColumn\\\":14}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":8,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":3,\\\"fixableErrorCount\\\":5,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const style = function(text, code) {\\\\n  return \\\\\\\"\\\\\\\\033[\\\\\\\" + code + \\\\\\\"m\\\\\\\" + text + \\\\\\\"\\\\\\\\033[0m\\\\\\\";\\\\n};\\\\n\\\\nconst greenfg = function(text) {\\\\n  return style(text, \\\\\\\"32\\\\\\\");\\\\n};\\\\n\\\\nconst redfg = function(text) {\\\\n  return style(text, \\\\\\\"31\\\\\\\");\\\\n};\\\\n\\\\nconst yellowfg = function(text) {\\\\n  return style(text, \\\\\\\"1;33\\\\\\\");\\\\n};\\\\n\\\\nconst isArrayEqual = function(array1, array2) {\\\\n\\\\n  if (array1.length !== array2.length) return false;\\\\n\\\\n  for (let index = 0; index < array2.length; index++) {\\\\n    if (array1[index] !== array2[index]) return false;\\\\n\\\\n  };\\\\n  return true;\\\\n}\\\\n\\\\nconst isPatternEqual = function(array1, array2) {\\\\n\\\\n  if (array1.length !== array2.length) return false;\\\\n\\\\n  for (let index = 0; index < array2.length; index++) {\\\\n    if (toString(array1[index]) !== toString(array2[index])) return false;\\\\n\\\\n  };\\\\n  return true;\\\\n};\\\\n\\\\nlet totalTests = 0;\\\\nlet passedTests = 0;\\\\nconst log = [];\\\\n\\\\nconst addLog = function(icon, result, expected, actual, message) {\\\\n  log.push({\\\\n    stat : icon,\\\\n    expectedOutput : expected,\\\\n    actualOutput : actual,\\\\n    remarks : message\\\\n  });\\\\n};\\\\n\\\\n\\\\nconst createSummary = function() {\\\\n  return \\\\\\\"\\\\\\\\n\\\\\\\\tSummary   :    \\\\\\\" + passedTests + \\\\\\\"/\\\\\\\" + totalTests + \\\\\\\"passed\\\\\\\";\\\\n}\\\\n\\\\nconst displayHeadline = function(text) {\\\\n  const headline = text;\\\\n  const underline = \\\\\\\"-\\\\\\\".repeat(text.length);\\\\n  console.log(yellowfg(headline + \\\\\\\"\\\\\\\\n\\\\\\\" + underline));\\\\n};\\\\n\\\\nconst expectationMismatchMessage = function(expected, actual) {\\\\n  let line2 = \\\\\\\"\\\\\\\";\\\\n  line2 += greenfg(\\\\\\\"\\\\\\\\tExpected Output  : \\\\\\\\n\\\\\\\" + expected);\\\\n  line2 += \\\\\\\"\\\\\\\\n\\\\\\\"\\\\n  line2 += redfg(\\\\\\\"\\\\\\\\tActual Output    : \\\\\\\\n\\\\\\\" + actual);\\\\n  return line2;\\\\n};\\\\n\\\\nconst generateMessage = function(result, expected, actual, message) {\\\\n  const icon = result ? \\\\\\\"✅\\\\\\\" : \\\\\\\"❌\\\\\\\" ;\\\\n  const line1 = icon + message;\\\\n  const line2 = expectationMismatchMessage(expected, actual);\\\\n  addLog(icon, result, expected, actual, message);\\\\n\\\\n  return result ? line1 : line1 + \\\\\\\"\\\\\\\\n\\\\\\\" + line2;\\\\n};\\\\n\\\\nconst isEqual = function(expected, actual) {\\\\n  return (expected === actual);\\\\n};\\\\n\\\\nconst assertArrayEqual = function(expected, actual, message) {\\\\n  //const result = isEqual(expected, actual);\\\\n  const result = isArrayEqual(expected, actual);\\\\n  passedTests += result ? 1 : 0;\\\\n  totalTests = totalTests + 1;\\\\n  const finalMessage = generateMessage(result, expected, actual, message)\\\\n  console.log(finalMessage);\\\\n};\\\\n\\\\nconst assertEqual = function(expected, actual, message) {\\\\n  const result = isEqual(expected, actual);\\\\n  passedTests += result ? 1 : 0;\\\\n  totalTests = totalTests + 1;\\\\n  const finalMessage = generateMessage(result, expected, actual, message)\\\\n  console.log(finalMessage);\\\\n};\\\\n\\\\nexports.assertEqual = assertEqual;\\\\nexports.assertArrayEqual = assertArrayEqual;\\\\nexports.displayHeadline = displayHeadline;\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/m-debdutta/vending-machine/src/vending-machine.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":3,\\\"column\\\":20,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":15,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"max-depth\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Blocks are nested too deeply (3). Maximum allowed is 2.\\\",\\\"line\\\":7,\\\"column\\\":7,\\\"nodeType\\\":\\\"IfStatement\\\",\\\"messageId\\\":\\\"tooDeeply\\\",\\\"endLine\\\":11,\\\"endColumn\\\":8},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":15,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":16,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[441,441],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":29,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":30,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[917,917],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":38,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":39,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1170,1170],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":44,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":45,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1349,1349],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":6,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":4,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"// MAIN PROGRAM\\\\n\\\\nconst bubbleSort = function(list) {\\\\n  const sortedList = list;\\\\n  for (let index = 1; index < sortedList.length; index++) {\\\\n    for (let position = 0; position < sortedList.length - 1; position++) {\\\\n      if (sortedList[position] < sortedList[position + 1]) {\\\\n        const swapHand = list[position];\\\\n        list[position] = list[position + 1];\\\\n        list[position + 1] = swapHand;\\\\n      }\\\\n    }\\\\n  }\\\\n  return sortedList;\\\\n}\\\\n\\\\nexports.bubbleSort = bubbleSort;\\\\n\\\\nconst provideCoinCount = function(amount, denominationList) {\\\\n  const coinCountData = {};\\\\n  const orderedDenominations = bubbleSort(denominationList);\\\\n  let newAmount = amount;\\\\n  for (const denomination of orderedDenominations) {\\\\n    const coinsOfCurrentDenomination = Math.trunc(newAmount / denomination);\\\\n    newAmount = newAmount % denomination;\\\\n    coinCountData[denomination] = coinsOfCurrentDenomination;\\\\n  }\\\\n  return coinCountData;\\\\n}\\\\n\\\\nconst dispenseOptimumCoins = function(amount, denominationList) {\\\\n  let coins = 0;\\\\n  const coinCountList = provideCoinCount(amount, denominationList);\\\\n  for (const values of denominationList) {\\\\n    coins += coinCountList[values];\\\\n  }\\\\n  return coins;\\\\n}\\\\n\\\\nexports.dispenseOptimumCoins = dispenseOptimumCoins;\\\\n\\\\nconst giveCoinsOfDenomination = function(amount, denominationList) {\\\\n  return provideCoinCount(amount, denominationList);\\\\n}\\\\n\\\\nexports.giveCoinsOfDenomination = giveCoinsOfDenomination;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/m-debdutta/vending-machine/test/vending-machine-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[31,50],\\\"text\\\":\\\"\\\\\\\"../lib/testing.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":4,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":4,\\\"endColumn\\\":49,\\\"fix\\\":{\\\"range\\\":[74,101],\\\"text\\\":\\\"\\\\\\\"../src/vending-machine.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":16,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":17,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[657,657],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":26,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":27,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1171,1171],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":34,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":35,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1558,1558],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":40,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":41,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1779,1779],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":43,\\\"column\\\":92,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":44,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1921,1921],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":53,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":54,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2455,2455],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":61,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":62,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2616,2616],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":9,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":9,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"// TESTS\\\\n\\\\nconst test = require('../lib/testing.js');\\\\nconst vend = require('../src/vending-machine.js');\\\\n\\\\nconst testEdgeCases = function() {\\\\n  test.displayHeadline(\\\\\\\"Test for edge cases : \\\\\\\");\\\\n  test.assertEqual(0, vend.dispenseOptimumCoins(0,[1]),\\\\n    \\\\\\\"Given ₹0 and denomination 1 , we should get NO coin\\\\\\\");\\\\n  test.assertEqual(0, vend.dispenseOptimumCoins(5,[]),\\\\n    \\\\\\\"Given ₹5 and NO denomination, we should get NO coin\\\\\\\");\\\\n  test.assertEqual(1, vend.dispenseOptimumCoins(1,[1]), \\\\n    \\\\\\\"Given ₹1 and denomination 1, we should get one coin\\\\\\\");\\\\n  test.assertEqual(2, vend.dispenseOptimumCoins(2,[1]), \\\\n    \\\\\\\"Given ₹2 and denomination 1, we should get two coins\\\\\\\");\\\\n}\\\\n\\\\nconst testOrderedDenomination = function() {\\\\n  test.displayHeadline(\\\\\\\"Tests for ordered denomination :\\\\\\\");\\\\n  test.assertEqual(2, vend.dispenseOptimumCoins(6,[1, 2, 5, 10]), \\\\n    \\\\\\\"Given ₹6 and denomination [1, 2, 5, 10] should give two coins\\\\\\\");\\\\n  test.assertEqual(2, vend.dispenseOptimumCoins(7,[1, 2, 5, 10]), \\\\n    \\\\\\\"Given ₹7 and denomination [1, 2, 5, 10] should give two coins\\\\\\\");\\\\n  test.assertEqual(4, vend.dispenseOptimumCoins(13,[1, 4, 7]), \\\\n    \\\\\\\"Given ₹13 and denomination [1, 4, 7] should give four coins\\\\\\\");\\\\n}\\\\n\\\\nconst testUnorderdDenomination = function() {\\\\n  test.displayHeadline(\\\\\\\"Test for unordered denomination set : \\\\\\\");\\\\n  test.assertEqual(4, vend.dispenseOptimumCoins(13,[7, 1, 4]), \\\\n    \\\\\\\"Given ₹13 and denomination [7, 1, 4] should give four coins\\\\\\\");\\\\n  test.assertEqual(2, vend.dispenseOptimumCoins(19,[2, 13, 18, 1]), \\\\n    \\\\\\\"Given ₹9 and denomination [2, 13, 18, 1] should give two coins\\\\\\\");\\\\n}\\\\n\\\\nconst testBubbleSort = function() {\\\\n  test.displayHeadline(\\\\\\\"Test for sorting function\\\\\\\");\\\\n  test.assertArrayEqual([ 7, 5, 3, 1 ],vend.bubbleSort([5, 3, 7, 1]),\\\\n    \\\\\\\"Given set of [5, 3, 7, 1] should give [7, 5, 3, 1]\\\\\\\");\\\\n}\\\\n\\\\nconst testNoOfCoinsOfDenomination = function() {\\\\n  test.displayHeadline(\\\\\\\"Giving number of coins of each denomination arranged in any order\\\\\\\")\\\\n  const coinObject = vend.giveCoinsOfDenomination(19,[2, 5, 10, 1]);\\\\n  test.assertEqual(0,coinObject[1], \\\\n    \\\\\\\"Given ₹19 and denomination [2, 5, 10, 1] should give zero 1 rupee coin\\\\\\\");\\\\n  test.assertEqual(2,coinObject[2], \\\\n    \\\\\\\"Given ₹19 and denomination [2, 5, 10, 1] should give two 2 rupee coin\\\\\\\");\\\\n  test.assertEqual(1,coinObject[5], \\\\n    \\\\\\\"Given ₹19 and denomination [2, 5, 10, 1] should give one 5 rupee coin\\\\\\\");\\\\n  test.assertEqual(1,coinObject[10], \\\\n    \\\\\\\"Given ₹19 and denomination [2, 5, 10, 1] should give one 10 rupee coin\\\\\\\");\\\\n}\\\\n\\\\nconst tests = function() {\\\\n  testEdgeCases();\\\\n  testOrderedDenomination();\\\\n  testUnorderdDenomination();\\\\n  testBubbleSort();\\\\n  testNoOfCoinsOfDenomination();\\\\n}\\\\ntests();\\\\n\\\",\\\"usedDeprecatedRules\\\":[]}]\\n\""}],"SourovKH":[{"vending-machine":"\"[{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/SourovKH/vending-machine/lib/objectEquality.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":null,\\\"fatal\\\":true,\\\"severity\\\":2,\\\"message\\\":\\\"Parsing error: Unexpected token )\\\",\\\"line\\\":12,\\\"column\\\":19,\\\"nodeType\\\":null}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":1,\\\"fatalErrorCount\\\":1,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const isObjectEqual = function(object1, object2) {\\\\n  if (object1 === object2) {\\\\n    return true\\\\n  }\\\\n\\\\n  if (Object.keys(object1).length !== Object.keys(object2).lenth) {\\\\n    return false;\\\\n  }\\\\n\\\\n  for (let key1 in object1) {\\\\n    for (let key2 in object2) {\\\\n      if (object1.)\\\\n    }\\\\n  }\\\\n  return true;\\\\n}\\\\n\\\\nexports.isObjectEqual = isObjectEqual;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/SourovKH/vending-machine/lib/testing.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":3,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":4,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[102,102],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":6,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":7,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[164,164],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":10,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":11,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[232,232],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":14,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":15,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[296,296],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":18,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":19,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[362,362],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":22,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":23,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[429,429],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":32,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":33,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[627,627],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":33,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":34,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[629,629],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-implicit-globals\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Unexpected function declaration in the global scope, wrap in an IIFE for a local variable, assign as global property for a global variable.\\\",\\\"line\\\":35,\\\"column\\\":1,\\\"nodeType\\\":\\\"FunctionDeclaration\\\",\\\"messageId\\\":\\\"globalNonLexicalBinding\\\",\\\"endLine\\\":47,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function 'groupKeys' has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":35,\\\"column\\\":1,\\\"nodeType\\\":\\\"FunctionDeclaration\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":47,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":54,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":55,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[990,990],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":58,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":59,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1055,1055],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":66,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":67,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1327,1327],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":70,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":70,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":71,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":72,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1457,1457],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":73,\\\"column\\\":28,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":85,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":84,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":84,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":85,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":86,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1831,1831],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":89,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":90,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1912,1912],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-implicit-globals\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Unexpected function declaration in the global scope, wrap in an IIFE for a local variable, assign as global property for a global variable.\\\",\\\"line\\\":91,\\\"column\\\":1,\\\"nodeType\\\":\\\"FunctionDeclaration\\\",\\\"messageId\\\":\\\"globalNonLexicalBinding\\\",\\\"endLine\\\":107,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function 'isArraysEqual' has a complexity of 5. Maximum allowed is 2.\\\",\\\"line\\\":91,\\\"column\\\":1,\\\"nodeType\\\":\\\"FunctionDeclaration\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":107,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":114,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":115,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2502,2502],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":121,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":122,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2764,2764],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":129,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":129,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":130,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":131,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3011,3011],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":22,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":3,\\\"fixableErrorCount\\\":17,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const textStyle = function(styleCode, text) {\\\\n  return \\\\\\\"\\\\\\\\033[\\\\\\\" + styleCode + \\\\\\\"m\\\\\\\" + text + \\\\\\\"\\\\\\\\033[0m\\\\\\\";\\\\n}\\\\nconst bold  = function(text) {\\\\n  return textStyle(1, text);\\\\n}\\\\n\\\\nconst underline  = function(text) {\\\\n  return textStyle(4, text);\\\\n}\\\\n\\\\nconst redfg = function(text) {\\\\n  return textStyle(31, text);\\\\n}\\\\n\\\\nconst greenfg = function(text) {\\\\n  return textStyle(32, text);\\\\n}\\\\n\\\\nconst yellowfg = function(text) {\\\\n  return textStyle(33, text);\\\\n}\\\\n\\\\nconst testLog = [];\\\\n\\\\nconst updateTestLog = function(result, expected, actual, fnName) {\\\\n  testLog.push({\\\\n    result : result,\\\\n    expected : expected,\\\\n    actual : actual,\\\\n    fnName : fnName\\\\n  })\\\\n}\\\\n\\\\nfunction groupKeys(objects, key) {\\\\n  const group = {};\\\\n  for (let object of objects) {\\\\n    const keyValue = object[key];\\\\n    if (group[keyValue] === undefined) {\\\\n      group[keyValue] = [];\\\\n    }\\\\n\\\\n    group[keyValue].push(object);\\\\n  }\\\\n\\\\n  return group;\\\\n}\\\\n\\\\nlet totalTests = 0;\\\\nlet failedTests = 0;\\\\n\\\\nconst increamentTotalTests = function() {\\\\n  totalTests += 1;\\\\n}\\\\n\\\\nconst increamentFailedTests = function(){\\\\n  failedTests += 1;\\\\n}\\\\n\\\\nconst generateFailedMessage = function(expected, actual, testMessage) {\\\\n  const expectedValue =  greenfg(\\\\\\\"\\\\\\\\n\\\\\\\\tExpected\\\\\\\\t:\\\\\\\" + expected);\\\\n  const actualValue =  redfg(\\\\\\\"\\\\\\\\n\\\\\\\\tActual\\\\\\\\t\\\\\\\\t:\\\\\\\" + actual);\\\\n  const failMessage = actualValue + expectedValue;\\\\n\\\\n  return failMessage; \\\\n}\\\\n\\\\nconst displayHeader = function(fnName) {\\\\n  const header = \\\\\\\"Test for \\\\\\\" + fnName;\\\\n  console.log(\\\\\\\"\\\\\\\\n\\\\\\\" + bold(underline(header)));\\\\n}\\\\n\\\\nconst displayTestMessage = function(expected, actual, result, testMessage) {\\\\n  const icon = result === true ? \\\\\\\"✅\\\\\\\" : \\\\\\\"❌\\\\\\\";\\\\n  let message = \\\\\\\"\\\\\\\";\\\\n  message += icon;\\\\n  message += yellowfg(bold(\\\\\\\"Test: \\\\\\\"));\\\\n  message += bold(testMessage);\\\\n\\\\n  if (result === false) {\\\\n    increamentFailedTests();\\\\n    message += generateFailedMessage(expected, actual);\\\\n  }\\\\n  console.log(message);\\\\n}\\\\n\\\\nconst getResult = function (expected, actual) {\\\\n  return expected === actual;\\\\n}\\\\n\\\\nfunction isArraysEqual(array1, array2) {\\\\n  if (array1 === array2) {\\\\n    return true;\\\\n  };\\\\n\\\\n  if (array1.length !== array2.length) {\\\\n    return false;\\\\n  };\\\\n\\\\n  for (let currentTerm = 0; currentTerm < array1.length; currentTerm++) {\\\\n    if (array1[currentTerm] !== array2[currentTerm]) {\\\\n      return false;\\\\n    }\\\\n  }\\\\n\\\\n  return true;\\\\n}\\\\n\\\\nconst assertTest = function(expected, actual, testMessage, fnName) {\\\\n  increamentTotalTests();\\\\n  const result = getResult(expected, actual);\\\\n  updateTestLog(result, expected, actual, fnName);\\\\n  displayTestMessage(expected, actual, result, testMessage);\\\\n}\\\\n\\\\nconst assertArray  = function(expected, actual, testMessage, fnName) {\\\\n  increamentTotalTests();\\\\n  const result = isArraysEqual(expected, actual);\\\\n  updateTestLog(result, expected, actual, fnName);\\\\n  displayTestMessage(expected, actual, result, testMessage);\\\\n}\\\\n\\\\nconst displaySummary = function() {\\\\n  const passedTests = totalTests - failedTests;\\\\n  let summary = \\\\\\\"\\\\\\\\n\\\\\\\";\\\\n  summary += bold(underline(\\\\\\\"Summary: \\\\\\\"));\\\\n  summary += passedTests + \\\\\\\" / \\\\\\\" + totalTests;\\\\n  summary += \\\\\\\" Passed\\\\\\\";\\\\n  console.log(summary);\\\\n}\\\\n\\\\nexports.displayHeader = displayHeader;\\\\nexports.assertTest = assertTest;\\\\nexports.displaySummary = displaySummary;\\\\nexports.assertArray = assertArray;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/SourovKH/vending-machine/src/array-utilities.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":8,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":9,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[185,185],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":10,\\\"column\\\":14,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":26,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"max-depth\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Blocks are nested too deeply (3). Maximum allowed is 2.\\\",\\\"line\\\":16,\\\"column\\\":7,\\\"nodeType\\\":\\\"IfStatement\\\",\\\"messageId\\\":\\\"tooDeeply\\\",\\\"endLine\\\":20,\\\"endColumn\\\":8},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":26,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":27,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[700,700],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":4,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":2,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const sumOfNumbers = function (numbers) {\\\\n  let sum = 0;\\\\n\\\\n  for (let currentTerm = 0; currentTerm < numbers.length; currentTerm++) {\\\\n    sum += numbers[currentTerm];\\\\n  }\\\\n  return sum;\\\\n}\\\\n\\\\nconst sort = function(numbers) {\\\\n  let sortedNumbers = numbers.slice();\\\\n\\\\n  for (let index = 1; index < sortedNumbers.length ; index++) {\\\\n    for (let currentIndex = 1; currentIndex < sortedNumbers.length; currentIndex++) {\\\\n\\\\n      if (sortedNumbers[currentIndex - 1] < sortedNumbers[currentIndex]) {\\\\n        const temp = sortedNumbers[currentIndex - 1];\\\\n        sortedNumbers[currentIndex - 1] = sortedNumbers[currentIndex];\\\\n        sortedNumbers[currentIndex] = temp;\\\\n      }\\\\n\\\\n    }\\\\n  }\\\\n\\\\n  return sortedNumbers;\\\\n}\\\\n\\\\nexports.sort = sort;\\\\nexports.sum = sumOfNumbers;\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/SourovKH/vending-machine/src/vending-machine.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":17,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":18,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[499,499],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":30,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":31,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[834,834],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":2,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":2,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const arrayUtilities = require(\\\\\\\"./array-utilities.js\\\\\\\");\\\\n\\\\nconst sort= arrayUtilities.sort;\\\\n\\\\nconst countDenominations = function(amount, denominations) {\\\\n  let remainingAmount = amount;\\\\n  const coinCounts = {};\\\\n  const denominationList = sort(denominations);\\\\n\\\\n  for (const currentDenomination of denominationList) {\\\\n    const coins = Math.floor(remainingAmount / currentDenomination);\\\\n    remainingAmount %= currentDenomination;\\\\n    coinCounts[currentDenomination] = coins;\\\\n  }\\\\n\\\\n  return coinCounts;\\\\n}\\\\n\\\\nconst dispenseCoin = function(amount, denominations) {\\\\n  let currentAmount = amount;\\\\n  let coins = 0;\\\\n  const denominationList = sort(denominations);\\\\n\\\\n  for (const currentDenomination of denominationList) {\\\\n    coins += Math.floor(currentAmount / currentDenomination);\\\\n    currentAmount %= currentDenomination;\\\\n  }\\\\n\\\\n  return coins;\\\\n}\\\\n\\\\nexports.dispenseCoin = dispenseCoin;\\\\nexports.countDenominations = countDenominations;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/SourovKH/vending-machine/test/bubble-sort-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":2,\\\"column\\\":48,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":3,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[93,93],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":1,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":1,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require(\\\\\\\"../lib/testing.js\\\\\\\");\\\\nconst object = require(\\\\\\\"../src/bubble-sort.js\\\\\\\")\\\\n\\\\nconst assertTest = testing.assertTest;\\\\nconst assertArray = testing.assertArray;\\\\nconst displayHeader = testing.displayHeader;\\\\nconst displaySummary = testing.displaySummary;\\\\nconst bubbleSort = object.bubbleSort;\\\\n\\\\ndisplayHeader(\\\\\\\"bubbleSort\\\\\\\");\\\\nassertArray([], bubbleSort([]), \\\\\\\"For empty input it should give nothing\\\\\\\", \\\\\\\"bubbleSort\\\\\\\");\\\\nassertArray([1], bubbleSort([1]), \\\\\\\"For input [1] output should be [1]\\\\\\\", \\\\\\\"bubbleSort\\\\\\\");\\\\nassertArray([2,1], bubbleSort([1,2]), \\\\\\\"For input [1,2] output should be [2,1]\\\\\\\", \\\\\\\"bubbleSort\\\\\\\");\\\\nassertArray([3,2,1], bubbleSort([1,3,2]), \\\\\\\"For input [1,3,2] output should be [3,2,1]\\\\\\\", \\\\\\\"bubbleSort\\\\\\\");\\\\nassertArray([5,3,2,1], bubbleSort([1,3,2,5]), \\\\\\\"For input [1,3,2,5] output should be [5,3,2,1]\\\\\\\", \\\\\\\"bubbleSort\\\\\\\");\\\\n\\\\ndisplaySummary();\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/SourovKH/vending-machine/test/objectEquality-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":5,\\\"column\\\":1,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":5,\\\"endColumn\\\":12}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":0,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":1,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testObject = require(\\\\\\\"../lib/objectEquality.js\\\\\\\");\\\\n\\\\nconst isObjectEqual = testObject.isObjectEqual;\\\\n\\\\nconsole.log(isObjectEqual({a:1},{a:1}));\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/SourovKH/vending-machine/test/vending-machine-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":2,\\\"column\\\":53,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":3,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[98,98],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (16). Maximum allowed is 10.\\\",\\\"line\\\":11,\\\"column\\\":32,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":30,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":30,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":31,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2268,2268],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (13). Maximum allowed is 10.\\\",\\\"line\\\":32,\\\"column\\\":34,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":49,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":49,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":50,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3005,3005],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":5,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":3,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require(\\\\\\\"../lib/testing.js\\\\\\\");\\\\nconst vending = require(\\\\\\\"../src/vending-machine.js\\\\\\\")\\\\n\\\\nconst assertTest = testing.assertTest;\\\\nconst assertArray = testing.assertArray;\\\\nconst displayHeader = testing.displayHeader;\\\\nconst displaySummary = testing.displaySummary;\\\\nconst vendingMachine = vending.dispenseCoin;\\\\nconst countDenominations = vending.countDenominations;\\\\n\\\\nconst testsForTotalCoinCount = function() {\\\\n  displayHeader(\\\\\\\"ordered denominations\\\\\\\");\\\\n  assertTest(0, vendingMachine(0, [1]), \\\\\\\"For zero rupee and denomination is 1, vending machine should give no coin\\\\\\\");\\\\n  assertTest(1, vendingMachine(1, [1]), \\\\\\\"For 1 rupee and denomination is 1, vending machine should give 1 coin\\\\\\\");\\\\n  assertTest(1, vendingMachine(2, [1, 2]), \\\\\\\"For 2 rupees and denominations are (1,2), vending machine should give 1 coin\\\\\\\");\\\\n  assertTest(2, vendingMachine(3, [1, 2]), \\\\\\\"For 3 rupees and denominations are (1,2), vending machine should give 2 coins\\\\\\\");\\\\n  assertTest(1, vendingMachine(5, [5]), \\\\\\\"For 5 rupees and denomination is 5, vending machine should give 1 coin\\\\\\\");\\\\n  assertTest(2, vendingMachine(6, [1, 5]), \\\\\\\"For 6 rupees and denominations are (1,5), vending machine should give 2 coins\\\\\\\");\\\\n  assertTest(2, vendingMachine(7, [2, 5]), \\\\\\\"For 7 rupees and denominations are (2,5), vending machine should give 2 coins\\\\\\\");\\\\n  assertTest(4, vendingMachine(13, [1, 4, 7]), \\\\\\\"For 13 rupees and denominations are (1,4,7), vending machine should give 4 coins\\\\\\\");\\\\n  assertTest(1, vendingMachine(10, [10]), \\\\\\\"For 10 rupees and denomination is 10, vending machine should give 1 coin\\\\\\\");\\\\n  assertTest(2, vendingMachine(11,[1,2,5,10]), \\\\\\\"For 11 ruppees and denominations are (1,2,5,10), vending machine should give 2 coins\\\\\\\");\\\\n  assertTest(2, vendingMachine(15, [1,4,5,10]), \\\\\\\"For 15 rupees and denominations are (1,2,5,10), vending machine should give 2 coins\\\\\\\");\\\\n\\\\n  displayHeader(\\\\\\\"unordered denominations\\\\\\\");\\\\n\\\\n  assertTest(3, vendingMachine(8, [5,1,2]), \\\\\\\"For 8 rupees and denomination are (5,1,2), vending machine should give 3 coins\\\\\\\");\\\\n  assertTest(3, vendingMachine(13, [7,1,3,2]), \\\\\\\"For 13 rupees and denomination are (7,1,3,2), vending machine should give 3 coins\\\\\\\");\\\\n  assertTest(4, vendingMachine(23, [7,1,3,2]), \\\\\\\"For 23 rupees and denomination are (7,1,3,2), vending machine should give 4 coins\\\\\\\");\\\\n}\\\\n\\\\nconst testsToCountDenomination = function() {\\\\n  let countedDenominations; \\\\n\\\\n  displayHeader(\\\\\\\"rs 1 and denomination is 1\\\\\\\");\\\\n  countedDenominations = countDenominations(1,[1]);\\\\n  assertTest(countedDenominations[1], 1, \\\\\\\"1, 1rs coin\\\\\\\");\\\\n\\\\n  displayHeader(\\\\\\\"rs 3 and denominations are 1,2\\\\\\\");\\\\n  countedDenominations = countDenominations(3,[1,2]);\\\\n  assertTest(countedDenominations[1], 1, \\\\\\\"1, 1rs coin\\\\\\\");\\\\n  assertTest(countedDenominations[2], 1, \\\\\\\"1, 2rs coin\\\\\\\");\\\\n\\\\n  displayHeader(\\\\\\\"rs 9 and denominations are 1,2,5\\\\\\\");\\\\n  countedDenominations = countDenominations(9,[1,5,2]);\\\\n  assertTest(countedDenominations[1], 0, \\\\\\\"0, 1rs coin\\\\\\\");\\\\n  assertTest(countedDenominations[2], 2, \\\\\\\"2, 2rs coins\\\\\\\");\\\\n  assertTest(countedDenominations[5], 1, \\\\\\\"1, 5rs coin\\\\\\\");\\\\n}\\\\n\\\\ntestsForTotalCoinCount();\\\\ntestsToCountDenomination();\\\\ndisplaySummary();\\\\n\\\",\\\"usedDeprecatedRules\\\":[]}]\\n\""}],"bittukumarthakur":[{"vending-machine":"\"[{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/bittukumarthakur/vending-machine/lib/bubble-sort.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":1,\\\"column\\\":20,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":16,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"no-shadow\\\",\\\"severity\\\":2,\\\"message\\\":\\\"'index' is already declared in the upper scope on line 4 column 12.\\\",\\\"line\\\":5,\\\"column\\\":14,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"noShadow\\\",\\\"endLine\\\":5,\\\"endColumn\\\":19},{\\\"ruleId\\\":\\\"max-depth\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Blocks are nested too deeply (3). Maximum allowed is 2.\\\",\\\"line\\\":7,\\\"column\\\":7,\\\"nodeType\\\":\\\"IfStatement\\\",\\\"messageId\\\":\\\"tooDeeply\\\",\\\"endLine\\\":11,\\\"endColumn\\\":8},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":16,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":17,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[425,425],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":4,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":1,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const bubbleSort = function(list) {\\\\n  let currentList = list.slice();\\\\n\\\\n  for (let index = 0; index < list.length; index++) {\\\\n    for (let index = 0; index < list.length ; index++) {\\\\n\\\\n      if (currentList[index] < currentList[index + 1]) {\\\\n        const temValue = currentList[index];\\\\n        currentList[index] = currentList[index + 1];\\\\n        currentList[index + 1] = temValue;\\\\n      };\\\\n    };\\\\n  }\\\\n\\\\n  return currentList;\\\\n}\\\\n\\\\nexports.bubbleSort = bubbleSort;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/bittukumarthakur/vending-machine/lib/testing.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":7,\\\"column\\\":31,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":8,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[186,186],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":12,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":13,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[307,307],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":15,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":15,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":16,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":17,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[364,364],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":20,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":21,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[442,442],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":28,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":29,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[685,685],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":37,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":38,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[961,961],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":39,\\\"column\\\":22,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":47,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":47,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":47,\\\"endColumn\\\":3,\\\"fix\\\":{\\\"range\\\":[1154,1154],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":56,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":57,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1441,1441],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":59,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":59,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":60,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":61,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1533,1533],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":10,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":9,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"// testing framework.\\\\nlet totalTest = 0; // Global variable\\\\nlet passedTest = 0; // Global variable\\\\n\\\\nconst addSummary = function(result) {\\\\n  totalTest += 1;\\\\n  passedTest += result ? 1 : 0\\\\n};\\\\n\\\\nconst displaySummary = function() {\\\\n  display( \\\\\\\"\\\\\\\\n Summary: \\\\\\\" + passedTest + \\\\\\\" / \\\\\\\" + totalTest + \\\\\\\" Test passed.\\\\\\\");\\\\n}\\\\n\\\\nconst display = function(text) {\\\\n  console.log(text);\\\\n}\\\\n\\\\nconst isEqual = function(expected, actual) {\\\\n  return expected === actual;\\\\n}\\\\n\\\\nconst mismatchMessage = function(expected, actual, result,  message) {\\\\n  let errorMessage = message;\\\\n  errorMessage += \\\\\\\"\\\\\\\\n\\\\\\\\t Expected: \\\\\\\" + expected; \\\\n  errorMessage += \\\\\\\"\\\\\\\\n\\\\\\\\t Actual  : \\\\\\\" + actual; \\\\n\\\\n  return result ? message : errorMessage;\\\\n}\\\\n\\\\nconst assert = function(expected, actual, message) {\\\\n  const result = isEqual(expected, actual);\\\\n  const  modifiedmessage = mismatchMessage(expected, actual, result, message);\\\\n  const symbol = result ? \\\\\\\"✅\\\\\\\" : \\\\\\\"❌\\\\\\\";\\\\n\\\\n  addSummary(result);\\\\n  display(symbol + modifiedmessage);\\\\n}\\\\n\\\\nconst isArrayEqual = function(list1, list2) {\\\\n\\\\n  for (let index = 0; index < list1.length; index++) {\\\\n    if (list1[index] !== list2[index]) {\\\\n      return false;\\\\n    };\\\\n  };\\\\n  return true;\\\\n} \\\\n\\\\nconst assertArray = function(expected, actual, message) {\\\\n  const result = isArrayEqual(expected, actual);\\\\n  const  modifiedmessage = mismatchMessage(expected, actual, result, message);\\\\n  const symbol = result ? \\\\\\\"✅\\\\\\\" : \\\\\\\"❌\\\\\\\";\\\\n\\\\n  addSummary(result);\\\\n  display(symbol + modifiedmessage);\\\\n}\\\\n\\\\nconst displayTitle = function(title) {\\\\n  console.log(\\\\\\\"\\\\\\\\033[1;33m\\\\\\\" + title +  \\\\\\\"\\\\\\\\033[0m\\\\\\\");\\\\n}\\\\n\\\\nexports.assert = assert;\\\\nexports.displayTitle = displayTitle;\\\\nexports.displaySummary = displaySummary;\\\\nexports.assertArray = assertArray;\\\\nexports.isArrayEqual = isArrayEqual;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/bittukumarthakur/vending-machine/src/vending-machine.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":6,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":7,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[182,182],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":8,\\\"column\\\":22,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":21,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":21,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":22,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[549,549],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":35,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":36,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[944,944],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":4,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":3,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const sort = require(\\\\\\\"../lib/bubble-sort.js\\\\\\\");\\\\nconst bubbleSort = sort.bubbleSort;\\\\n\\\\nconst findNumberOfCoins = function(amount, coinValue) {\\\\n  return Math.floor(amount / coinValue);\\\\n}\\\\n\\\\nconst dispenseCoin = function(amount, coins) {\\\\n  const sortedCoins = bubbleSort(coins);\\\\n  let remainingAmount = amount;\\\\n  let numberOfCoins = 0;\\\\n\\\\n  for (let coin of sortedCoins) {\\\\n    numberOfCoins += findNumberOfCoins(remainingAmount, coin);\\\\n    remainingAmount = remainingAmount % coin;\\\\n\\\\n    if (remainingAmount === 0 ) {\\\\n      return numberOfCoins;\\\\n    };\\\\n  };\\\\n}\\\\n\\\\nconst dispenseCoinDetails = function(amount, coins) {\\\\n  const reversedCoinList = bubbleSort(coins);\\\\n  let remainingAmount = amount;\\\\n  let coinsDetail = {};\\\\n\\\\n  for (let coin of reversedCoinList) {\\\\n    const currentNumberOfCoins = findNumberOfCoins(remainingAmount, coin);\\\\n    remainingAmount = remainingAmount % coin;\\\\n    coinsDetail[coin] = currentNumberOfCoins;\\\\n  };\\\\n\\\\n  return coinsDetail; \\\\n}\\\\n\\\\nexports.dispenseCoin = dispenseCoin;\\\\nexports.dispenseCoinDetails = dispenseCoinDetails;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/bittukumarthakur/vending-machine/test/bubble-sort-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":12,\\\"column\\\":86,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":13,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[427,427],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":13,\\\"column\\\":90,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":14,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[517,517],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":14,\\\"column\\\":109,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":15,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[626,626],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":15,\\\"column\\\":86,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":16,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[712,712],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":16,\\\"column\\\":112,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":17,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[824,824],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":19,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":20,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[828,828],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":6,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":6,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require(\\\\\\\"../lib/testing.js\\\\\\\");\\\\nconst sort = require(\\\\\\\"../lib/bubble-sort.js\\\\\\\");\\\\nconst bubbleSort = sort.bubbleSort;\\\\n\\\\nconst displayTitle = testing.displayTitle;\\\\nconst assertArray = testing.assertArray;\\\\nconst displaySummary = testing.displaySummary;\\\\n\\\\nconst bubbleSortTest = function() {\\\\n  displayTitle (\\\\\\\"Testing of Bubble sort\\\\\\\");\\\\n\\\\n  assertArray(bubbleSort([ 2 ]), [ 2 ], \\\\\\\" Asserting array([ 2 ]) of single element.\\\\\\\")\\\\n  assertArray(bubbleSort([ 1, 2 ]), [ 2, 1 ], \\\\\\\" Asserting array([ 2, 1 ]) of 2 element.\\\\\\\")\\\\n  assertArray(bubbleSort([ 1, 2, 2, 1 ]), [ 2, 2, 1, 1 ], \\\\\\\" Asserting array in which element is repeating.\\\\\\\")\\\\n  assertArray(bubbleSort([ 2, 1, 5 ]), [ 5, 2, 1 ], \\\\\\\" Asserting array of 3 element.\\\\\\\")\\\\n  assertArray(bubbleSort([ 7, 3, 9, 10, 22 ]), [ 22, 10, 9, 7, 3 ], \\\\\\\" Asserting array of more than 3 element.\\\\\\\")\\\\n\\\\n\\\\n}\\\\n\\\\nbubbleSortTest();\\\\ndisplaySummary();\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/bittukumarthakur/vending-machine/test/vending-machine-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":17,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":18,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[643,643],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":51,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":52,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1589,1589],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (11). Maximum allowed is 10.\\\",\\\"line\\\":53,\\\"column\\\":18,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":68,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":67,\\\"column\\\":83,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":68,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2382,2382],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":68,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":69,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2384,2384],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (15). Maximum allowed is 10.\\\",\\\"line\\\":70,\\\"column\\\":33,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":88,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":88,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":89,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3446,3446],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":95,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":96,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3567,3567],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":8,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":6,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require(\\\\\\\"../lib/testing.js\\\\\\\");\\\\nconst vendingMachine = require(\\\\\\\"../src/vending-machine.js\\\\\\\");\\\\n\\\\nconst displayTitle = testing.displayTitle;\\\\nconst assert = testing.assert;\\\\nconst isArrayEqual = testing.isArrayEqual;\\\\nconst assertArray = testing.assertArray;\\\\nconst displaySummary = testing.displaySummary;\\\\nconst dispenseCoin = vendingMachine.dispenseCoin;\\\\nconst max = vendingMachine.max;\\\\nconst deleteElement = vendingMachine.deleteElement;\\\\nconst sort = vendingMachine.sort;\\\\nconst dispenseCoinDetails = vendingMachine.dispenseCoinDetails;\\\\n\\\\nconst it = function(message, testData) {\\\\n  assert(testData.actual, testData.expected, message);\\\\n}\\\\n\\\\nconst dispenseCoinTest = function() {\\\\n  displayTitle(\\\\\\\"Testing for dispenseCoin. \\\\\\\");\\\\n\\\\n  it(\\\\\\\"Should return undefined coin when no denominations are given.\\\\\\\", {\\\\n    actual: dispenseCoin(1, []),\\\\n    expected: undefined \\\\n  });\\\\n\\\\n  it(\\\\\\\"Should return 0 coin when 0 amount is given.\\\\\\\", {\\\\n    actual: dispenseCoin( 0, [ 1, 2 ]),\\\\n    expected: 0\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should return same amount when only one rupee coin denomination is given.\\\\\\\", {\\\\n    actual: dispenseCoin( 1, [ 1, 2 ]),\\\\n    expected: 1\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should return one coin of each denomination, if amount is sum of the denomination.\\\\\\\", {\\\\n    actual: dispenseCoin(8, [ 1, 2, 5]),\\\\n    expected: 3\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should return optimun number of coin for ordered set of denomination.\\\\\\\", {\\\\n    actual: dispenseCoin(13, [ 1, 2, 5, 10]),\\\\n    expected: 3\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should return optimun number of coin for unordered set of denomination.\\\\\\\", {\\\\n    actual: dispenseCoin(23, [ 5, 1, 10, 2]),\\\\n    expected: 4\\\\n  });\\\\n}\\\\n\\\\nconst sortTest = function() {\\\\n  displayTitle(\\\\\\\"Testing for max.\\\\\\\");\\\\n  assertArray(max([4, 1, 7]), 7, \\\\\\\" Max is 7 in 4, 1, 7\\\\\\\");\\\\n  assertArray(max([4, 15, 7]), 15, \\\\\\\" Max is 15 in 4, 15, 7\\\\\\\");\\\\n\\\\n  displayTitle(\\\\\\\"Testing for deleting element.\\\\\\\");\\\\n  assertArray(deleteElement([ 4, 1, 7 ], 7), [ 4, 1 ], \\\\\\\" deleting 7 from [4, 7, 1], array should be [4, 1].\\\\\\\");\\\\n  assertArray(deleteElement([ 4, 1, 7, 9, ], 1), [ 4, 7, 9 ], \\\\\\\" After deleting 1, it should be [4, 7, 9, 8].\\\\\\\");\\\\n\\\\n  displayTitle(\\\\\\\"Testing for sort.\\\\\\\");\\\\n  assertArray(sort([1, 2]), [2, 1], \\\\\\\"[1,2] after short should be [2, 1].\\\\\\\");\\\\n  assertArray(sort([10, 2, 5]), [10, 5, 2], \\\\\\\"[10, 2, 5] after sort should be [10, 5, 2].\\\\\\\");\\\\n\\\\n  displayTitle(\\\\\\\"Testing is array equal.\\\\\\\");\\\\n  assert(isArrayEqual([1, 2], [1, 2]), true, \\\\\\\" [1, 2] should be equal to [1, 2].\\\\\\\")\\\\n}\\\\n\\\\nconst dispenseCoinDetailsTest = function() {\\\\n  displayTitle(\\\\\\\"Testing for coin[ 1, 2 ] by denomination and amount is 3.\\\\\\\");\\\\n  let denominationTable = dispenseCoinDetails(3, [ 1, 2 ]);\\\\n  assert(denominationTable[1], 1, \\\\\\\" 1 rupee coin should be 1.\\\\\\\");\\\\n  assert(denominationTable[2], 1, \\\\\\\" 2 rupee coin should be 1.\\\\\\\");\\\\n\\\\n  displayTitle(\\\\\\\"Testing for coin[ 1, 2, 5 ] by denomination and amount is 8.\\\\\\\");\\\\n  denominationTable = dispenseCoinDetails(8, [ 1, 2, 5 ]);\\\\n  assert(denominationTable[1], 1, \\\\\\\" 1 rupee coin should be 1.\\\\\\\");\\\\n  assert(denominationTable[2], 1, \\\\\\\" 2 rupee coin should be 1.\\\\\\\");\\\\n  assert(denominationTable[5], 1, \\\\\\\" 5 rupee coin should be 1.\\\\\\\");\\\\n\\\\n  displayTitle(\\\\\\\"Testing for coin[ 1, 2, 5, 10 ] by denomination and amount is 13.\\\\\\\");\\\\n  denominationTable = dispenseCoinDetails(13, [ 1, 2, 5, 10 ]);\\\\n  assert(denominationTable[1], 1, \\\\\\\" 1 rupee coin should be 1.\\\\\\\");\\\\n  assert(denominationTable[2], 1, \\\\\\\" 2 rupee coin should be 1.\\\\\\\");\\\\n  assert(denominationTable[5], 0, \\\\\\\" 5 rupee coin should be 0.\\\\\\\");\\\\n  assert(denominationTable[10], 1, \\\\\\\" 10 rupee coin should be 1.\\\\\\\");\\\\n}\\\\n\\\\nconst runTest = function() {\\\\n  //  sortTest();\\\\n  dispenseCoinDetailsTest();\\\\n  dispenseCoinTest();\\\\n  displaySummary();\\\\n}\\\\n\\\\nrunTest();\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]}]\\n\""}],"BiswajitSen":[{"vending-machine":"\"[{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/BiswajitSen/vending-machine/lib/array-utils.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":1,\\\"column\\\":20,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":15,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"max-depth\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Blocks are nested too deeply (3). Maximum allowed is 2.\\\",\\\"line\\\":6,\\\"column\\\":7,\\\"nodeType\\\":\\\"IfStatement\\\",\\\"messageId\\\":\\\"tooDeeply\\\",\\\"endLine\\\":10,\\\"endColumn\\\":8},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":15,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":16,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[397,397],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":3,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":1,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const bubbleSort = function(array){\\\\n  const numbers = array.slice(0);\\\\n\\\\n  for(let pass = 0; pass < numbers.length - 1; pass++){\\\\n    for(let index = 0; index < numbers.length - pass - 1; index++){\\\\n      if(numbers[index] < numbers[index + 1]){\\\\n        const temp = numbers[index];\\\\n        numbers[index] = numbers[index + 1];\\\\n        numbers[index + 1] = temp;\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  return numbers;\\\\n}\\\\n\\\\nexports.bubbleSort = bubbleSort;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/BiswajitSen/vending-machine/lib/math-utils.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":3,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":4,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[88,88],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":7,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":8,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[167,167],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":17,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":18,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[301,301],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":3,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":3,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const quotient = function(dividend, divisor){\\\\n  return Math.floor(dividend / divisor);\\\\n}\\\\n\\\\nconst remainder = function(dividend, divisor){\\\\n  return dividend % divisor;\\\\n}\\\\n\\\\nconst countTotal = function(numbers){\\\\n  let sum = 0;\\\\n\\\\n  for (const number of numbers) {\\\\n    sum = sum + number;\\\\n  }\\\\n\\\\n  return sum;\\\\n}\\\\n\\\\nexports.quotient = quotient;\\\\nexports.remainder = remainder;\\\\nexports.countTotal = countTotal;\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/BiswajitSen/vending-machine/lib/testing.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":3,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":4,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[102,102],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":7,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":8,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[165,165],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":11,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":12,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[233,233],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":15,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":16,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[297,297],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":19,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":20,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[363,363],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":23,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":24,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[430,430],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":36,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":37,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[644,644],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":40,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":41,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[698,698],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":42,\\\"column\\\":27,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":48,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":48,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":49,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[883,883],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":51,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":51,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":52,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":53,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1024,1024],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":56,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":56,\\\"endColumn\\\":16},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":58,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":59,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1134,1134],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":60,\\\"column\\\":27,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":69,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":69,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":70,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1347,1347],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":73,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":73,\\\"endColumn\\\":16},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":74,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":74,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":75,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":76,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1597,1597],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":83,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":84,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1868,1868],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":87,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":87,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":88,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":89,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1998,1998],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":90,\\\"column\\\":28,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":101,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":100,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":100,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":101,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":102,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2343,2343],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":105,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":106,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2424,2424],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 5. Maximum allowed is 2.\\\",\\\"line\\\":107,\\\"column\\\":23,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":123,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":123,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":124,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2767,2767],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":129,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":130,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3016,3016],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":135,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":136,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3266,3266],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":140,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":141,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3470,3470],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":142,\\\"column\\\":23,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":159,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":159,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":159,\\\"endColumn\\\":3,\\\"fix\\\":{\\\"range\\\":[3937,3937],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":27,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":6,\\\"fixableErrorCount\\\":22,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const textStyle = function(styleCode, text) {\\\\n  return \\\\\\\"\\\\\\\\033[\\\\\\\" + styleCode + \\\\\\\"m\\\\\\\" + text + \\\\\\\"\\\\\\\\033[0m\\\\\\\";\\\\n}\\\\n\\\\nconst bold  = function(text) {\\\\n  return textStyle(1, text);\\\\n}\\\\n\\\\nconst underline  = function(text) {\\\\n  return textStyle(4, text);\\\\n}\\\\n\\\\nconst redfg = function(text) {\\\\n  return textStyle(31, text);\\\\n}\\\\n\\\\nconst greenfg = function(text) {\\\\n  return textStyle(32, text);\\\\n}\\\\n\\\\nconst yellowfg = function(text) {\\\\n  return textStyle(33, text);\\\\n}\\\\n\\\\nconst testLog = [];\\\\n\\\\nconst updateTestLog = function(expected, actual, message, result, functionName) {\\\\n  testLog.push(\\\\n    {\\\\n      result,\\\\n      message,\\\\n      expected,\\\\n      actual,\\\\n      functionName\\\\n    });\\\\n}\\\\n\\\\nconst getTestLog = function () {\\\\n  return testLog;\\\\n}\\\\n\\\\nconst getNoOfTestPassed = function (log) {\\\\n  let noOfTestPassed = 0;\\\\n  for ( const entry of log) {\\\\n    noOfTestPassed +=  entry.result === true ? 1 : 0;\\\\n  }\\\\n  return noOfTestPassed;\\\\n}\\\\n\\\\nconst displaySummary = function () {\\\\n  console.log(\\\\\\\"No of Test Passed = \\\\\\\" + getNoOfTestPassed(getTestLog()) + \\\\\\\"/\\\\\\\" + getTestLog().length);\\\\n}\\\\n\\\\nconst displayTestLog = function () {\\\\n  const log = getTestLog();\\\\n  console.table(log);\\\\n  displaySummary();\\\\n}\\\\n\\\\nconst groupTestLogByKey = function (key) {\\\\n  const groups = {};\\\\n  for (const log of getTestLog()) {\\\\n    if (!groups[log[key]])\\\\n      groups[log[key]] = [];\\\\n    groups[log[key]].push(log);\\\\n  }\\\\n\\\\n  return groups;\\\\n}\\\\n\\\\nconst printFunctionTests = function(functionName) {\\\\n  const log = groupTestLogByKey(\\\\\\\"functionName\\\\\\\");\\\\n  console.table(log[functionName]);\\\\n  console.log(\\\\\\\"No of Test Passed = \\\\\\\", getNoOfTestPassed(log[functionName]) + \\\\\\\"/\\\\\\\" + log[functionName].length);\\\\n}\\\\n\\\\nconst generateFailedMessage = function(expected, actual, testMessage) {\\\\n  const expectedValue =  greenfg(\\\\\\\"\\\\\\\\n\\\\\\\\tExpected\\\\\\\\t:\\\\\\\" + expected);\\\\n  const actualValue =  redfg(\\\\\\\"\\\\\\\\n\\\\\\\\tActual\\\\\\\\t\\\\\\\\t:\\\\\\\" + actual);\\\\n  const failMessage = actualValue + expectedValue;\\\\n\\\\n  return failMessage;\\\\n}\\\\n\\\\nconst displayHeader = function(fnName) {\\\\n  const header = \\\\\\\"Test for \\\\\\\" + fnName;\\\\n  console.log(\\\\\\\"\\\\\\\\n\\\\\\\" + bold(underline(header)));\\\\n}\\\\n\\\\nconst displayTestMessage = function(expected, actual, result, testMessage) {\\\\n  const icon = result === true ? \\\\\\\"✅\\\\\\\" : \\\\\\\"❌\\\\\\\";\\\\n  let message = \\\\\\\"\\\\\\\";\\\\n  message += icon;\\\\n  message += yellowfg(bold(\\\\\\\"Test: \\\\\\\"));\\\\n  message += bold(testMessage);\\\\n\\\\n  if (result === false) {\\\\n    message += generateFailedMessage(expected, actual);\\\\n  }\\\\n  console.log(message);\\\\n}\\\\n\\\\nconst getResult = function (expected, actual) {\\\\n  return expected === actual;\\\\n}\\\\n\\\\nconst isArraysEqual = function (array1, array2) {\\\\n  if (array1 === array2) {\\\\n    return true;\\\\n  };\\\\n\\\\n  if (array1.length !== array2.length) {\\\\n    return false;\\\\n  };\\\\n\\\\n  for (let currentTerm = 0; currentTerm < array1.length; currentTerm++) {\\\\n    if (array1[currentTerm] !== array2[currentTerm]) {\\\\n      return false;\\\\n    }\\\\n  }\\\\n\\\\n  return true;\\\\n}\\\\n\\\\nconst assertArray  = function(expected, actual, message, functionName) {\\\\n  const result = isArraysEqual(expected, actual);\\\\n  updateTestLog(expected, actual, message, result, functionName);\\\\n  displayTestMessage(expected, actual, result, message);\\\\n}\\\\n\\\\nconst assertTest = function(expected, actual, message, functionName) {\\\\n  const result = expected === actual ? true : false;\\\\n  updateTestLog(expected, actual, message, result, functionName);\\\\n  displayTestMessage(expected, actual, result, message);\\\\n}\\\\n\\\\nconst updatelog = function(expected, actual, message, result, functionName) {\\\\n  updateTestLog(expected, actual, message, result, functionName);\\\\n  displayTestMessage(expected, actual, result, message);\\\\n}\\\\n\\\\nconst assertTestObj = function(expected, actual, message, functionName) {\\\\n  let result = false;\\\\n\\\\n  if( Object.keys(expected).length !== Object.keys(actual).length){\\\\n    updatelog(expected, actual, message, false, functionName);\\\\n\\\\n    return;\\\\n  }\\\\n\\\\n  for(const key in actual){\\\\n    if(expected[key]  !== actual[key]){\\\\n      updatelog(expected, actual, message, false, functionName);\\\\n\\\\n      return;\\\\n    }\\\\n  }\\\\n  updatelog(expected, actual, message, true, functionName);\\\\n} \\\\n\\\\nexports.assertTest = assertTest;\\\\nexports.assertArray = assertArray;\\\\nexports.displaySummary = displaySummary;\\\\nexports.displayHeader = displayHeader;\\\\nexports.getTestLog = getTestLog;\\\\nexports.displayTestLog = displayTestLog;\\\\nexports.assertTestObj = assertTestObj;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/BiswajitSen/vending-machine/src/vending-machine.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":44,\\\"fix\\\":{\\\"range\\\":[21,43],\\\"text\\\":\\\"\\\\\\\"../lib/math-utils.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":32,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":55,\\\"fix\\\":{\\\"range\\\":[77,100],\\\"text\\\":\\\"\\\\\\\"../lib/array-utils.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":20,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":21,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[671,671],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":27,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":28,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[898,898],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":4,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":4,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const math = require('../lib/math-utils.js');\\\\nconst arrayUtilities = require('../lib/array-utils.js');\\\\n\\\\nconst quotient = math.quotient;\\\\nconst remainder = math.remainder;\\\\nconst sum = math.countTotal;\\\\nconst sort = arrayUtilities.bubbleSort;\\\\n\\\\nconst getOptimumDistribution = function(totalAmount, requiredDenominations){\\\\n  const denominations = sort(requiredDenominations.slice(0));\\\\n  const coinCounts = {};\\\\n  let leftOverAmount = totalAmount;\\\\n\\\\n  for (const denomination of denominations) {\\\\n    const coins = quotient(leftOverAmount, denomination);\\\\n    leftOverAmount = remainder(leftOverAmount, denomination);\\\\n    coinCounts[denomination] = coins;\\\\n  }\\\\n  return coinCounts;\\\\n}\\\\n\\\\nconst calculateTotalCoins = function(rupees, requiredDenominations){\\\\n  const coinsCount = getOptimumDistribution(rupees, requiredDenominations);\\\\n  const countedCoins = Object.values(coinsCount);\\\\n\\\\n  return sum(countedCoins);\\\\n}\\\\n\\\\nexports.calculateTotalCoins = calculateTotalCoins;\\\\nexports.getOptimumDistribution = getOptimumDistribution;\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/BiswajitSen/vending-machine/test/array-utils-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":25,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":44,\\\"fix\\\":{\\\"range\\\":[24,43],\\\"text\\\":\\\"\\\\\\\"../lib/testing.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":32,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":55,\\\"fix\\\":{\\\"range\\\":[77,100],\\\"text\\\":\\\"\\\\\\\"../lib/array-utils.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":4,\\\"column\\\":45,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":5,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[148,148],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":5,\\\"column\\\":40,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":6,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[188,188],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":14,\\\"column\\\":9,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":14,\\\"endColumn\\\":21,\\\"fix\\\":{\\\"range\\\":[425,437],\\\"text\\\":\\\"\\\\\\\"bubbleSort\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":16,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":16,\\\"endColumn\\\":55,\\\"fix\\\":{\\\"range\\\":[446,495],\\\"text\\\":\\\"\\\\\\\"Should return an empty array if an empty array.\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":21,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":21,\\\"endColumn\\\":67,\\\"fix\\\":{\\\"range\\\":[557,618],\\\"text\\\":\\\"\\\\\\\"Should return an equal array if array has one element only.\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":26,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":26,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[682,734],\\\"text\\\":\\\"\\\\\\\"Should return sorted array, for array of integers.\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":31,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":32,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[812,812],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":36,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":37,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[882,882],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":10,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":10,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require('../lib/testing.js');\\\\nconst arrayUtilities = require('../lib/array-utils.js');\\\\n\\\\nconst bubbleSort = arrayUtilities.bubbleSort\\\\nconst assertArray = testing.assertArray\\\\nconst displaySummary = testing.displaySummary;\\\\nconst title = testing.displayHeader;\\\\n\\\\nconst it = function (testName, testData) {\\\\n  assertArray(testData.expected, testData.actual, testName);\\\\n};\\\\n\\\\nconst testBubbleSort = function(){\\\\n  title('bubbleSort');\\\\n\\\\n  it('Should return an empty array if an empty array.', {\\\\n    actual: bubbleSort([]),\\\\n    expected: [],\\\\n  });\\\\n\\\\n  it('Should return an equal array if array has one element only.', {\\\\n    actual: bubbleSort([1]),\\\\n    expected: [1],\\\\n  });\\\\n\\\\n  it('Should return sorted array, for array of integers.', {\\\\n    actual: bubbleSort([8, 1, 3, 9]),\\\\n    expected: [9, 8, 3, 1],\\\\n  });\\\\n\\\\n}\\\\n\\\\nconst test = function(){\\\\n  testBubbleSort();\\\\n  displaySummary();  \\\\n}\\\\n\\\\ntest();\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/BiswajitSen/vending-machine/test/vending-machine-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":20,\\\"column\\\":9,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":20,\\\"endColumn\\\":26,\\\"fix\\\":{\\\"range\\\":[675,692],\\\"text\\\":\\\"\\\\\\\"countTotalCoins\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":41,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":42,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1271,1271],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":45,\\\"column\\\":9,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":45,\\\"endColumn\\\":26,\\\"fix\\\":{\\\"range\\\":[1321,1338],\\\"text\\\":\\\"\\\\\\\"Each coin count\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":57,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":58,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1718,1718],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":63,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":64,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1811,1811],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":5,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":5,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require(\\\\\\\"../lib/testing.js\\\\\\\");\\\\nconst vendingMachine = require(\\\\\\\"../src/vending-machine.js\\\\\\\");\\\\n\\\\nconst calculateTotalCoins = vendingMachine.calculateTotalCoins;\\\\nconst getOptimumDistribution = vendingMachine.getOptimumDistribution;\\\\nconst assertTestObj = testing.assertTestObj;\\\\nconst assertTest = testing.assertTest;\\\\nconst displaySummary = testing.displaySummary;\\\\nconst title = testing.displayHeader;\\\\n\\\\nconst it = function (testName, testData) {\\\\n  assertTest(testData.expected, testData.actual, testName);\\\\n};\\\\n\\\\nconst objIt = function (testName, testData) {\\\\n  assertTestObj(testData.expected, testData.actual, testName);\\\\n};\\\\n\\\\nconst testCoinsCount = function() {\\\\n  title('countTotalCoins');\\\\n\\\\n  it(\\\\\\\"should return 0 coins when no denominations are given\\\\\\\", {\\\\n    actual: calculateTotalCoins(1, []),\\\\n    expected: 0,\\\\n  });\\\\n\\\\n  it(\\\\\\\"should return amount when only 1Rs coins can be dispensed\\\\\\\", {\\\\n    actual: calculateTotalCoins(5, [1]),\\\\n    expected: 5,\\\\n  });\\\\n\\\\n  it(\\\\\\\"should return optimum coins count when a set of coins can be dispensed\\\\\\\", {\\\\n    actual: calculateTotalCoins(9, [5, 2, 1]),\\\\n    expected: 3,\\\\n  });\\\\n\\\\n  it(\\\\\\\"should return optimum coins count when an unsorted set of denomination is given\\\\\\\", {\\\\n    actual: calculateTotalCoins(10, [5, 1, 4]),\\\\n    expected: 2,\\\\n  });\\\\n}\\\\n\\\\n\\\\nconst testEachCoinCounts = function(){\\\\n  title('Each coin count');\\\\n\\\\n  objIt(\\\\\\\"should return optimum coins count of each denominations when an unsorted set of denomination is given\\\\\\\", {\\\\n    actual: getOptimumDistribution(10, [5, 1, 4]),\\\\n    expected: {5: 2, 4: 0, 1: 0},\\\\n  });\\\\n\\\\n  objIt(\\\\\\\"should return 1 coin of the same value if denomination is given\\\\\\\", {\\\\n    actual: getOptimumDistribution(5, [5, 1, 4]),\\\\n    expected: {5: 1, 1: 0, 4: 0},\\\\n  });\\\\n\\\\n}\\\\n\\\\nconst test = function() {\\\\n  testCoinsCount();\\\\n  testEachCoinCounts();\\\\n  displaySummary();\\\\n}\\\\n\\\\n\\\\ntest();\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]}]\\n\""}],"kvidita":[{"vending-machine":"\"[{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/kvidita/vending-machine/lib/testing.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":5,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":5,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[147,148],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":6,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":6,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[170,171],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":7,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":7,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[193,194],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":9,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":9,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[285,286],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":10,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":10,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[380,381],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":10,\\\"column\\\":2,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":10,\\\"endColumn\\\":13},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":11,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":12,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[403,403],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":16,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":16,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[492,493],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":17,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":17,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[515,516],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":18,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":18,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[538,539],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":20,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":20,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[630,631],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":21,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":21,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[746,747],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":21,\\\"column\\\":2,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":21,\\\"endColumn\\\":13},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":22,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":23,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[769,769],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":25,\\\"column\\\":23,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":35,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":26,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":26,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[821,822],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 2 tabs.\\\",\\\"line\\\":27,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":27,\\\"endColumn\\\":3,\\\"fix\\\":{\\\"range\\\":[860,862],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":28,\\\"column\\\":1,\\\"nodeType\\\":\\\"Punctuator\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":28,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[876,877],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":29,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":29,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[879,880],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 2 tabs.\\\",\\\"line\\\":30,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":30,\\\"endColumn\\\":3,\\\"fix\\\":{\\\"range\\\":[934,936],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 6 spaces but found 3 tabs.\\\",\\\"line\\\":31,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":31,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[974,977],\\\"text\\\":\\\"      \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 2 tabs.\\\",\\\"line\\\":32,\\\"column\\\":1,\\\"nodeType\\\":\\\"Punctuator\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":32,\\\"endColumn\\\":3,\\\"fix\\\":{\\\"range\\\":[991,993],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":33,\\\"column\\\":1,\\\"nodeType\\\":\\\"Punctuator\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":33,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[995,996],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":34,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":34,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[998,999],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":35,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":36,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1013,1013],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":23,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":22,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"//----------------------------------asserting-test--------------------------------------------\\\\n\\\\nconst assert = function(expected, actual, text) {\\\\n\\\\n\\\\tconst passed = \\\\\\\"🟢 \\\\\\\";\\\\n\\\\tconst failed = \\\\\\\"🔴 \\\\\\\";\\\\n\\\\tconst\\\\tactualExpectedMessage = \\\\\\\"\\\\\\\\n\\\\\\\\tExpected: \\\\\\\" + expected + \\\\\\\"\\\\\\\\n\\\\\\\" + \\\\\\\"\\\\\\\\tActual: \\\\\\\" + actual;\\\\n\\\\n\\\\tconst result = (expected === actual) ?\\\\tpassed + text : failed + text + actualExpectedMessage;\\\\n\\\\tconsole.log(result);\\\\n}\\\\n\\\\nexports.assert = assert;\\\\n\\\\nconst assertArraysEqual = function(expected, actual, text) {\\\\n\\\\tconst passed = \\\\\\\"🟢 \\\\\\\";\\\\n\\\\tconst failed = \\\\\\\"🔴 \\\\\\\";\\\\n\\\\tconst\\\\tactualExpectedMessage = \\\\\\\"\\\\\\\\n\\\\\\\\tExpected: \\\\\\\" + expected + \\\\\\\"\\\\\\\\n\\\\\\\" + \\\\\\\"\\\\\\\\tActual: \\\\\\\" + actual;\\\\n\\\\n\\\\tconst result = (ifArraysEqual(expected, actual) === true) ? passed + text : failed + text + actualExpectedMessage;\\\\n\\\\tconsole.log(result);\\\\n}\\\\n\\\\n\\\\nconst ifArraysEqual = function(array1, array2) {\\\\n\\\\tif (array1.length != array2.length) {\\\\n\\\\t\\\\treturn false;\\\\n\\\\t}\\\\n\\\\tfor (let count = 0; count < array1.length; count++) {\\\\n\\\\t\\\\tif (array1[count] != array2[count]) {\\\\n\\\\t\\\\t\\\\treturn false;\\\\n\\\\t\\\\t}\\\\n\\\\t}\\\\n\\\\treturn true;\\\\n}\\\\n\\\\nexports.assertArraysEqual = assertArraysEqual;\\\\n\\\\n// console.log(ifArraysEqual([1,2,3,4,7,4,2], [1,2,3,4,7,4,2]));\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/kvidita/vending-machine/src/sorting.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":1,\\\"column\\\":19,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":16,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":2,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":2,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[34,35],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":4,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":4,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[64,65],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 2 tabs.\\\",\\\"line\\\":5,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":5,\\\"endColumn\\\":3,\\\"fix\\\":{\\\"range\\\":[118,120],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 6 spaces but found 3 tabs.\\\",\\\"line\\\":7,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":7,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[174,177],\\\"text\\\":\\\"      \\\"}},{\\\"ruleId\\\":\\\"max-depth\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Blocks are nested too deeply (3). Maximum allowed is 2.\\\",\\\"line\\\":7,\\\"column\\\":4,\\\"nodeType\\\":\\\"IfStatement\\\",\\\"messageId\\\":\\\"tooDeeply\\\",\\\"endLine\\\":11,\\\"endColumn\\\":5},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 8 spaces but found 4 tabs.\\\",\\\"line\\\":8,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":8,\\\"endColumn\\\":5,\\\"fix\\\":{\\\"range\\\":[216,220],\\\"text\\\":\\\"        \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 8 spaces but found 4 tabs.\\\",\\\"line\\\":9,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":9,\\\"endColumn\\\":5,\\\"fix\\\":{\\\"range\\\":[253,257],\\\"text\\\":\\\"        \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 8 spaces but found 4 tabs.\\\",\\\"line\\\":10,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":10,\\\"endColumn\\\":5,\\\"fix\\\":{\\\"range\\\":[290,294],\\\"text\\\":\\\"        \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 6 spaces but found 3 tabs.\\\",\\\"line\\\":11,\\\"column\\\":1,\\\"nodeType\\\":\\\"Punctuator\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":11,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[325,328],\\\"text\\\":\\\"      \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 2 tabs.\\\",\\\"line\\\":12,\\\"column\\\":1,\\\"nodeType\\\":\\\"Punctuator\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":12,\\\"endColumn\\\":3,\\\"fix\\\":{\\\"range\\\":[330,332],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":13,\\\"column\\\":1,\\\"nodeType\\\":\\\"Punctuator\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":13,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[334,335],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":15,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":15,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[338,339],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":16,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":17,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[354,354],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":14,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":12,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const sortArray = function(arr) {\\\\n\\\\tconst array = arr.concat();\\\\n\\\\n\\\\tfor (let count = 0; count < array.length; count++) {\\\\n\\\\t\\\\tfor (let index = 0; index < array.length; index++) {\\\\n\\\\n\\\\t\\\\t\\\\tif (array[index] > array[index + 1]) {\\\\n\\\\t\\\\t\\\\t\\\\tconst\\\\tswapingNum = array[index];\\\\n\\\\t\\\\t\\\\t\\\\tarray[index] = array[index + 1];\\\\n\\\\t\\\\t\\\\t\\\\tarray[index + 1] = swapingNum;\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t}\\\\n\\\\t}\\\\n\\\\n\\\\treturn array;\\\\n}\\\\n\\\\nexports.sortArray = sortArray;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/kvidita/vending-machine/src/vending-machine.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":4,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":4,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[100,101],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":5,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":5,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[167,168],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":6,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":6,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[187,188],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":8,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":8,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[214,215],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 2 tabs.\\\",\\\"line\\\":9,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":9,\\\"endColumn\\\":3,\\\"fix\\\":{\\\"range\\\":[289,291],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 2 tabs.\\\",\\\"line\\\":10,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":10,\\\"endColumn\\\":3,\\\"fix\\\":{\\\"range\\\":[368,370],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":11,\\\"column\\\":1,\\\"nodeType\\\":\\\"Punctuator\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":11,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[426,427],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":12,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":12,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[429,430],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":14,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":15,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[450,450],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":18,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":18,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[500,501],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":19,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":20,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[539,539],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":22,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":22,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[589,590],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":23,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":24,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[618,618],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":27,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":27,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[676,677],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":28,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":28,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[736,737],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":29,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":29,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[766,767],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":31,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":31,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[793,794],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 2 tabs.\\\",\\\"line\\\":32,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":32,\\\"endColumn\\\":3,\\\"fix\\\":{\\\"range\\\":[859,861],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 2 tabs.\\\",\\\"line\\\":33,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":33,\\\"endColumn\\\":3,\\\"fix\\\":{\\\"range\\\":[949,951],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":34,\\\"column\\\":1,\\\"nodeType\\\":\\\"Punctuator\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":34,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[1009,1010],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":36,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":36,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[1013,1014],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":37,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":38,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1042,1042],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":22,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":22,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const sortarray = require(\\\\\\\"./sorting.js\\\\\\\");\\\\n\\\\nconst dispenseCoins = function(denominations, amount) {\\\\n\\\\tconst arrangedDenominations = sortarray.sortArray(denominations);\\\\n\\\\tlet coinCount = 0;\\\\n\\\\tlet amountLeft = amount;\\\\n\\\\n\\\\tfor (let count = arrangedDenominations.length - 1; count >= 0; count--) {\\\\n\\\\t\\\\tcoinCount = coinCount + Math.floor(amountLeft/arrangedDenominations[count]);\\\\n\\\\t\\\\tamountLeft = amountLeft % arrangedDenominations[count];\\\\n\\\\t}\\\\n\\\\treturn coinCount;\\\\n\\\\n}\\\\n\\\\n\\\\nconst division = function(divident, divisor) {\\\\n\\\\treturn Math.floor(divident/divisor);\\\\n}\\\\n\\\\nconst remainder = function(divident, divisor) {\\\\n\\\\treturn divident % divisor;\\\\n}\\\\n\\\\n\\\\nconst coinCount = function(denominationList, amount) {\\\\n\\\\tlet denominations = sortarray.sortArray(denominationList);\\\\n\\\\tlet denominationsCount = {};\\\\n\\\\tlet amountLeft = amount;\\\\n\\\\n\\\\tfor (let count = denominations.length - 1; count >= 0; count--){\\\\n\\\\t\\\\tdenominationsCount[denominations[count]] = division(amountLeft, denominations[count]);\\\\t\\\\n\\\\t\\\\tamountLeft = remainder(amountLeft, denominations[count]);\\\\n\\\\t}\\\\n\\\\n\\\\treturn denominationsCount;\\\\n}\\\\n\\\\nexports.dispenseCoins = dispenseCoins;\\\\nexports.coinCount = coinCount;\\\\n\\\\n\\\\n\\\\n/*\\\\nconst objectToArray = function(object) {\\\\n\\\\n\\\\n}\\\\n\\\\n */\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/kvidita/vending-machine/test/vending-machine-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":1,\\\"column\\\":60,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":2,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[59,59],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":2,\\\"column\\\":45,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":2,\\\"endColumn\\\":46,\\\"fix\\\":{\\\"range\\\":[104,104],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":3,\\\"column\\\":45,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":4,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[150,150],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (16). Maximum allowed is 10.\\\",\\\"line\\\":13,\\\"column\\\":31,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":30,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":14,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":14,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[550,551],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":14,\\\"column\\\":2,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":14,\\\"endColumn\\\":13},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":14,\\\"column\\\":40,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":15,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[589,589],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":15,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":15,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[590,591],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":15,\\\"column\\\":110,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":16,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[699,699],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":16,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":16,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[700,701],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":16,\\\"column\\\":120,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":17,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[819,819],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":17,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":17,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[820,821],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":17,\\\"column\\\":121,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":18,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[940,940],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":18,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":18,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[941,942],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":18,\\\"column\\\":127,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":19,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1067,1067],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":19,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":19,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[1068,1069],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":19,\\\"column\\\":127,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":20,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1194,1194],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":20,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":20,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[1195,1196],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":20,\\\"column\\\":129,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":21,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1323,1323],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":21,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":21,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[1324,1325],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":21,\\\"column\\\":129,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":22,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1452,1452],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":22,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":22,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[1453,1454],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":22,\\\"column\\\":136,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":23,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1588,1588],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":23,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":23,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[1589,1590],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":23,\\\"column\\\":137,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":24,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1725,1725],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":24,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":24,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[1726,1727],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":24,\\\"column\\\":137,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":25,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1862,1862],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":25,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":25,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[1863,1864],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":25,\\\"column\\\":137,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":26,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1999,1999],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":26,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":26,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[2000,2001],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":26,\\\"column\\\":129,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":27,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2128,2128],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":27,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":27,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[2129,2130],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":27,\\\"column\\\":129,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":28,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2257,2257],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":28,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":28,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[2258,2259],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":28,\\\"column\\\":129,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":29,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2386,2386],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":29,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":29,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[2387,2388],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":29,\\\"column\\\":2,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":29,\\\"endColumn\\\":13},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":30,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":31,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2404,2404],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":35,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":35,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[2470,2471],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":35,\\\"column\\\":2,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":35,\\\"endColumn\\\":13},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":35,\\\"column\\\":39,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":36,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2508,2508],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":36,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":36,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[2509,2510],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":37,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":37,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[2611,2612],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":38,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":38,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[2713,2714],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":39,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":39,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[2815,2816],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":39,\\\"column\\\":2,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":39,\\\"endColumn\\\":13},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":40,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":41,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2832,2832],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (14). Maximum allowed is 10.\\\",\\\"line\\\":45,\\\"column\\\":26,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":64,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":46,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":46,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[2894,2895],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":46,\\\"column\\\":2,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":46,\\\"endColumn\\\":13},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":48,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":48,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[2939,2940],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":49,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":49,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[2975,2976],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":51,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":51,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[3067,3068],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":52,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":52,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[3106,3107],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":53,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":53,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[3200,3201],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":53,\\\"column\\\":93,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":54,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3292,3292],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":55,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":55,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[3294,3295],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":56,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":56,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[3333,3334],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":57,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":57,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[3427,3428],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":59,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":59,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[3521,3522],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":60,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":60,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[3563,3564],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":61,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":61,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[3660,3661],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":62,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":62,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[3754,3755],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":62,\\\"column\\\":93,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":63,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3846,3846],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 1 tab.\\\",\\\"line\\\":63,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":63,\\\"endColumn\\\":2,\\\"fix\\\":{\\\"range\\\":[3847,3848],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":63,\\\"column\\\":2,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":63,\\\"endColumn\\\":13},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":64,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":65,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3864,3864],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":61,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":6,\\\"fixableErrorCount\\\":59,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const vendingMachine = require(\\\\\\\"../src/vending-machine.js\\\\\\\")\\\\nconst testing = require(\\\\\\\"../lib/testing.js\\\\\\\") \\\\nconst sorting = require(\\\\\\\"../src/sorting.js\\\\\\\")\\\\nconst dispenseCoins = vendingMachine.dispenseCoins;\\\\nconst assert = testing.assert;\\\\nconst indexOfMax = vendingMachine.indexOfMax;\\\\nconst removeElement = vendingMachine.removeElement;\\\\nconst assertArraysEqual = testing.assertArraysEqual;\\\\nconst sortArray = sorting.sortArray;\\\\nconst assertArrays = assertArraysEqual;\\\\nconst coinCount = vendingMachine.coinCount;\\\\n\\\\nconst testingVendingMachine = function() {\\\\n\\\\tconsole.log(\\\\\\\"testing vending machine\\\\\\\")\\\\n\\\\tassert(1, dispenseCoins([1], 1), \\\\\\\"for amount of 1 and denomination of 1 the machine should dispense 1 coin\\\\\\\")\\\\n\\\\tassert(1, dispenseCoins([1, 2], 1), \\\\\\\"for amount of 1 and denominations of 1 and 2 the machine should dispense 1 coin\\\\\\\")\\\\n\\\\tassert(2, dispenseCoins([1, 2], 3), \\\\\\\"for amount of 3 and denominations of 1 and 2 the machine should dispense 2 coins\\\\\\\")\\\\n\\\\tassert(2, dispenseCoins([1, 2, 5], 6), \\\\\\\"for amount of 6 and denominations of 1, 2 and 5 the machine should dispense 2 coins\\\\\\\")\\\\n\\\\tassert(3, dispenseCoins([1, 2, 5], 8), \\\\\\\"for amount of 8 and denominations of 1, 2 and 5 the machine should dispense 3 coins\\\\\\\")\\\\n\\\\tassert(4, dispenseCoins([1, 2, 5], 13), \\\\\\\"for amount of 13 and denominations of 1, 2 and 5 the machine should dispense 4 coins\\\\\\\")\\\\n\\\\tassert(5, dispenseCoins([1, 2, 5], 19), \\\\\\\"for amount of 19 and denominations of 1, 2 and 5 the machine should dispense 5 coins\\\\\\\")\\\\n\\\\tassert(1, dispenseCoins([1, 2, 5, 10], 10), \\\\\\\"for amount of 10 and denominations of 1, 2, 5 and 10 the machine should dispense 1 coin\\\\\\\")\\\\n\\\\tassert(3, dispenseCoins([1, 2, 5, 10], 17), \\\\\\\"for amount of 17 and denominations of 1, 2, 5 and 10 the machine should dispense 3 coins\\\\\\\")\\\\n\\\\tassert(5, dispenseCoins([1, 2, 5, 10], 28), \\\\\\\"for amount of 28 and denominations of 1, 2, 5 and 10 the machine should dispense 5 coins\\\\\\\")\\\\n\\\\tassert(2, dispenseCoins([1, 3, 7, 11], 18), \\\\\\\"for amount of 18 and denominations of 1, 3, 7 and 11 the machine should dispense 2 coins\\\\\\\")\\\\n\\\\tassert(2, dispenseCoins([3, 5, 7], 10), \\\\\\\"for amount of 10 and denominations of 3, 5 and 7 the machine should dispense 2 coins\\\\\\\")\\\\n\\\\tassert(4, dispenseCoins([1, 4, 7], 13), \\\\\\\"for amount of 13 and denominations of 1, 4 and 7 the machine should dispense 4 coins\\\\\\\")\\\\n\\\\tassert(4, dispenseCoins([3, 1, 7], 12), \\\\\\\"for amount of 12 and denominations of 3, 1 and 7 the machine should dispense 5 coins\\\\\\\")\\\\n\\\\tconsole.log();\\\\n}\\\\n\\\\ntestingVendingMachine();\\\\n\\\\nconst testingSortArray = function() {\\\\n\\\\tconsole.log(\\\\\\\"testing sorting arrays\\\\\\\")\\\\n\\\\tassertArrays([1,2,3], sortArray([1,3,2]), \\\\\\\"for given array[1,3,2], sorted array should be [1,3,2]\\\\\\\");\\\\n\\\\tassertArrays([1,2,3], sortArray([1,2,3]), \\\\\\\"for given array[1,2,3], sorted array should be [1,3,2]\\\\\\\");\\\\n\\\\tassertArrays([1,2,3], sortArray([3,2,1]), \\\\\\\"for given array[3,2,1], sorted array should be [1,3,2]\\\\\\\");\\\\n\\\\tconsole.log();\\\\n}\\\\n\\\\ntestingSortArray();\\\\n\\\\n\\\\nconst testingCoinCount = function() {\\\\n\\\\tconsole.log(\\\\\\\"testing coinCount function\\\\\\\");\\\\n\\\\n\\\\tconst actual1 = coinCount([1], 1);\\\\n\\\\tassert(1, actual1[1], \\\\\\\"for amount of one rupee, one coin of one rupee must be returned\\\\\\\");\\\\n\\\\n\\\\tconst actual2 = coinCount([1, 2], 3);\\\\n\\\\tassert(1, actual2[2], \\\\\\\"for amount of three rupees, one coin of two rupee must be returned\\\\\\\");\\\\n\\\\tassert(1, actual2[1], \\\\\\\"for amount of three rupees, one coin of one rupee must be returned\\\\\\\")\\\\n\\\\n\\\\tconst actual3 = coinCount([1, 2], 5);\\\\n\\\\tassert(2, actual3[2], \\\\\\\"for amount of five rupees, two coins of two rupee must be returned\\\\\\\");\\\\n\\\\tassert(1, actual3[1], \\\\\\\"for amount of five rupees, one coin of one rupee must be returned\\\\\\\");\\\\n\\\\n\\\\tconst actual4 = coinCount([1, 2, 5], 3);\\\\n\\\\tassert(0, actual4[5], \\\\\\\"for amount of three rupees, zero coins of five rupee must be returned\\\\\\\");\\\\n\\\\tassert(1, actual4[1], \\\\\\\"for amount of three rupees, one coin of one rupee must be returned\\\\\\\");\\\\n\\\\tassert(1, actual4[2], \\\\\\\"for amount of three rupees, one coin of two rupee must be returned\\\\\\\")\\\\n\\\\tconsole.log();\\\\n}\\\\n\\\\ntestingCoinCount();\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]}]\\n\""}],"gourabporey":[{"vending-machine":"\"[{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/gourabporey/vending-machine/lib/math-utils.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"no-implicit-globals\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Global variable leak, declare the variable if it is intended to be local.\\\",\\\"line\\\":3,\\\"column\\\":3,\\\"nodeType\\\":\\\"ForInStatement\\\",\\\"messageId\\\":\\\"globalVariableLeak\\\",\\\"endLine\\\":5,\\\"endColumn\\\":4},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":7,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":8,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[119,119],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":12,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":13,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[259,259],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":3,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":2,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const add = function (numbers) {\\\\n  let sum = 0;\\\\n  for (keys in numbers) {\\\\n    sum += numbers[keys];\\\\n  }\\\\n  return sum;\\\\n}\\\\n\\\\nconst maxOf = function(numbers) {\\\\n  if (numbers.length === 1) return numbers[0];\\\\n  return Math.max(numbers[0], maxOf(numbers.slice(1)));\\\\n}\\\\n\\\\nexports.add = add;\\\\nexports.maxOf = maxOf;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/gourabporey/vending-machine/lib/sort-utils/max-sort.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":15,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":16,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[417,417],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":1,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":1,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const math = require(\\\\\\\"../math-utils.js\\\\\\\");\\\\nconst maxOf = math.maxOf;\\\\n\\\\nconst sort = function(numbers) {\\\\n  let modifiableArray = numbers.slice(0);\\\\n  const sortedArray = [];\\\\n\\\\n  for (let i = 0; i < numbers.length; i++) {\\\\n    const maxOfCurrentArray = maxOf(modifiableArray);\\\\n    modifiableArray.splice(modifiableArray.indexOf(maxOfCurrentArray), 1);\\\\n    sortedArray.unshift(maxOfCurrentArray);\\\\n  }\\\\n\\\\n  return sortedArray;\\\\n}\\\\n\\\\nexports.sort = sort;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/gourabporey/vending-machine/lib/style.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":3,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":4,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[89,89],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":7,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":8,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[148,148],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":11,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":12,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[212,212],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":15,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":16,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[273,273],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":19,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":20,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[336,336],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":5,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":5,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const format = function(text, code) {\\\\n  return \\\\\\\"\\\\\\\\033[\\\\\\\" + code + \\\\\\\"m\\\\\\\" + text + \\\\\\\"\\\\\\\\033[0m\\\\\\\";\\\\n}\\\\n\\\\nconst bold = function(text) {\\\\n  return format(text, 1);\\\\n}\\\\n\\\\nconst yellowFg = function(text) {\\\\n  return format(text, 33);\\\\n}\\\\n\\\\nconst redFg = function(text) {\\\\n  return format(text, 31);\\\\n}\\\\n\\\\nconst greenFg = function(text) {\\\\n  return format(text, 32);\\\\n}\\\\n\\\\nexports.bold = bold;\\\\nexports.yellowFg = yellowFg;\\\\nexports.redFg = redFg;\\\\nexports.greenFg = greenFg;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/gourabporey/vending-machine/lib/testing.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":9,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":10,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[256,256],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":13,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":14,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[429,429],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":20,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":21,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[615,615],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":23,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":23,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":24,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":25,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[709,709],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":30,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":31,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[904,904],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":32,\\\"column\\\":33,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":38,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":38,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":39,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1169,1169],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":46,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":47,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1310,1310],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":50,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":51,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1381,1381],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":55,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":56,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1496,1496],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":59,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":60,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1562,1562],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":68,\\\"column\\\":4,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":69,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1782,1782],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":72,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":72,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":74,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":75,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1936,1936],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":76,\\\"column\\\":26,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":92,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"no-implicit-globals\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Global variable leak, declare the variable if it is intended to be local.\\\",\\\"line\\\":82,\\\"column\\\":5,\\\"nodeType\\\":\\\"ForInStatement\\\",\\\"messageId\\\":\\\"globalVariableLeak\\\",\\\"endLine\\\":86,\\\"endColumn\\\":6},{\\\"ruleId\\\":\\\"max-depth\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Blocks are nested too deeply (3). Maximum allowed is 2.\\\",\\\"line\\\":83,\\\"column\\\":7,\\\"nodeType\\\":\\\"IfStatement\\\",\\\"messageId\\\":\\\"tooDeeply\\\",\\\"endLine\\\":85,\\\"endColumn\\\":8},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":90,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":90,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":92,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":93,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2340,2340],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (11). Maximum allowed is 10.\\\",\\\"line\\\":94,\\\"column\\\":28,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":112,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":94,\\\"column\\\":28,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":112,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"no-implicit-globals\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Global variable leak, declare the variable if it is intended to be local.\\\",\\\"line\\\":102,\\\"column\\\":5,\\\"nodeType\\\":\\\"ForInStatement\\\",\\\"messageId\\\":\\\"globalVariableLeak\\\",\\\"endLine\\\":106,\\\"endColumn\\\":6},{\\\"ruleId\\\":\\\"max-depth\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Blocks are nested too deeply (3). Maximum allowed is 2.\\\",\\\"line\\\":103,\\\"column\\\":7,\\\"nodeType\\\":\\\"IfStatement\\\",\\\"messageId\\\":\\\"tooDeeply\\\",\\\"endLine\\\":105,\\\"endColumn\\\":8},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":110,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":110,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":112,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":113,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2842,2842],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":118,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":118,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":119,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":120,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3032,3032],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":23,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":5,\\\"fixableErrorCount\\\":15,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const style = require(\\\\\\\"./style.js\\\\\\\");\\\\nconst redFg = style.redFg;\\\\nconst greenFg = style.greenFg;\\\\nconst yellowFg = style.yellowFg;\\\\nconst bold = style.bold;\\\\n\\\\nconst isExactlySame = function(actualValue, expectedValue) {\\\\n  return expectedValue === actualValue;\\\\n}\\\\n\\\\nconst isAlmostSame = function(actualValue, expectedValue, precision) {\\\\n  return (expectedValue >= actualValue - precision) && (expectedValue <= actualValue + precision);\\\\n}\\\\n\\\\nconst isSame = function(actualValue, expectedValue) {\\\\n  if (isExactlySame(actualValue, expectedValue)) {\\\\n    return true;\\\\n  }\\\\n  return isAlmostSame(actualValue, expectedValue, 0.01);\\\\n}\\\\n\\\\nconst printHeadline = function(headline) {\\\\n  console.log(bold(yellowFg(\\\\\\\"\\\\\\\\n\\\\\\\" + headline)));\\\\n}\\\\n\\\\nconst formatTestResultDetail = function(actual, expected) {\\\\n  const line1 = greenFg(\\\\\\\"\\\\\\\\n\\\\\\\\tExpected:  \\\\\\\" + expected);\\\\n  const line2 =   redFg(\\\\\\\"\\\\\\\\n\\\\\\\\t  Actual:  \\\\\\\" + actual);\\\\n  return line1 + line2;\\\\n}\\\\n\\\\nconst formatAssertionsMessage = function(result, actual, expected, message) {\\\\n  const icon = result ? \\\\\\\"✅\\\\\\\" : \\\\\\\"❌\\\\\\\";\\\\n  const summary = icon + \\\\\\\" \\\\\\\" + message;\\\\n  const details = formatTestResultDetail (actual, expected);\\\\n\\\\n  return result ? summary : summary + details;\\\\n}\\\\n\\\\nlet totalAssertions = 0;\\\\nlet passedAssertions = 0;\\\\nconst testLog = [];\\\\n\\\\nconst getTotalAssertions = function() {\\\\n  return totalAssertions;\\\\n}\\\\n\\\\nconst getPassedAssertions = function() {\\\\n  return passedAssertions;\\\\n}\\\\n\\\\nconst updateAssertionCount = function(result) {\\\\n  totalAssertions += 1;\\\\n  passedAssertions += (result ? 1 : 0);\\\\n}\\\\n\\\\nconst addLog = function (testData) {\\\\n  testLog.push(testData);\\\\n}\\\\n\\\\nconst assertEqual = function(actual, expected, message) {\\\\n  const result = isSame(actual, expected);\\\\n  const currenttestdata = {\\\\n    testcase: message,\\\\n    result: result,\\\\n    actual: actual,\\\\n    expected: expected\\\\n  }\\\\n  addLog(currenttestdata);\\\\n\\\\n  updateAssertionCount(result);\\\\n  console.log(formatAssertionsMessage(result, actual, expected, message));\\\\n  return result;\\\\n}\\\\n\\\\nconst assertArrayEqual = function(actual, expected, message) {\\\\n  let result = true;\\\\n\\\\n  if (actual.length !== expected.length) {\\\\n    result = false;\\\\n  } else {\\\\n    for (index in actual) {\\\\n      if (actual[index] !== expected[index]) {\\\\n        result = false;\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  updateAssertionCount(result);\\\\n  console.log(formatAssertionsMessage(result, actual, expected, message));\\\\n  return result;\\\\n}\\\\n\\\\nconst assertObjectsEqual = function(actual, expected, message) {\\\\n  const actualKeys = Object.keys(actual);\\\\n  const expectedKeys = Object.keys(expected);\\\\n  let result = true;\\\\n\\\\n  if (actualKeys.length !== expectedKeys.length) {\\\\n    result = false;\\\\n  } else {\\\\n    for (key in expectedKeys) {\\\\n      if (actual[key] !== expected[key]) {\\\\n        result = false;\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  updateAssertionCount(result);\\\\n  console.log(formatAssertionsMessage(result, actual, expected, message));\\\\n  return result;\\\\n}\\\\n\\\\nconst displayTestSummary = function() {\\\\n  let  message = \\\\\\\"\\\\\\\\nSummary: \\\\\\\";\\\\n  message += getPassedAssertions() + \\\\\\\" / \\\\\\\" + getTotalAssertions();\\\\n  message += \\\\\\\" passed\\\\\\\";\\\\n  console.log(message);\\\\n}\\\\n\\\\nexports.printHeadline = printHeadline;\\\\nexports.assertEqual = assertEqual;\\\\nexports.assertArrayEqual = assertArrayEqual;\\\\nexports.assertObjectsEqual = assertObjectsEqual;\\\\nexports.displayTestSummary = displayTestSummary;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/gourabporey/vending-machine/src/vending-machine.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":17,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":18,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[476,476],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":21,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":22,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[599,599],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":2,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":2,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const math = require(\\\\\\\"../lib/math-utils.js\\\\\\\");\\\\nconst maxSort = require(\\\\\\\"../lib/sort-utils/max-sort.js\\\\\\\");\\\\n\\\\nconst add = math.add;\\\\nconst sort = maxSort.sort;\\\\n\\\\nconst countCoinsByDenomination = function(amount, denomination) {\\\\n  let amountLeft = amount;\\\\n  const noOfCoins = {};\\\\n\\\\n  for (let i = denomination.length - 1; i >= 0; i--) {\\\\n    noOfCoins[denomination[i]] = Math.floor(amountLeft / denomination[i]);\\\\n    amountLeft = amountLeft % denomination[i];\\\\n  }\\\\n\\\\n  return noOfCoins;\\\\n}\\\\n\\\\nconst countCoins = function(amount, denomination) {\\\\n  return add(countCoinsByDenomination(amount, sort(denomination)));\\\\n}\\\\n\\\\nexports.countCoins = countCoins;\\\\nexports.countCoinsByDenomination = countCoinsByDenomination;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/gourabporey/vending-machine/test/max-sort-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":25,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":44,\\\"fix\\\":{\\\"range\\\":[24,43],\\\"text\\\":\\\"\\\\\\\"../lib/testing.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":25,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":56,\\\"fix\\\":{\\\"range\\\":[70,101],\\\"text\\\":\\\"\\\\\\\"../lib/sort-utils/max-sort.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":10,\\\"column\\\":4,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":11,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[339,339],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":48,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":49,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1280,1280],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":4,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":4,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require('../lib/testing.js');\\\\nconst maxSort = require('../lib/sort-utils/max-sort.js');\\\\n\\\\nconst assertArrayEqual = testing.assertArrayEqual;\\\\nconst sort = maxSort.sort;\\\\n\\\\nconst runTestsForMaxSort = function() {\\\\n  const it = function(testName, testData) {\\\\n    assertArrayEqual(testData.actual, testData.expected, testName);\\\\n  }\\\\n\\\\n  testing.printHeadline(\\\\\\\"Testing for MaxSort\\\\\\\");\\\\n\\\\n  it(\\\\\\\"Should give empty array for array of no element\\\\\\\", {\\\\n    actual: sort([]),\\\\n    expected: [],\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give same array for array of one element\\\\\\\", {\\\\n    actual: sort([1]),\\\\n    expected: [1],\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give a sorted array for array of two elements\\\\\\\", {\\\\n    actual: sort([1, 2]),\\\\n    expected: [1, 2],\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give same array for array of same elements\\\\\\\", {\\\\n    actual: sort([2, 2, 2]),\\\\n    expected: [2, 2, 2],\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give a sorted array for array of multiple elements\\\\\\\", {\\\\n    actual: sort([1, 3, 2, 5, 4]),\\\\n    expected: [1, 2, 3, 4, 5],\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give a sorted array for array with repeated elements\\\\\\\", {\\\\n    actual: sort([1, 3, 2, 2, 4]),\\\\n    expected: [1, 2, 2, 3, 4],\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give a sorted array for array with mix of +ve & -ve elements\\\\\\\", {\\\\n    actual: sort([1, -3, -2, 2, 4]),\\\\n    expected: [-3, -2, 1, 2, 4],\\\\n  });\\\\n}\\\\n\\\\nrunTestsForMaxSort();\\\\ntesting.displayTestSummary();\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/gourabporey/vending-machine/test/vending-machine-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":25,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":44,\\\"fix\\\":{\\\"range\\\":[24,43],\\\"text\\\":\\\"\\\\\\\"../lib/testing.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":32,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":59,\\\"fix\\\":{\\\"range\\\":[77,104],\\\"text\\\":\\\"\\\\\\\"../src/vending-machine.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":14,\\\"column\\\":4,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":15,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[573,573],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":57,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":58,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1700,1700],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":62,\\\"column\\\":4,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":63,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1875,1875],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":90,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":91,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2659,2659],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":96,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":97,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2800,2800],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":7,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":7,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require('../lib/testing.js');\\\\nconst vendingMachine = require('../src/vending-machine.js');\\\\n\\\\nconst printHeadline = testing.printHeadline;\\\\nconst assertEqual = testing.assertEqual;\\\\nconst assertArrayEqual = testing.assertArrayEqual;\\\\nconst assertObjectsEqual = testing.assertObjectsEqual;\\\\nconst countCoins = vendingMachine.countCoins;\\\\nconst countCoinsByDenomination = vendingMachine.countCoinsByDenomination;\\\\n\\\\nconst testForDispenseCoins = function() {\\\\n  const it = function(testName, testData) {\\\\n    assertEqual(testData.actual, testData.expected, testName);\\\\n  }\\\\n\\\\n  printHeadline(\\\\\\\"Testing for vending machine\\\\\\\");\\\\n\\\\n  it(\\\\\\\"Should give nothing for no denomination\\\\\\\", {\\\\n    actual: countCoins(1, []),\\\\n    expected: 0,\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give nothing for no amount provided\\\\\\\", {\\\\n    actual: countCoins(0, [1]),\\\\n    expected: 0,\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give same number of coins for any amount and denomination of 1\\\\\\\", {\\\\n    actual: countCoins(6, [1]),\\\\n    expected: 6,\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give one coin for amount to be same as any denomination\\\\\\\", {\\\\n    actual: countCoins(2, [1,2]),\\\\n    expected: 1,\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give number of denominations when amount is sum of all the denomination\\\\\\\", {\\\\n    actual: countCoins(18, [1,2,5,10]),\\\\n    expected: 4,\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give total coins when denominations are provided in ascending order\\\\\\\", {\\\\n    actual: countCoins(35, [1,2,5,10]),\\\\n    expected: 4,\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give total coins when denominations are provided in descending order\\\\\\\", {\\\\n    actual: countCoins(35, [10,5,2,1]),\\\\n    expected: 4,\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give total coins when denominations are provided in random order\\\\\\\", {\\\\n    actual: countCoins(13, [1,7,2]),\\\\n    expected: 4,\\\\n  });\\\\n}\\\\n\\\\nconst testForDispenseCoinsByDenomination = function() {\\\\n  const it = function(testName, testData) {\\\\n    assertObjectsEqual(testData.actual, testData.expected, testName);\\\\n  }\\\\n\\\\n  printHeadline(\\\\\\\"Testing for Dispense coins by denomination\\\\\\\");\\\\n\\\\n  it(\\\\\\\"Should give {1:0} for Rs.1 & denomination is [1]\\\\\\\", {\\\\n    actual: countCoinsByDenomination(0, [1]),\\\\n    expected: {1: 0},\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give {1:1} for Rs.1 & denomination is [1]\\\\\\\", {\\\\n    actual: countCoinsByDenomination(1, [1]),\\\\n    expected: {1: 1},\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give {1:2} for Rs.2 & denomination is [1]\\\\\\\", {\\\\n    actual: countCoinsByDenomination(2, [1]),\\\\n    expected: {1: 2},\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give {1:2,2:1} for Rs.3 & denomination is [1, 2]\\\\\\\", {\\\\n    actual: countCoinsByDenomination(3, [1, 2]),\\\\n    expected: {1: 1, 2: 1},\\\\n  });\\\\n\\\\n  it(\\\\\\\"Should give {1:0,2:0,5:1} for Rs.5 & denomination is [1, 2, 5]\\\\\\\", {\\\\n    actual: countCoinsByDenomination(5, [1, 2, 5]),\\\\n    expected: {1: 0, 2: 0, 5: 1},\\\\n  });\\\\n}\\\\n\\\\nconst testVendingMachine = function() {\\\\n  testForDispenseCoins();\\\\n  testForDispenseCoinsByDenomination();\\\\n  testing.displayTestSummary();\\\\n}\\\\n\\\\ntestVendingMachine();\\\\n\\\",\\\"usedDeprecatedRules\\\":[]}]\\n\""}],"SaumaSaha":[{"vending-machine":"\"[{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/SaumaSaha/vending-machine/lib/sort.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":3,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":4,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[96,96],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":10,\\\"column\\\":13,\\\"nodeType\\\":\\\"ReturnStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":11,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[247,247],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":11,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":12,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[249,249],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":25,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":26,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[588,588],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":4,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":4,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const maxOfTwo = function (number1, number2) {\\\\n  return number1 > number2 ? number1 : number2;\\\\n}\\\\n\\\\nconst maxOfNumbers = function (numbers) {\\\\n  let max = numbers[0];\\\\n  for (const number of numbers) {\\\\n    max = maxOfTwo(max, number);\\\\n  }\\\\n  return max\\\\n}\\\\n\\\\nconst maxSort = function (numbers) {\\\\n  let count = 0;\\\\n  let tempArray = numbers.slice();\\\\n  const sortedArray = [];\\\\n  while (count < numbers.length) {\\\\n    const max = maxOfNumbers(tempArray);\\\\n    const maxIndex = tempArray.indexOf(max);\\\\n    tempArray.splice(maxIndex,1);\\\\n    sortedArray.push(max);\\\\n    count++;\\\\n  }\\\\n  return sortedArray;\\\\n}\\\\n\\\\nexports.maxOfNumbers = maxOfNumbers;\\\\nexports.maxSort = maxSort;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/SaumaSaha/vending-machine/lib/style.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":3,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":4,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[102,102],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":7,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":8,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[165,165],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":11,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":12,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[233,233],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":15,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":16,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[297,297],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":19,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":20,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[362,362],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":23,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":24,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[427,427],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":27,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":28,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[493,493],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":31,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":32,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[560,560],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":8,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":8,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const textStyle = function(styleCode, text) {\\\\n  return \\\\\\\"\\\\\\\\033[\\\\\\\" + styleCode + \\\\\\\"m\\\\\\\" + text + \\\\\\\"\\\\\\\\033[0m\\\\\\\";\\\\n}\\\\n\\\\nconst bold  = function(text) {\\\\n  return textStyle(1, text);\\\\n}\\\\n\\\\nconst underline  = function(text) {\\\\n  return textStyle(4, text);\\\\n}\\\\n\\\\nconst redFg = function(text) {\\\\n  return textStyle(31, text);\\\\n}\\\\n\\\\nconst blueFg = function(text) {\\\\n  return textStyle(34, text);\\\\n}\\\\n\\\\nconst cyanFg = function(text) {\\\\n  return textStyle(36, text);\\\\n}\\\\n\\\\nconst greenFg = function(text) {\\\\n  return textStyle(32, text);\\\\n}\\\\n\\\\nconst yellowFg = function(text) {\\\\n  return textStyle(33, text);\\\\n}\\\\n\\\\nexports.bold = bold;\\\\nexports.underline = underline;\\\\nexports.redFg = redFg;\\\\nexports.blueFg = blueFg;\\\\nexports.cyanFg = cyanFg;\\\\nexports.greenFg = greenFg;\\\\nexports.yellowFg = yellowFg;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/SaumaSaha/vending-machine/lib/testing.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":23,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":35,\\\"fix\\\":{\\\"range\\\":[22,34],\\\"text\\\":\\\"\\\\\\\"./style.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":22,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":23,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[460,460],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":26,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":27,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[514,514],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":28,\\\"column\\\":27,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":34,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":34,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":35,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[699,699],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":37,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":37,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[756,760],\\\"text\\\":\\\"\\\\\\\"\\\\\\\\n\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":38,\\\"column\\\":39,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":38,\\\"endColumn\\\":42,\\\"fix\\\":{\\\"range\\\":[826,829],\\\"text\\\":\\\"\\\\\\\"/\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":40,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":40,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":41,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":42,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[915,915],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":45,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":45,\\\"endColumn\\\":16},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":47,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":48,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1025,1025],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":49,\\\"column\\\":27,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":58,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":58,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":59,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1238,1238],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":62,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":62,\\\"endColumn\\\":16},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":64,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":64,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":65,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":66,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1530,1530],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":73,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":74,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1801,1801],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":77,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":77,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":78,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":79,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1933,1933],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":80,\\\"column\\\":28,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":91,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":90,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":90,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":91,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":92,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2266,2266],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":95,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":96,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2347,2347],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 5. Maximum allowed is 2.\\\",\\\"line\\\":97,\\\"column\\\":24,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":113,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":113,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":114,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2691,2691],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":115,\\\"column\\\":25,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":123,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":123,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":124,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2935,2935],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":129,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":130,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3185,3185],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":135,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":136,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3435,3435],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":141,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":142,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3687,3687],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":24,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":6,\\\"fixableErrorCount\\\":19,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const style = require('./style.js');\\\\n\\\\nconst bold = style.bold;\\\\nconst underline = style.underline;\\\\nconst redFg = style.redFg;\\\\nconst blueFg = style.blueFg;\\\\nconst cyanFg = style.cyanFg;\\\\nconst greenFg = style.greenFg;\\\\nconst yellowFg = style.yellowFg;\\\\n\\\\nconst testLog = [];\\\\n\\\\nconst updateTestLog = function(expected, actual, message, result, functionName) {\\\\n  testLog.push(\\\\n    {\\\\n      result,\\\\n      message,\\\\n      expected,\\\\n      actual,\\\\n      functionName\\\\n    });\\\\n}\\\\n\\\\nconst getTestLog = function () {\\\\n  return testLog;\\\\n}\\\\n\\\\nconst getNoOfTestPassed = function (log) {\\\\n  let noOfTestPassed = 0;\\\\n  for ( const entry of log) {\\\\n    noOfTestPassed +=  entry.result === true ? 1 : 0;\\\\n  }\\\\n  return noOfTestPassed;\\\\n}\\\\n\\\\nconst displaySummary = function () {\\\\n  const summary = '\\\\\\\\n' + yellowFg(\\\\\\\"Summary : \\\\\\\") +\\\\n    getNoOfTestPassed(getTestLog()) + '/' + getTestLog().length + \\\\n    greenFg(\\\\\\\" Test Passed\\\\\\\");\\\\n  console.log(bold(summary));\\\\n}\\\\n\\\\nconst displayTestLog = function () {\\\\n  const log = getTestLog();\\\\n  console.table(log);\\\\n  displaySummary();\\\\n}\\\\n\\\\nconst groupTestLogByKey = function (key) {\\\\n  const groups = {};\\\\n  for (const log of getTestLog()) {\\\\n    if (!groups[log[key]])\\\\n      groups[log[key]] = [];\\\\n    groups[log[key]].push(log);\\\\n  }\\\\n\\\\n  return groups;\\\\n}\\\\n\\\\nconst printFunctionTests = function(functionName) {\\\\n  const log = groupTestLogByKey(\\\\\\\"functionName\\\\\\\");\\\\n  console.table(log[functionName]);\\\\n  const summary = \\\\\\\"No of Test Passed = \\\\\\\" + getNoOfTestPassed(log[functionName]) + \\\\\\\"/\\\\\\\" + log[functionName].length;\\\\n  console.log(summary.padStart(100));\\\\n}\\\\n\\\\nconst generateFailedMessage = function(expected, actual, testMessage) {\\\\n  const expectedValue =  greenFg(\\\\\\\"\\\\\\\\n\\\\\\\\tExpected\\\\\\\\t:\\\\\\\" + expected);\\\\n  const actualValue =  redFg(\\\\\\\"\\\\\\\\n\\\\\\\\tActual\\\\\\\\t\\\\\\\\t:\\\\\\\" + actual);\\\\n  const failMessage = actualValue + expectedValue;\\\\n\\\\n  return failMessage;\\\\n}\\\\n\\\\nconst displayHeader = function(fnName) {\\\\n  const header = \\\\\\\"Test for \\\\\\\" + fnName;\\\\n  console.log(\\\\\\\"\\\\\\\\n\\\\\\\" + underline(blueFg(header)));\\\\n}\\\\n\\\\nconst displayTestMessage = function(expected, actual, result, testMessage) {\\\\n  const icon = result === true ? \\\\\\\"✅\\\\\\\" : \\\\\\\"❌\\\\\\\";\\\\n  let message = \\\\\\\"\\\\\\\";\\\\n  message += icon;\\\\n  message += yellowFg(\\\\\\\"Test: \\\\\\\");\\\\n  message += testMessage;\\\\n\\\\n  if (result === false) {\\\\n    message += generateFailedMessage(expected, actual);\\\\n  }\\\\n  console.log(message);\\\\n}\\\\n\\\\nconst getResult = function (expected, actual) {\\\\n  return expected === actual;\\\\n}\\\\n\\\\nconst areArraysEqual = function (array1, array2) {\\\\n  if (array1 === array2) {\\\\n    return true;\\\\n  };\\\\n\\\\n  if (array1.length !== array2.length) {\\\\n    return false;\\\\n  };\\\\n\\\\n  for (let currentTerm = 0; currentTerm < array1.length; currentTerm++) {\\\\n    if (array1[currentTerm] !== array2[currentTerm]) {\\\\n      return false;\\\\n    }\\\\n  }\\\\n\\\\n  return true;\\\\n}\\\\n\\\\nconst areObjectsEqual = function (expected, actual) {\\\\n  if (Object.keys(expected).length !== Object.keys(actual).length) return false;\\\\n\\\\n  for (const key in expected) {\\\\n    if (expected[key] !== actual[key]) return false;\\\\n  }\\\\n\\\\n  return true;\\\\n}\\\\n\\\\nconst assertArray  = function(expected, actual, message, functionName) {\\\\n  const result = areArraysEqual(expected, actual);\\\\n  updateTestLog(expected, actual, message, result, functionName);\\\\n  displayTestMessage(expected, actual, result, message);\\\\n}\\\\n\\\\nconst assertTest = function(expected, actual, message, functionName) {\\\\n  const result = expected === actual ? true : false;\\\\n  updateTestLog(expected, actual, message, result, functionName);\\\\n  displayTestMessage(expected, actual, result, message);\\\\n}\\\\n\\\\nconst assertObject = function (expected, actual, message, functionName) {\\\\n  const result = areObjectsEqual(expected, actual);\\\\n  updateTestLog(expected, actual, message, result, functionName);\\\\n  displayTestMessage(expected, actual, result, message);\\\\n}\\\\n\\\\nexports.assertTest = assertTest;\\\\nexports.assertArray = assertArray;\\\\nexports.assertObject = assertObject;\\\\nexports.displaySummary = displaySummary;\\\\nexports.displayHeader = displayHeader;\\\\nexports.getTestLog = getTestLog;\\\\nexports.displayTestLog = displayTestLog;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/SaumaSaha/vending-machine/src/vending-machine.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":38,\\\"fix\\\":{\\\"range\\\":[21,37],\\\"text\\\":\\\"\\\\\\\"../lib/sort.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":7,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":8,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[180,180],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":11,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":12,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[276,276],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":21,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":22,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[507,507],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-implicit-globals\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Global variable leak, declare the variable if it is intended to be local.\\\",\\\"line\\\":28,\\\"column\\\":3,\\\"nodeType\\\":\\\"ForOfStatement\\\",\\\"messageId\\\":\\\"globalVariableLeak\\\",\\\"endLine\\\":32,\\\"endColumn\\\":4},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":34,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":35,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[950,950],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":6,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":5,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const sort = require('../lib/sort.js');\\\\n\\\\nconst maxSort = sort.maxSort;\\\\n\\\\nconst calculateNoOfCoinsOf = function (amount, denomination) {\\\\n  return Math.floor(amount / denomination);\\\\n}\\\\n\\\\nconst getRemainingAmount = function (amount ,denomination) {\\\\n  return amount % denomination;\\\\n}\\\\n\\\\nconst  vendCoins = function (rupees, denominations) {\\\\n  let totalCoins = 0;\\\\n  const coins = vendCoinsByDenominations(rupees, denominations);\\\\n  for (const coin in coins) {\\\\n    totalCoins += coins[coin];\\\\n  }\\\\n\\\\n  return totalCoins;\\\\n}\\\\n\\\\nconst vendCoinsByDenominations = function (rupees, denominations) {\\\\n  let remainingAmount = rupees;\\\\n  let coinsCount = {};\\\\n  const sortedDenominations = maxSort(denominations);\\\\n\\\\n  for (denomination of sortedDenominations) {\\\\n    const noOfCoins = calculateNoOfCoinsOf(remainingAmount, denomination);\\\\n    remainingAmount = getRemainingAmount(remainingAmount, denomination);\\\\n    coinsCount[denomination] = noOfCoins;\\\\n  }\\\\n  return coinsCount; \\\\n}\\\\n\\\\nexports.vendCoins = vendCoins;\\\\nexports.vendCoinsByDenominations = vendCoinsByDenominations;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/SaumaSaha/vending-machine/test/sort-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":25,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":44,\\\"fix\\\":{\\\"range\\\":[24,43],\\\"text\\\":\\\"\\\\\\\"../lib/testing.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":38,\\\"fix\\\":{\\\"range\\\":[67,83],\\\"text\\\":\\\"\\\\\\\"../lib/sort.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":22,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":23,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[867,867],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":35,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":36,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1465,1465],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":41,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":42,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1558,1558],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":5,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":5,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require('../lib/testing.js');\\\\nconst sort = require('../lib/sort.js');\\\\n\\\\nconst assert = testing.assertTest;\\\\nconst assertArray = testing.assertArray;\\\\nconst assertObject = testing.assertObject;\\\\nconst displayTestLog = testing.displayTestLog;\\\\nconst displaySummary = testing.displaySummary;\\\\nconst displayHeader = testing.displayHeader;\\\\nconst maxSort = sort.maxSort;\\\\nconst maxOfNumbers = sort.maxOfNumbers;\\\\n\\\\nconst testMaxOFNumbers = function () {\\\\n  const fnName = \\\\\\\"maxOfNumbers\\\\\\\";\\\\n  displayHeader(fnName);\\\\n  let message = \\\\\\\"Empty list of numbers will give undefined\\\\\\\";\\\\n  assert(undefined, maxOfNumbers([]), message, fnName);\\\\n  message = \\\\\\\"List with one number return that numbers\\\\\\\";\\\\n  assert(1, maxOfNumbers([1]), message, fnName);\\\\n  message = \\\\\\\"List with positive numbers returns max of those numbers\\\\\\\";\\\\n  assert(10, maxOfNumbers([1, 5, 10, 2]), message, fnName);\\\\n}\\\\n\\\\nconst testMaxSort = function () {\\\\n  const fnName = \\\\\\\"maxSort\\\\\\\";\\\\n  displayHeader(fnName);\\\\n  let message = \\\\\\\"Empty list return empty list\\\\\\\";\\\\n  assertArray([], maxSort([]), message, fnName);\\\\n  message = \\\\\\\"List with one number returns the same list\\\\\\\";\\\\n  assertArray([1], maxSort([1]), message, fnName);\\\\n  message = \\\\\\\"A list sorted in descending order returns the same list\\\\\\\";\\\\n  assertArray([10, 5, 2, 1], maxSort([10, 5, 2, 1]), message, fnName);\\\\n  message = \\\\\\\"An unordered list returns a list sorted in descending order\\\\\\\";\\\\n  assertArray([20, 10, 9, 5, 2, 1], maxSort([1, 20, 5, 9, 10, 2]), message, fnName);\\\\n}\\\\n\\\\nconst runtests = function () {\\\\n  testMaxOFNumbers();\\\\n  testMaxSort();\\\\n  displaySummary();\\\\n}\\\\n\\\\nruntests();\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/SaumaSaha/vending-machine/test/vending-machine-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":32,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":59,\\\"fix\\\":{\\\"range\\\":[31,58],\\\"text\\\":\\\"\\\\\\\"../src/vending-machine.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":25,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":44,\\\"fix\\\":{\\\"range\\\":[85,104],\\\"text\\\":\\\"\\\\\\\"../lib/testing.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (14). Maximum allowed is 10.\\\",\\\"line\\\":13,\\\"column\\\":34,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":28,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":28,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":29,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1568,1568],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":40,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":41,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2022,2022],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":51,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":52,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2650,2650],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":57,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":58,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2757,2757],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":7,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":6,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const vendingMachine = require('../src/vending-machine.js');\\\\nconst testing = require('../lib/testing.js');\\\\n\\\\nconst assert = testing.assertTest;\\\\nconst assertArray = testing.assertArray;\\\\nconst assertObject = testing.assertObject;\\\\nconst displayTestLog = testing.displayTestLog;\\\\nconst displaySummary = testing.displaySummary;\\\\nconst displayHeader = testing.displayHeader;\\\\nconst vendCoins = vendingMachine.vendCoins;\\\\nconst vendCoinsByDenominations = vendingMachine.vendCoinsByDenominations;\\\\n\\\\nconst testOrderedDenominations = function (fnName) {\\\\n  let message = \\\\\\\"₹0 gives gives 0 coins for any denominations\\\\\\\";\\\\n  assert(0, vendCoins(0, []), message , fnName);\\\\n  message = \\\\\\\"₹1 vending machine gives the same amount of coins as the money\\\\\\\";\\\\n  assert(1, vendCoins(1, [1]), message, fnName);\\\\n  message = \\\\\\\"₹1 and ₹2 coin vending machine when given amount ₹2 gives 1 coin of ₹2\\\\\\\";\\\\n  assert(1, vendCoins(2, [1, 2]), message, fnName);\\\\n  message = \\\\\\\"₹1 and ₹2 coin vending machine when given amount ₹3 gives 2 coins one coin of each denomination\\\\\\\";\\\\n  assert(2, vendCoins(3, [1, 2]), message, fnName);\\\\n  message = \\\\\\\"₹1, ₹2 and ₹5 coin vending machine when given amount ₹5 gives 1 coins of ₹5\\\\\\\" ;\\\\n  assert(1, vendCoins(5, [1, 2, 5]), message, fnName);\\\\n  message = \\\\\\\"₹1, ₹2, ₹5 and ₹10 coin vending machine when given amount ₹10 gives 1 coins of ₹10\\\\\\\" ;\\\\n  assert(1, vendCoins(10, [1, 2, 5, 10]), message, fnName);\\\\n  message = \\\\\\\"₹1, ₹2, ₹5 and ₹10 coin vending machine when given amount ₹18 gives 4 coins one coin of each denomination\\\\\\\" ;\\\\n  assert(4, vendCoins(18, [1, 2, 5, 10]), message, fnName);\\\\n}\\\\n\\\\nconst testVendCoins = function () {\\\\n  const fnName = \\\\\\\"vendCoins\\\\\\\";\\\\n  displayHeader(fnName);\\\\n  testOrderedDenominations(fnName);\\\\n  let message = \\\\\\\"Testing with sorted denominations\\\\\\\";\\\\n  assert(4, vendCoins(13, [1, 2, 5]), message, fnName);\\\\n  message =  \\\\\\\"Testing with any denominations\\\\\\\";\\\\n  assert(4, vendCoins(13, [1, 4, 7]), message, fnName);\\\\n  message = \\\\\\\"Testing with unsorted denominations\\\\\\\";\\\\n  assert(4, vendCoins(18, [1, 5, 10, 2,]), message, fnName);\\\\n}\\\\n\\\\nconst testVendCoinsByDenominations =  function () {\\\\n  const fnName = \\\\\\\"vendCoinsByDenominations\\\\\\\";\\\\n  displayHeader(fnName);\\\\n  let message = \\\\\\\"₹0 with any denominations gives O coins for all denomination\\\\\\\";\\\\n  assertObject({1:0, 2:0}, vendCoinsByDenominations(0, [1 ,2]), message, fnName);\\\\n  message = \\\\\\\"Any amount with no denomination gives nothing\\\\\\\";\\\\n  assertObject({}, vendCoinsByDenominations(5, []), message, fnName);\\\\n  message = \\\\\\\"₹18 with denominations of ₹1, ₹2, ₹5 and ₹10 in any order gives one coin of each denominations\\\\\\\";\\\\n  assertObject({1:1, 2:1, 5:1, 10:1},vendCoinsByDenominations(18, [1 ,5, 10, 2]), message, fnName);\\\\n}\\\\n\\\\nconst runtests = function () {\\\\n  testVendCoins();\\\\n  testVendCoinsByDenominations();\\\\n  displaySummary();\\\\n}\\\\n\\\\nruntests();\\\\n\\\",\\\"usedDeprecatedRules\\\":[]}]\\n\""}],"nCoder24":[{"vending-machine":"\"[{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/nCoder24/vending-machine/lib/array-utils.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"no-implicit-globals\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Global variable leak, declare the variable if it is intended to be local.\\\",\\\"line\\\":4,\\\"column\\\":3,\\\"nodeType\\\":\\\"ForOfStatement\\\",\\\"messageId\\\":\\\"globalVariableLeak\\\",\\\"endLine\\\":6,\\\"endColumn\\\":4},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":9,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":10,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[155,155],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":20,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":21,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[456,456],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":22,\\\"column\\\":20,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":36,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"max-depth\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Blocks are nested too deeply (3). Maximum allowed is 2.\\\",\\\"line\\\":27,\\\"column\\\":7,\\\"nodeType\\\":\\\"IfStatement\\\",\\\"messageId\\\":\\\"tooDeeply\\\",\\\"endLine\\\":31,\\\"endColumn\\\":8},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":36,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":37,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[930,930],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":38,\\\"column\\\":18,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":48,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":48,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":49,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1170,1170],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":8,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":4,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const max = function(numbers) {\\\\n  let maxNo = numbers[0];\\\\n\\\\n  for (number of numbers.slice(1)) {\\\\n    maxNo = Math.max(maxNo, number);\\\\n  }\\\\n\\\\n  return maxNo;\\\\n}\\\\n\\\\nconst maxSort = function(numbers) {\\\\n  const remainingNumbers = numbers.concat();\\\\n  let sortedNumbers = [];\\\\n\\\\n  while (remainingNumbers.length !== 0) {\\\\n    sortedNumbers = sortedNumbers.concat(remainingNumbers.splice(remainingNumbers.indexOf(max(remainingNumbers)), 1));\\\\n  }\\\\n\\\\n  return sortedNumbers;\\\\n}\\\\n\\\\nconst bubbleSort = function(numbers) {\\\\n  const sortedNumbers = numbers.concat();\\\\n\\\\n  for (let count = 0; count < sortedNumbers.length; count++) {\\\\n    for (let index = 0; index < sortedNumbers.length-1; index++) {\\\\n      if (sortedNumbers[index] < sortedNumbers[index+1]) {\\\\n        const elementInIndex = sortedNumbers[index];\\\\n        sortedNumbers[index] = sortedNumbers[index+1];\\\\n        sortedNumbers[index+1] = elementInIndex;\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  return sortedNumbers;\\\\n}\\\\n\\\\nconst areEqual = function(array1, array2) {\\\\n  if (array1.length !== array2.length) return false;\\\\n\\\\n  let index = 0;\\\\n  while (index < array1.length) {\\\\n    if (array1[index] !== array2[index]) return false;\\\\n    index++;\\\\n  }\\\\n\\\\n  return true;\\\\n}\\\\n\\\\nexports.max = max;\\\\nexports.maxSort = maxSort;\\\\nexports.bubbleSort = bubbleSort;\\\\nexports.areEqual = areEqual;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/nCoder24/vending-machine/lib/object-utils.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":9,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":10,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[153,153],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":11,\\\"column\\\":15,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":20,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":20,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":21,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[411,411],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":22,\\\"column\\\":18,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":30,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"no-implicit-globals\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Global variable leak, declare the variable if it is intended to be local.\\\",\\\"line\\\":25,\\\"column\\\":3,\\\"nodeType\\\":\\\"ForInStatement\\\",\\\"messageId\\\":\\\"globalVariableLeak\\\",\\\"endLine\\\":27,\\\"endColumn\\\":4},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":30,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":31,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[640,640],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":6,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":3,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const select = function(object, keys) {\\\\n  const newObject = {};\\\\n\\\\n  for (const key of keys) {\\\\n    newObject[key] = object[key];\\\\n  }\\\\n\\\\n  return newObject;\\\\n}\\\\n\\\\nconst group = function(listOfObjects, key) {\\\\n  const groupedObject = {};\\\\n\\\\n  for (const object of listOfObjects) {\\\\n    const groupKey = object[key];\\\\n    groupedObject[groupKey] = (groupedObject[groupKey] || []).concat(object);\\\\n  }\\\\n\\\\n  return groupedObject;\\\\n}\\\\n\\\\nconst areEqual = function(object1, object2) {\\\\n  if (Object.keys(object1).length !== Object.keys(object2).length) return false;\\\\n\\\\n  for (key in object1) {\\\\n    if (object1[key] !== object2[key]) return false;\\\\n  }\\\\n\\\\n  return true;\\\\n}\\\\n\\\\nexports.select = select;\\\\nexports.group = group;\\\\nexports.areEqual = areEqual;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/nCoder24/vending-machine/lib/styling-utils.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":3,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":4,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[88,88],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":7,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":8,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[151,151],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":11,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":12,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[209,209],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":15,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":16,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[267,267],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":19,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":20,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[327,327],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":23,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":24,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[411,411],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":6,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":6,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const style = function(text, code) {\\\\n  return \\\\\\\"\\\\\\\\033[\\\\\\\" + code + \\\\\\\"m\\\\\\\" + text + \\\\\\\"\\\\\\\\033[0m\\\\\\\";\\\\n}\\\\n\\\\nconst underline = function(text) {\\\\n  return style(text, 4);\\\\n}\\\\n\\\\nconst bold = function(text) {\\\\n  return style(text, 1);\\\\n}\\\\n\\\\nconst red = function(text) {\\\\n  return style(text, 31);\\\\n}\\\\n\\\\nconst green = function(text) {\\\\n  return style(text, 32);\\\\n}\\\\n\\\\nconst headline = function(text)  {\\\\n  return \\\\\\\"\\\\\\\\n\\\\\\\" + bold(underline(text)) + \\\\\\\"\\\\\\\\n\\\\\\\";\\\\n}\\\\n\\\\nexports.style = style;\\\\nexports.underline = underline;\\\\nexports.bold = bold;\\\\nexports.red = red;\\\\nexports.green = green;\\\\nexports.headline = headline;\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/nCoder24/vending-machine/lib/testing-utilities.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":10,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":11,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[344,344],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":12,\\\"column\\\":28,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":22,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":22,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":23,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[737,737],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":29,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":30,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[976,976],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":44,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":45,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1280,1280],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":49,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":50,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1435,1435],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":52,\\\"column\\\":53,\\\"nodeType\\\":\\\"ReturnStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":53,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1557,1557],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":53,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":54,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1559,1559],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":65,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":66,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1933,1933],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":71,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":72,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2123,2123],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":77,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":78,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2363,2363],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":83,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":84,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2611,2611],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":89,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":90,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2800,2800],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":13,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":12,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const style = require(\\\\\\\"./styling-utils.js\\\\\\\");\\\\nconst array = require(\\\\\\\"./array-utils.js\\\\\\\"); \\\\nconst object = require(\\\\\\\"./object-utils.js\\\\\\\"); \\\\n\\\\n// Assertion Log\\\\nconst assertionLog = [];\\\\n\\\\nconst pushAssertion = function(fnName, actual, expected, message, isAssertionPassed) {\\\\n  assertionLog.push({fnName, actual, expected, message, isAssertionPassed});\\\\n}\\\\n\\\\nconst generateTestReport = function(isAssertionPassed, actual, expected, message) {\\\\n  const reportLines = [];\\\\n\\\\n  reportLines.push((isAssertionPassed ? style.green(\\\\\\\"󰗡 \\\\\\\") : style.red(\\\\\\\" \\\\\\\")) + message); \\\\n  if (!isAssertionPassed) {\\\\n    reportLines.push(style.green(\\\\\\\"   expected: \\\\\\\" + expected));\\\\n    reportLines.push(style.red(\\\\\\\"    actutal: \\\\\\\" + actual));\\\\n  }\\\\n\\\\n  return reportLines.join(\\\\\\\"\\\\\\\\n\\\\\\\");\\\\n}\\\\n\\\\nconst generateSummaryLine = function(assertions) {\\\\n  const totalCount = assertions.length;\\\\n  const passedCount = (object.group(assertions, \\\\\\\"isAssertionPassed\\\\\\\").true || []).length;\\\\n\\\\n  return passedCount + \\\\\\\" / \\\\\\\" + totalCount + \\\\\\\" passed\\\\\\\";\\\\n}\\\\n\\\\nconst generateReports = function(assertions) {\\\\n  const reports = [];\\\\n\\\\n  for (const assertion of assertions) {\\\\n    reports.push(generateTestReport(\\\\n      assertion.isAssertionPassed, \\\\n      assertion.actual, \\\\n      assertion.expected, \\\\n      assertion.message\\\\n    ));\\\\n  }\\\\n\\\\n  return reports.join(\\\\\\\"\\\\\\\\n\\\\\\\");\\\\n}\\\\n\\\\nconst generateGroupeTitle = function(assertions, message) {\\\\n  return style.headline(\\\\n    message + \\\\\\\" \\\\\\\" + \\\\\\\"[ \\\\\\\" + generateSummaryLine(assertions) + \\\\\\\"]\\\\\\\");\\\\n}\\\\n\\\\nconst generateGroupedReport = function(groupHeadline, assertions) {\\\\n  return groupHeadline + generateReports(assertions)\\\\n}\\\\n\\\\nconst generateGroupedByFnNameReport = function() {\\\\n  let allReports = [];\\\\n  const assertions = object.group(assertionLog, \\\\\\\"fnName\\\\\\\");\\\\n\\\\n  for (const fnName in assertions) {\\\\n    const groupTitle = generateGroupeTitle(assertions[fnName], \\\\\\\"Asserting \\\\\\\" + fnName);\\\\n    allReports.push(generateGroupedReport(groupTitle, assertions[fnName]));\\\\n  }\\\\n\\\\n  return allReports.join(\\\\\\\"\\\\\\\\n\\\\\\\");\\\\n}\\\\n\\\\nconst generateAssertionReport = function() {\\\\n  const summary = style.bold(\\\\\\\"\\\\\\\\nSummary : \\\\\\\" + generateSummaryLine(assertionLog));\\\\n\\\\n  return generateGroupedByFnNameReport() + \\\\\\\"\\\\\\\\n\\\\\\\" + summary;\\\\n}\\\\n\\\\nconst assertTestOnArray = function(fnName, actualArray, expectedArray, message) {\\\\n  const isAssertionPassed = array.areEqual(actualArray, expectedArray);\\\\n\\\\n  pushAssertion(fnName, actualArray, expectedArray, message, isAssertionPassed); \\\\n}\\\\n\\\\nconst assertTestOnOjbect = function(fnName, actualOjbect, expectedOjbect, message) {\\\\n  const isAssertionPassed = object.areEqual(actualOjbect, expectedOjbect);\\\\n\\\\n  pushAssertion(fnName, actualOjbect, expectedOjbect, message, isAssertionPassed); \\\\n}\\\\n\\\\nconst assertTest = function(fnName, actual, expected, message) {\\\\n  const isAssertionPassed = actual === expected;\\\\n\\\\n  pushAssertion(fnName, actual, expected, message, isAssertionPassed);\\\\n}\\\\n\\\\nexports.assertTest = assertTest;\\\\nexports.assertTestOnArray = assertTestOnArray;\\\\nexports.assertTestOnObject = assertTestOnOjbect;\\\\nexports.generateAssertionReport = generateAssertionReport;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/nCoder24/vending-machine/src/vending-machine.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":5,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":6,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[166,166],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":9,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":10,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[322,322],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-implicit-globals\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Global variable leak, declare the variable if it is intended to be local.\\\",\\\"line\\\":14,\\\"column\\\":3,\\\"nodeType\\\":\\\"ForInStatement\\\",\\\"messageId\\\":\\\"globalVariableLeak\\\",\\\"endLine\\\":16,\\\"endColumn\\\":4},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":19,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":20,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[465,465],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":23,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":24,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[607,607],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-implicit-globals\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Global variable leak, declare the variable if it is intended to be local.\\\",\\\"line\\\":30,\\\"column\\\":3,\\\"nodeType\\\":\\\"ForOfStatement\\\",\\\"messageId\\\":\\\"globalVariableLeak\\\",\\\"endLine\\\":33,\\\"endColumn\\\":4},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":36,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":37,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1031,1031],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":7,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":5,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const array = require(\\\\\\\"../lib/array-utils.js\\\\\\\");\\\\n\\\\nconst determineNoOfCoinsToDispenseOf = function(amount, denomination) {\\\\n  return Math.floor(amount / denomination);\\\\n}\\\\n\\\\nconst removeMaxDenominations = function(amount, denomination) {\\\\n  return amount - (denomination * determineNoOfCoinsToDispenseOf(amount, denomination));\\\\n}\\\\n\\\\nconst addCoins = function(coins) {\\\\n  let total = 0;\\\\n\\\\n  for (denomination in coins) {\\\\n    total += coins[denomination];\\\\n  }\\\\n\\\\n  return total;\\\\n}\\\\n\\\\nconst determineNoOfCoinsToDispense = function(amount, denominations) {\\\\n  return addCoins(determineCoinsToDispense(amount, denominations));\\\\n}\\\\n\\\\nconst determineCoinsToDispense = function(amount, denominations) {\\\\n  const coinsToDispense = {};\\\\n  let remaining = amount;\\\\n  const orderedDenominations = array.maxSort(denominations);\\\\n\\\\n  for (denomination of orderedDenominations) {\\\\n    coinsToDispense[denomination] = determineNoOfCoinsToDispenseOf(remaining, denomination);\\\\n    remaining = removeMaxDenominations(remaining, denomination);\\\\n  }\\\\n\\\\n  return coinsToDispense;\\\\n}\\\\n\\\\nexports.determineNoOfCoinsToDispense = determineNoOfCoinsToDispense;\\\\nexports.determineCoinsToDispense = determineCoinsToDispense;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/nCoder24/vending-machine/tests/array-utils-tests.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":12,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":13,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[520,520],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":18,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":19,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[836,836],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":24,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":25,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1091,1091],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":30,\\\"column\\\":1,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":30,\\\"endColumn\\\":12}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":3,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":1,\\\"fixableErrorCount\\\":3,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const test = require(\\\\\\\"../lib/testing-utilities.js\\\\\\\");\\\\nconst array = require(\\\\\\\"../lib/array-utils.js\\\\\\\");\\\\n\\\\nconst assert = test.assertTest;\\\\nconst assertArray = test.assertTestOnArray;\\\\nconst getReport = test.generateAssertionReport;\\\\n\\\\nconst assertSorting = function() {\\\\n  assertArray(\\\\\\\"maxSort\\\\\\\", array.maxSort([1, 2, 3]), [3, 2, 1], \\\\\\\"sould be in assending order\\\\\\\"); \\\\n  assertArray(\\\\\\\"maxSort\\\\\\\", array.maxSort([2, 1, 3]), [3, 2, 1], \\\\\\\"sould be in assending order\\\\\\\"); \\\\n  assertArray(\\\\\\\"maxSort\\\\\\\", array.maxSort([]), [], \\\\\\\"sould be empty\\\\\\\");\\\\n}\\\\n\\\\nconst assertBubbleSort = function() {\\\\n  assertArray(\\\\\\\"bubbleSort\\\\\\\", array.bubbleSort([1, 2, 3]), [3, 2, 1], \\\\\\\"sould be in assending order\\\\\\\"); \\\\n  assertArray(\\\\\\\"bubbleSort\\\\\\\", array.bubbleSort([2, 1, 3]), [3, 2, 1], \\\\\\\"sould be in assending order\\\\\\\"); \\\\n  assertArray(\\\\\\\"bubbleSort\\\\\\\", array.bubbleSort([]), [], \\\\\\\"sould be empty\\\\\\\");\\\\n}\\\\n\\\\nconst assertMax = function() {\\\\n  assert(\\\\\\\"max\\\\\\\", array.max([1, 2, 3]), 3, \\\\\\\"last element should be max\\\\\\\"); \\\\n  assert(\\\\\\\"max\\\\\\\", array.max([2, 4, 3]),  4, \\\\\\\"middle element should be largest\\\\\\\"); \\\\n  assert(\\\\\\\"max\\\\\\\", array.max([2]),  2, \\\\\\\"only element should be max\\\\\\\"); \\\\n}\\\\n\\\\nassertSorting();\\\\nassertMax();\\\\nassertBubbleSort();\\\\n\\\\nconsole.log(getReport());\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/nCoder24/vending-machine/tests/object-utils-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":12,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":13,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[632,632],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":16,\\\"column\\\":1,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":16,\\\"endColumn\\\":12}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":1,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":1,\\\"fixableErrorCount\\\":1,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const test = require(\\\\\\\"../lib/testing-utilities.js\\\\\\\");\\\\nconst object = require(\\\\\\\"../lib/object-utils.js\\\\\\\");\\\\n\\\\nconst assert = test.assertTest;\\\\nconst assertArray = test.assertTestOnArray;\\\\nconst getReport = test.generateAssertionReport;\\\\n\\\\nconst assertAreEqual = function() {\\\\n  assert(\\\\\\\"areObjectEqual\\\\\\\", object.areEqual({1:1, 2:2}, {1:1, 2:2}), true, \\\\\\\"two equal objects should be equal\\\\\\\"); \\\\n  assert(\\\\\\\"areObjectEqual\\\\\\\", object.areEqual({1:1, 2:2}, {2:2}), false, \\\\\\\"two objects of unequal length should be unequal\\\\\\\"); \\\\n  assert(\\\\\\\"areObjectEqual\\\\\\\", object.areEqual({1:1, 2:2}, {1:2, 2:2}),  false, \\\\\\\"two unequal values of same key should be unequal\\\\\\\"); \\\\n}\\\\n\\\\nassertAreEqual();\\\\n\\\\nconsole.log(getReport());\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/nCoder24/vending-machine/tests/vending-machine-tests.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":49,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":50,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1600,1600],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":67,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":68,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2171,2171],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":72,\\\"column\\\":1,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":72,\\\"endColumn\\\":12}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":2,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":1,\\\"fixableErrorCount\\\":2,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const test = require(\\\\\\\"../lib/testing-utilities.js\\\\\\\");\\\\nconst vendingMachine = require(\\\\\\\"../src/vending-machine.js\\\\\\\");\\\\n\\\\nconst assert = test.assertTest;\\\\nconst assertObject = test.assertTestOnObject;\\\\nconst getReport = test.generateAssertionReport;\\\\n\\\\nconst assertNumberOfCoins = function() {\\\\n  assert(\\\\n    \\\\\\\"determineNoOfCoinsToDispense\\\\\\\", \\\\n    vendingMachine.determineNoOfCoinsToDispense(0, [1]), 0, \\\\n    \\\\\\\"₹0 should give 0 coin\\\\\\\"\\\\n  );\\\\n  assert(\\\\n    \\\\\\\"determineNoOfCoinsToDispense\\\\\\\", \\\\n    vendingMachine.determineNoOfCoinsToDispense(1, [1, 2]), 1, \\\\n    \\\\\\\"₹1 should give 1 coin (1:1)\\\\\\\"\\\\n  );\\\\n  assert(\\\\n    \\\\\\\"determineNoOfCoinsToDispense\\\\\\\", \\\\n    vendingMachine.determineNoOfCoinsToDispense(3, [1, 2]), 2, \\\\n    \\\\\\\"₹3 should give 2 coins (2:1, 1:1)\\\\\\\"\\\\n  );\\\\n  assert(\\\\n    \\\\\\\"determineNoOfCoinsToDispense\\\\\\\", \\\\n    vendingMachine.determineNoOfCoinsToDispense(5, [1, 2, 5]), 1, \\\\n    \\\\\\\"₹5 should give 1 coins (5:1)\\\\\\\"\\\\n  );\\\\n  assert(\\\\n    \\\\\\\"determineNoOfCoinsToDispense\\\\\\\", \\\\n    vendingMachine.determineNoOfCoinsToDispense(12, [1, 2, 5, 10]), 2, \\\\n    \\\\\\\"₹12 should give 2 coins (10:1, 2:1)\\\\\\\"\\\\n  );\\\\n  assert(\\\\n    \\\\\\\"determineNoOfCoinsToDispense\\\\\\\", \\\\n    vendingMachine.determineNoOfCoinsToDispense(15, [1, 2, 5, 10]), 2, \\\\n    \\\\\\\"₹15 should give 2 coins (10:1, 5:1)\\\\\\\"\\\\n  );\\\\n  assert(\\\\n    \\\\\\\"determineNoOfCoinsToDispense\\\\\\\", \\\\n    vendingMachine.determineNoOfCoinsToDispense(13, [4, 1, 7]), 4, \\\\n    \\\\\\\"₹13 (unordered denominations) should give 4 coins (7:1, 4:1, 1:2)\\\\\\\"\\\\n  );\\\\n  assert(\\\\n    \\\\\\\"determineNoOfCoinsToDispense\\\\\\\", \\\\n    vendingMachine.determineNoOfCoinsToDispense(13, [7, 4, 1]), 4, \\\\n    \\\\\\\"₹13 (reversed denominations) should give 4 coins (7:1, 4:1, 1:2)\\\\\\\"\\\\n  );\\\\n}\\\\n\\\\nconst assertDetermineDenominationsToDispense = function() {\\\\n  assertObject(\\\\n    \\\\\\\"determineCoinsToDispense\\\\\\\", \\\\n    vendingMachine.determineCoinsToDispense(15, [5]), {5:3}, \\\\n    \\\\\\\"₹15 should give 3 coins (5:3)\\\\\\\"\\\\n  );\\\\n  assertObject(\\\\n    \\\\\\\"determineCoinsToDispense\\\\\\\", \\\\n    vendingMachine.determineCoinsToDispense(13, [7, 4, 1]), {7:1, 4:1, 1:2}, \\\\n    \\\\\\\"₹13 should give 4 coins (7:1, 4:1, 1:2)\\\\\\\"\\\\n  );\\\\n  assertObject(\\\\n    \\\\\\\"determineCoinsToDispense\\\\\\\", \\\\n    vendingMachine.determineCoinsToDispense(13, [7, 4, 2]), {7:1, 4:1, 2:1}, \\\\n    \\\\\\\"₹13 should give 4 coins (7:1, 4:1, 2:1)\\\\\\\"\\\\n  );\\\\n}\\\\n\\\\nassertNumberOfCoins();\\\\nassertDetermineDenominationsToDispense();\\\\n\\\\nconsole.log(getReport());\\\\n\\\",\\\"usedDeprecatedRules\\\":[]}]\\n\""}],"mohdqasim02":[{"vending-machine":"\"[{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/mohdqasim02/vending-machine/lib/array-utils.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":1,\\\"column\\\":20,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":14,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"max-depth\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Blocks are nested too deeply (3). Maximum allowed is 2.\\\",\\\"line\\\":6,\\\"column\\\":7,\\\"nodeType\\\":\\\"IfStatement\\\",\\\"messageId\\\":\\\"tooDeeply\\\",\\\"endLine\\\":10,\\\"endColumn\\\":8},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":14,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":15,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[373,373],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":3,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":1,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const bubbleSort = function(list) {\\\\n  const sortedList = list.slice(0);\\\\n\\\\n  for (let i = 0; i < sortedList.length - 1; i++){\\\\n    for (let j = i + 1; j < sortedList.length; j++) {\\\\n      if (sortedList[i] > sortedList[j]){\\\\n        const firstNum = sortedList[i];\\\\n        sortedList[i] = sortedList[j];\\\\n        sortedList[j] = firstNum;\\\\n      }\\\\n    }\\\\n  }\\\\n  return sortedList;\\\\n}\\\\n\\\\nexports.bubbleSort = bubbleSort;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/mohdqasim02/vending-machine/lib/format.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":3,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":4,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[88,88],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":7,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":8,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[146,146],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":11,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":12,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[209,209],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":15,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":16,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[270,270],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":19,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":20,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[328,328],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":23,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":24,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[388,388],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":26,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":26,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":27,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":28,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[437,437],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":31,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":31,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":32,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":33,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[522,522],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":8,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":8,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const style = function(code, text) {\\\\n  return \\\\\\\"\\\\\\\\033[\\\\\\\" + code + \\\\\\\"m\\\\\\\" + text + \\\\\\\"\\\\\\\\033[0m\\\\\\\";\\\\n}\\\\n\\\\nconst bold = function(text) {\\\\n  return style(1, text);\\\\n}\\\\n\\\\nconst underline = function(text) {\\\\n  return style(4, text);\\\\n}\\\\n\\\\nconst yellow = function(text) {\\\\n  return style(33, text);\\\\n}\\\\n\\\\nconst red = function(text) {\\\\n  return style(31, text);\\\\n}\\\\n\\\\nconst green = function(text) {\\\\n  return style(32, text);\\\\n}\\\\n\\\\nconst newLine = function() {\\\\n  console.log();\\\\n}\\\\n\\\\nconst title = function(text) {\\\\n  newLine();\\\\n  console.log(underline(bold(text)));\\\\n}\\\\n\\\\nexports.underline = underline;\\\\nexports.bold = bold;\\\\nexports.red = red;\\\\nexports.green = green;\\\\nexports.title = title;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/mohdqasim02/vending-machine/lib/test-framework.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":13,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":14,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[287,287],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":17,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":18,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[358,358],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":22,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":23,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[467,467],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":32,\\\"column\\\":4,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":33,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[717,717],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":34,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":35,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[747,747],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":43,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":43,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":44,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":45,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[972,972],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":53,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":54,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1188,1188],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":55,\\\"column\\\":27,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":63,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":57,\\\"column\\\":81,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":58,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1378,1378],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":62,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":62,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":63,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":64,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1500,1500],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (19). Maximum allowed is 10.\\\",\\\"line\\\":65,\\\"column\\\":28,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":94,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 5. Maximum allowed is 2.\\\",\\\"line\\\":65,\\\"column\\\":28,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":94,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"no-implicit-globals\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Global variable leak, declare the variable if it is intended to be local.\\\",\\\"line\\\":75,\\\"column\\\":5,\\\"nodeType\\\":\\\"ForOfStatement\\\",\\\"messageId\\\":\\\"globalVariableLeak\\\",\\\"endLine\\\":80,\\\"endColumn\\\":6},{\\\"ruleId\\\":\\\"max-depth\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Blocks are nested too deeply (3). Maximum allowed is 2.\\\",\\\"line\\\":76,\\\"column\\\":7,\\\"nodeType\\\":\\\"IfStatement\\\",\\\"messageId\\\":\\\"tooDeeply\\\",\\\"endLine\\\":79,\\\"endColumn\\\":8},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":94,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":95,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2264,2264],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (11). Maximum allowed is 10.\\\",\\\"line\\\":96,\\\"column\\\":27,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":114,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":96,\\\"column\\\":27,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":114,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"max-depth\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Blocks are nested too deeply (3). Maximum allowed is 2.\\\",\\\"line\\\":104,\\\"column\\\":7,\\\"nodeType\\\":\\\"IfStatement\\\",\\\"messageId\\\":\\\"tooDeeply\\\",\\\"endLine\\\":107,\\\"endColumn\\\":8},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":114,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":115,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2757,2757],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":122,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":123,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3031,3031],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":20,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":12,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const format = require(\\\\\\\"./format.js\\\\\\\");\\\\nconst red = format.red;\\\\nconst green = format.green;\\\\nconst title = format.title;\\\\nconst bold = format.bold;\\\\n\\\\nlet totalAssertions = 0;\\\\nlet passedAssertions = 0;\\\\nconst testCases = [];\\\\n\\\\nconst getTotalAssertions = function() {\\\\n  return totalAssertions;\\\\n}\\\\n\\\\nconst getPassedAssertions = function() {\\\\n  return passedAssertions;\\\\n}\\\\n\\\\nconst updateAssertions = function(result) {\\\\n  totalAssertions += 1;\\\\n  passedAssertions += result ? 1 : 0;\\\\n}\\\\n\\\\nconst logTestCase = function(expected, actual, testName, func, result) {\\\\n  const testCase = {\\\\n    functionName: func,\\\\n    description: testName,\\\\n    actual: actual,\\\\n    expected: expected,\\\\n    result: result,\\\\n    has_Passed: result ? \\\\\\\"✅\\\\\\\" : \\\\\\\"❌\\\\\\\",\\\\n  }\\\\n  testCases.push(testCase);\\\\n}\\\\n\\\\nconst displaySummary = function() {\\\\n  let summary = \\\\\\\"Summary: \\\\\\\";\\\\n  summary += getPassedAssertions();\\\\n  summary += \\\\\\\" / \\\\\\\";\\\\n  summary += getTotalAssertions();\\\\n  summary += \\\\\\\" assertions passed\\\\\\\";\\\\n\\\\n  console.log(bold(summary));\\\\n}\\\\n\\\\nconst formatExpectationMismatch = function(actual, expected) {\\\\n  let message = \\\\\\\"\\\\\\\\n\\\\\\\";\\\\n  message += green(\\\\\\\"\\\\\\\\tExpected: \\\\\\\" + expected);\\\\n  message += \\\\\\\"\\\\\\\\n\\\\\\\";\\\\n  message += red(\\\\\\\"\\\\\\\\t  Actual: \\\\\\\" + actual);\\\\n\\\\n  return message;\\\\n}\\\\n\\\\nconst displayTestResult = function(result, expected, actual, testName) {\\\\n  const icon = result ? \\\\\\\"✅\\\\\\\" : \\\\\\\"❌\\\\\\\";\\\\n  const expectationMismatchMessage = formatExpectationMismatch(actual, expected)\\\\n\\\\n  let message = icon + \\\\\\\" \\\\\\\" + testName;\\\\n  message += result ? \\\\\\\"\\\\\\\" : expectationMismatchMessage;\\\\n\\\\n  console.log(message);\\\\n}\\\\n\\\\nconst assertObjectEquals = function(expected, actual, testName, func) {\\\\n  const expectedKeys = Object.keys(expected); \\\\n  const actualKeys = Object.keys(actual); \\\\n  let areKeysEqual = false;\\\\n  let result = false;\\\\n\\\\n  if (expectedKeys.length === actualKeys.length) {\\\\n    areKeysEqual = true;\\\\n    result = true;\\\\n\\\\n    for (key of expectedKeys) {\\\\n      if (expected[key] !== actual[key]) {\\\\n        result = false;\\\\n        break;\\\\n      } \\\\n    }\\\\n  }\\\\n\\\\n  updateAssertions(result);\\\\n  logTestCase(expected, actual, testName, func, result);\\\\n\\\\n  let myExpected = expectedKeys; \\\\n  let myActual = actualKeys; \\\\n  if (areKeysEqual) {\\\\n    myExpected = Object.values(expected);\\\\n    myActual = Object.values(actual);\\\\n  }\\\\n\\\\n  displayTestResult(result, myExpected, myActual, testName);\\\\n}\\\\n\\\\nconst assertArrayEquals = function(expected, actual, testName, func) {\\\\n  const length = expected.length;\\\\n  let result = false;\\\\n\\\\n  if (expected.length === actual.length) {\\\\n    result = true;\\\\n\\\\n    for (let index = 0; index < length; index++) {\\\\n      if (expected[index] !== actual[index]) {\\\\n        result = false;\\\\n        break;\\\\n      } \\\\n    }\\\\n  }\\\\n\\\\n  updateAssertions(result);\\\\n  logTestCase(expected, actual, testName, func, result);\\\\n  displayTestResult(result, expected, actual, testName);\\\\n}\\\\n\\\\nconst assertEquals = function(expected, actual, testName, func) {\\\\n  const result = (actual.toString() === expected.toString());\\\\n\\\\n  updateAssertions(result);\\\\n  logTestCase(expected, actual, testName, func, result);\\\\n  displayTestResult(result, expected, actual, testName);\\\\n}\\\\n\\\\nexports.title = title;\\\\nexports.assertEquals = assertEquals;\\\\nexports.assertArrayEquals = assertArrayEquals;\\\\nexports.assertObjectEquals = assertObjectEquals;\\\\nexports.summary = displaySummary;\\\\nexports.testCases = testCases;\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/mohdqasim02/vending-machine/src/vending-machine.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":6,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":7,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[192,192],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":10,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":11,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[291,291],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":24,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":25,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[788,788],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-implicit-globals\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Global variable leak, declare the variable if it is intended to be local.\\\",\\\"line\\\":29,\\\"column\\\":3,\\\"nodeType\\\":\\\"ForOfStatement\\\",\\\"messageId\\\":\\\"globalVariableLeak\\\",\\\"endLine\\\":31,\\\"endColumn\\\":4},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":34,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":35,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[949,949],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":38,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":39,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1072,1072],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":6,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":5,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const utility = require(\\\\\\\"../lib/array-utils.js\\\\\\\");\\\\nconst sortAscending = utility.bubbleSort;\\\\n\\\\nconst calculateRemainingAmount = function(amount, denomination) {\\\\n  return amount % denomination;\\\\n}\\\\n\\\\nconst countCoins = function(amount, denomination) {\\\\n  return Math.floor(amount / denomination);\\\\n}\\\\n\\\\nconst getDenominationCount = function(amount, denominations) {\\\\n  const sortedDenominations = sortAscending(denominations);\\\\n  let leftOverAmount = amount;\\\\n  let coins = {};\\\\n\\\\n  for (let index = sortedDenominations.length - 1; index >= 0; index--) {\\\\n    const currentDenomination = sortedDenominations[index];\\\\n    coins[currentDenomination] = countCoins(leftOverAmount, currentDenomination);\\\\n    leftOverAmount = calculateRemainingAmount(leftOverAmount, currentDenomination);\\\\n  }\\\\n\\\\n  return coins;\\\\n}\\\\n\\\\nconst sumCoins = function(denominationsCount) {\\\\n  let coins = 0;\\\\n\\\\n  for (coin of Object.values(denominationsCount)) {\\\\n    coins += coin;\\\\n  }\\\\n\\\\n  return coins;\\\\n}\\\\n\\\\nconst dispenseCoins = function(amount, denominations) {\\\\n  return sumCoins(getDenominationCount(amount, denominations));\\\\n}\\\\n\\\\nexports.dispenseCoins = dispenseCoins;\\\\nexports.getDenominationCount = getDenominationCount;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/mohdqasim02/vending-machine/tests/array-utils-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":25,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":51,\\\"fix\\\":{\\\"range\\\":[24,50],\\\"text\\\":\\\"\\\\\\\"../lib/test-framework.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":25,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":48,\\\"fix\\\":{\\\"range\\\":[77,100],\\\"text\\\":\\\"\\\\\\\"../lib/array-utils.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (18). Maximum allowed is 10.\\\",\\\"line\\\":10,\\\"column\\\":27,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":33,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":33,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":34,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1057,1057],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":38,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":39,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1122,1122],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":5,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":4,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require('../lib/test-framework.js');\\\\nconst utility = require('../lib/array-utils.js');\\\\n\\\\nconst assertEquals = testing.assertEquals;\\\\nconst summary = testing.summary;\\\\nconst title = testing.title;\\\\n\\\\nconst sortAscending = utility.bubbleSort;\\\\n\\\\nconst testSortAscending = function() {\\\\n  title(\\\\\\\"Testing sort utility\\\\\\\");\\\\n\\\\n  const funcName = \\\\\\\"sortAscending\\\\\\\";\\\\n  let expected = [1, 2, 3];\\\\n  let actual = sortAscending([3, 2, 1]);\\\\n  let message = \\\\\\\"reversed list should be sorted\\\\\\\";\\\\n  assertEquals(expected, actual, message, funcName);\\\\n\\\\n  expected = [1, 2, 3];\\\\n  actual = sortAscending([1, 2, 3]);\\\\n  message = \\\\\\\"sorted list should remain same\\\\\\\";\\\\n  assertEquals(expected, actual, message, funcName);\\\\n\\\\n  expected = [1, 2, 3];\\\\n  actual = sortAscending([3, 1, 2]);\\\\n  message = \\\\\\\"shuffled list should be sorted\\\\\\\";\\\\n  assertEquals(expected, actual, message, funcName);\\\\n\\\\n  expected = [-1, 0, 2, 3];\\\\n  actual = sortAscending([3, -1, 2, 0]);\\\\n  message = \\\\\\\"negative numbers and zero should come before positive numbers\\\\\\\";\\\\n  assertEquals(expected, actual, message, funcName);\\\\n}\\\\n\\\\nconst test = function() {\\\\n  testSortAscending();\\\\n  summary();\\\\n}\\\\n\\\\ntest();\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/mohdqasim02/vending-machine/tests/vending-machine-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":25,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":51,\\\"fix\\\":{\\\"range\\\":[24,50],\\\"text\\\":\\\"\\\\\\\"../lib/test-framework.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":32,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":59,\\\"fix\\\":{\\\"range\\\":[84,111],\\\"text\\\":\\\"\\\\\\\"../src/vending-machine.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (26). Maximum allowed is 10.\\\",\\\"line\\\":12,\\\"column\\\":27,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":45,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":45,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":46,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1658,1658],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":60,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":61,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2188,2188],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (18). Maximum allowed is 10.\\\",\\\"line\\\":62,\\\"column\\\":31,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":85,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":85,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":86,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3262,3262],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":93,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":94,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3385,3385],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":8,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":6,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require('../lib/test-framework.js');\\\\nconst vendingMachine = require('../src/vending-machine.js');\\\\n\\\\nconst assertObjectEquals = testing.assertObjectEquals;\\\\nconst assertEquals = testing.assertEquals;\\\\nconst summary = testing.summary;\\\\nconst title = testing.title;\\\\n\\\\nconst dispenseCoins = vendingMachine.dispenseCoins;\\\\nconst denominationCount = vendingMachine.getDenominationCount;\\\\n\\\\nconst testdispenseCoins = function() {\\\\n  title(\\\\\\\"Testing optimum number of coins\\\\\\\");\\\\n\\\\n  const funcName = \\\\\\\"dispenseCoins\\\\\\\";\\\\n  let expected = 0;\\\\n  let actual = dispenseCoins(0, [1, 2, 5]);\\\\n  let message = \\\\\\\"No amount should return zero coins\\\\\\\";\\\\n  assertEquals(expected, actual, message, funcName); \\\\n\\\\n  expected = 10;\\\\n  actual = dispenseCoins(10, [1]);\\\\n  message = \\\\\\\"Given Only 1₹ denomination should return the original amount\\\\\\\";\\\\n  assertEquals(expected, actual, message, funcName); \\\\n\\\\n  expected = 0;\\\\n  actual = dispenseCoins(0, [5, 10]);\\\\n  message = \\\\\\\"Amount less than every denomination should return zero coin\\\\\\\";\\\\n  assertEquals(expected, actual, message, funcName); \\\\n\\\\n  expected = 1;\\\\n  actual = dispenseCoins(5, [1, 2, 5, 10]);\\\\n  message = \\\\\\\"Amount equal to any denomination should return one coin\\\\\\\";\\\\n  assertEquals(expected, actual, message, funcName); \\\\n\\\\n  expected = 3;\\\\n  actual = dispenseCoins(8, [1, 2, 5]);\\\\n  message = \\\\\\\"Amount equal to sum of all denominations should return number of denominations\\\\\\\";\\\\n  assertEquals(expected, actual, message, funcName); \\\\n\\\\n  expected = 4;\\\\n  actual = dispenseCoins(8, [1, 5]);\\\\n  message = \\\\\\\"Same amount with different denominations should return different number of coins each times\\\\\\\";\\\\n  assertEquals(expected, actual, message, funcName); \\\\n}\\\\n\\\\nconst testOrderOfDenominations = function() {\\\\n  title(\\\\\\\"Testing order of denominations\\\\\\\"); \\\\n\\\\n  const funcName = \\\\\\\"dispenseCoins\\\\\\\";\\\\n  let expected = 3;\\\\n  let actual = dispenseCoins(8, [1, 2, 5]);\\\\n  let message = \\\\\\\"Denominations in Ascending Order should return optimum number of coins\\\\\\\";\\\\n  assertEquals(expected, actual, message, funcName); \\\\n\\\\n  expected = 3;\\\\n  actual = dispenseCoins(8, [1, 2, 5]);\\\\n  message = \\\\\\\"Shuffled Denominations should also return optimum number of coins\\\\\\\";\\\\n  assertEquals(expected, actual, message, funcName); \\\\n}\\\\n\\\\nconst testDenominationCount = function() {\\\\n  title(\\\\\\\"Testing count of each denominations\\\\\\\");\\\\n\\\\n  const funcName = \\\\\\\"denominationCount\\\\\\\";\\\\n  let expected = {1: 0, 2: 0, 5: 0};\\\\n  let actual = denominationCount(0, [1, 2, 5]);\\\\n  let message = \\\\\\\"No amount should return zero coins of all denominations\\\\\\\";\\\\n  assertObjectEquals(expected, actual, message, funcName); \\\\n\\\\n  expected = {1:0, 2:0, 5:2};\\\\n  actual = denominationCount(10, [1, 2, 5]);\\\\n  message = \\\\\\\"Amount in multiple of a denomination should return all other denomination coins as zero\\\\\\\";\\\\n  assertObjectEquals(expected, actual, message, funcName); \\\\n\\\\n  expected = {1:1, 2:1, 5:1};\\\\n  actual = denominationCount(8, [1, 2, 5]);\\\\n  message = \\\\\\\"Amount equal to sum of all denominations should return one coin of each denomination\\\\\\\";\\\\n  assertObjectEquals(expected, actual, message, funcName); \\\\n\\\\n  expected = {1:0, 2:2, 5:1, 10:1};\\\\n  actual = denominationCount(19, [5, 1, 2, 10]);\\\\n  message = \\\\\\\"Amount greater than the sum of all denominations should return optimum num of coins\\\\\\\";\\\\n  assertObjectEquals(expected, actual, message, funcName); \\\\n}\\\\n\\\\n\\\\nconst test = function() {\\\\n  testdispenseCoins();\\\\n  testOrderOfDenominations();\\\\n  testDenominationCount();\\\\n  summary();\\\\n}\\\\n\\\\ntest();\\\\n\\\",\\\"usedDeprecatedRules\\\":[]}]\\n\""}],"MilanChakraborty":[{"vending-machine":"\"[{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/MilanChakraborty/vending-machine/lib/comparison-utilities.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (11). Maximum allowed is 10.\\\",\\\"line\\\":1,\\\"column\\\":24,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":17,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 5. Maximum allowed is 2.\\\",\\\"line\\\":1,\\\"column\\\":24,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":17,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":17,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":18,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[284,284],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":19,\\\"column\\\":25,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":30,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"no-implicit-globals\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Global variable leak, declare the variable if it is intended to be local.\\\",\\\"line\\\":24,\\\"column\\\":3,\\\"nodeType\\\":\\\"ForInStatement\\\",\\\"messageId\\\":\\\"globalVariableLeak\\\",\\\"endLine\\\":28,\\\"endColumn\\\":4},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":30,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":31,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[544,544],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":34,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":35,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[650,650],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":38,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":39,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[825,825],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":45,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":46,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1015,1015],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":9,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":5,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const areArraysEqual = function(array1, array2) {\\\\n  if(array1 == array2) {\\\\n    return true;\\\\n  }\\\\n\\\\n  if (array1.length !== array2.length) {\\\\n    return false;\\\\n  };\\\\n\\\\n  for (let index of array1) {\\\\n    if (array1[index] !== array2[index]) {\\\\n      return false;\\\\n    };\\\\n  };\\\\n\\\\n  return true;\\\\n}\\\\n\\\\nconst areObjectsEqual = function(object1, object2) {\\\\n  if (Object.keys(object1).length !== Object.keys(object2).length) {\\\\n    return false;\\\\n  }\\\\n\\\\n  for ( key in object1) {\\\\n    if (object1[key] !== object2[key]) {\\\\n      return false;\\\\n    }\\\\n  }\\\\n  return true;\\\\n}\\\\n\\\\nconst areExactlySame  = function(actualValue, expectedValue) {\\\\n  return expectedValue === actualValue;\\\\n}\\\\n\\\\nconst areAlmostSame  = function(actualValue, expectedValue, precision) {\\\\n  return (expectedValue >= actualValue - precision) && (expectedValue <= actualValue + precision);\\\\n}\\\\n\\\\nconst areSame  = function(actualValue, expectedValue) {\\\\n  if (areExactlySame(actualValue, expectedValue)) {\\\\n    return true;\\\\n  }\\\\n  return areAlmostSame(actualValue, expectedValue, 0.01);\\\\n}\\\\n\\\\nexports.areArraysEqual = areArraysEqual;\\\\nexports.areObjectsEqual = areObjectsEqual;\\\\nexports.areSame = areSame;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/MilanChakraborty/vending-machine/lib/math-utilities.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":7,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":8,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[128,128],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":11,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":12,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[219,219],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":2,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":2,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const sumOf = function(list) {\\\\n  let sum = 0;\\\\n  for (const value of Object.values(list)) {\\\\n    sum += value;\\\\n  }\\\\n  return sum;\\\\n}\\\\n\\\\nconst quotient = function(dividend, divisor) {\\\\n  return Math.floor(dividend / divisor);\\\\n}\\\\n\\\\nexports.sumOf = sumOf;\\\\nexports.quotient = quotient;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/MilanChakraborty/vending-machine/lib/sorting-utilities.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":1,\\\"column\\\":23,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":16,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"max-depth\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Blocks are nested too deeply (3). Maximum allowed is 2.\\\",\\\"line\\\":8,\\\"column\\\":7,\\\"nodeType\\\":\\\"IfStatement\\\",\\\"messageId\\\":\\\"tooDeeply\\\",\\\"endLine\\\":12,\\\"endColumn\\\":8},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":16,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":17,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[494,494],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":3,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":1,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const decendingSort = function(numbers) {\\\\n  const sortedNumbers = numbers.slice(0);\\\\n  let length = sortedNumbers.length;\\\\n\\\\n  for (let pass = 0; pass < sortedNumbers.length - 1; pass++) {\\\\n    for (let index = 0; index < length - pass - 1; index++) {\\\\n\\\\n      if (sortedNumbers[index] < sortedNumbers[index + 1]) {\\\\n        const temp = sortedNumbers[index];\\\\n        sortedNumbers[index] = sortedNumbers[index + 1];\\\\n        sortedNumbers[index + 1] = temp;\\\\n      }\\\\n    }\\\\n  }\\\\n  return sortedNumbers;\\\\n}\\\\n\\\\nexports.decendingSort = decendingSort;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/MilanChakraborty/vending-machine/lib/style-utilities.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":3,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":4,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[90,90],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":7,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":8,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[150,150],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":11,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":12,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[212,212],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":15,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":16,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[275,275],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":19,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":20,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[333,333],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":23,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":24,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[396,396],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":26,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":26,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":27,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":28,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[450,450],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":30,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":30,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":31,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":32,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[550,550],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":8,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":8,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const style = function(styleCode, text) {\\\\n  return \\\\\\\"\\\\\\\\033[\\\\\\\"+styleCode+\\\\\\\"m\\\\\\\"+text+\\\\\\\"\\\\\\\\033[0m\\\\\\\";\\\\n}\\\\n\\\\nconst redFg = function(text) {\\\\n  return style(31, text);\\\\n}\\\\n\\\\nconst greenFg = function(text) {\\\\n  return style(32, text);\\\\n}\\\\n\\\\nconst yellowFg = function(text) {\\\\n  return style(33, text);\\\\n}\\\\n\\\\nconst bold = function(text) {\\\\n  return style(1, text);\\\\n}\\\\n\\\\nconst underline = function(text) {\\\\n  return style(4, text);\\\\n}\\\\n\\\\nconst printNewline = function() {\\\\n  console.log();\\\\n}\\\\n\\\\nconst printHeadline = function(text) {\\\\n  console.log(yellowFg(bold(underline(\\\\\\\"\\\\\\\\n\\\\\\\"+text+\\\\\\\"\\\\\\\\n\\\\\\\"))));\\\\n}\\\\n\\\\nexports.style = style;\\\\nexports.redFg = redFg;\\\\nexports.greenFg = greenFg;\\\\nexports.yellowFg = yellowFg;\\\\nexports.bold = bold;\\\\nexports.underline = underline;\\\\nexports.printNewline = printNewline;\\\\nexports.printHeadline = printHeadline;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/MilanChakraborty/vending-machine/lib/testing-utilities.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":16,\\\"column\\\":61,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":17,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[529,529],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":25,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":26,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[820,820],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":27,\\\"column\\\":34,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":33,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":33,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":34,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1084,1084],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":39,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":40,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1238,1238],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":43,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":44,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1321,1321],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":52,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":53,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1538,1538],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":56,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":57,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1591,1591],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":61,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":62,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1729,1729],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":67,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":67,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":68,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":69,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2006,2006],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":74,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":74,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":75,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":76,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2295,2295],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":81,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":81,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":82,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":83,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2586,2586],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":84,\\\"column\\\":25,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":94,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"no-shadow\\\",\\\"severity\\\":2,\\\"message\\\":\\\"'testLog' is already declared in the upper scope on line 17 column 7.\\\",\\\"line\\\":84,\\\"column\\\":34,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"noShadow\\\",\\\"endLine\\\":84,\\\"endColumn\\\":41},{\\\"ruleId\\\":\\\"no-implicit-globals\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Global variable leak, declare the variable if it is intended to be local.\\\",\\\"line\\\":86,\\\"column\\\":3,\\\"nodeType\\\":\\\"ForOfStatement\\\",\\\"messageId\\\":\\\"globalVariableLeak\\\",\\\"endLine\\\":92,\\\"endColumn\\\":4},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":94,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":95,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2871,2871],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":100,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":100,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":101,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":102,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3058,3058],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":17,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":4,\\\"fixableErrorCount\\\":13,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const styling = require(\\\\\\\"./style-utilities.js\\\\\\\");\\\\nconst check = require(\\\\\\\"./comparison-utilities.js\\\\\\\");\\\\n\\\\nconst style = styling.style;\\\\nconst redFg = styling.redFg;\\\\nconst greenFg = styling.greenFg;\\\\nconst printHeadline = styling.printHeadline;\\\\nconst printNewLine = styling.printNewLine;\\\\n\\\\nconst areObjectsEqual = check.areObjectsEqual;\\\\nconst areArraysEqual = check.areArraysEqual;\\\\nconst areSame = check.areSame;\\\\n\\\\n//------------------------------------------ Global Variables\\\\n\\\\nconst assertions = {totalAssertions: 0, passedAssertions: 0}\\\\nconst testLog = [];\\\\n\\\\n//--------------------------------------- Functions for Formating Result \\\\n\\\\nconst formatTestResultDetail  = function(actual, expected) {\\\\n  const line1 = greenFg(\\\\\\\"\\\\\\\\n\\\\\\\\tExpected:  \\\\\\\" + expected);\\\\n  const line2 =   redFg(\\\\\\\"\\\\\\\\n\\\\\\\\t  Actual:  \\\\\\\" + actual);\\\\n  return line1 + line2;\\\\n}\\\\n\\\\nconst formatAssertionsMessage  = function(result, actual, expected, detail) {\\\\n  const icon = result ? \\\\\\\"✅\\\\\\\" : \\\\\\\"❌\\\\\\\";\\\\n  const summary = icon + \\\\\\\" \\\\\\\" + detail;\\\\n  const details = formatTestResultDetail (actual, expected);\\\\n\\\\n  return result ? summary : summary + details;\\\\n}\\\\n\\\\n//-------------------------------------------- Functions for Assertion \\\\n\\\\nconst getTotalAssertions  = function() {\\\\n  return assertions.totalAssertions;\\\\n}\\\\n\\\\nconst getPassedAssertions  = function() {\\\\n  return assertions.passedAssertions;\\\\n}\\\\n\\\\nconst updateTestLog = function(result, expected, actual, funcName, detail) {\\\\n  testLog.push({\\\\n    result : result,\\\\n    expected : expected,\\\\n    actual : actual,\\\\n    functionName : funcName, \\\\n    detail : detail});\\\\n}\\\\n\\\\nconst getTestLog = function() {\\\\n  return testLog;\\\\n}\\\\n\\\\nconst updateAssertionCount  = function(result) {\\\\n  assertions.totalAssertions += 1;\\\\n  assertions.passedAssertions += (result ? 1 : 0);\\\\n}\\\\n\\\\nconst assert  = function(expected, actual, detail, funcName) {\\\\n  const result = areSame(actual, expected);\\\\n  updateAssertionCount(result);\\\\n  updateTestLog(result, expected, actual, funcName, detail);\\\\n  console.log(formatAssertionsMessage(result, actual, expected, detail));\\\\n}\\\\n\\\\nconst assertArray  = function(expected, actual, detail, funcName) {\\\\n  const result = areArraysEqual(actual, expected);\\\\n  updateAssertionCount(result);\\\\n  updateTestLog(result, expected, actual, funcName, detail);\\\\n  console.log(formatAssertionsMessage(result, actual, expected, detail));\\\\n}\\\\n\\\\nconst assertObject  = function(expected, actual, detail, funcName) {\\\\n  const result = areObjectsEqual(actual, expected);\\\\n  updateAssertionCount(result);\\\\n  updateTestLog(result, expected, actual, funcName, detail);\\\\n  console.log(formatAssertionsMessage(result, actual, expected, detail));\\\\n}\\\\n\\\\nconst groupingTestLog = function(testLog, key) {\\\\n  const groupedTestLog = {};\\\\n  for (object of testLog) {\\\\n    if (groupedTestLog[object[key]]  === undefined) {\\\\n      groupedTestLog[object[key]] = [];\\\\n    }\\\\n\\\\n    groupedTestLog[object[key]].push(object);\\\\n  }\\\\n  return groupedTestLog;\\\\n}\\\\n\\\\nconst displayTestSummary  = function() {\\\\n  let  detail = \\\\\\\"\\\\\\\\nSummary: \\\\\\\";\\\\n  detail += getPassedAssertions() + \\\\\\\" / \\\\\\\" + getTotalAssertions();\\\\n  detail += \\\\\\\" passed\\\\\\\";\\\\n  console.log(detail);\\\\n}\\\\n\\\\n//------------------------------------------- Export Functions \\\\n\\\\nexports.printHeadLine = printHeadline;\\\\nexports.assert = assert;\\\\nexports.assertArray = assertArray;\\\\nexports.assertObject = assertObject;\\\\nexports.displayTestSummary = displayTestSummary;\\\\nexports.groupingTestLog = groupingTestLog;\\\\nexports.getTestLog = getTestLog;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/MilanChakraborty/vending-machine/src/vending-machine.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":2,\\\"column\\\":49,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":3,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[101,101],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-param-reassign\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Assignment to function parameter 'denominations'.\\\",\\\"line\\\":12,\\\"column\\\":3,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"assignmentToFunctionParam\\\",\\\"endLine\\\":12,\\\"endColumn\\\":16},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":22,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":23,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[653,653],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":26,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":27,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[792,792],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":4,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":3,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const sort = require(\\\\\\\"../lib/sorting-utilities.js\\\\\\\");\\\\nconst math = require(\\\\\\\"../lib/math-utilities.js\\\\\\\")\\\\n\\\\nconst decendingSort = sort.decendingSort;\\\\n\\\\nconst sumOf = math.sumOf;\\\\nconst quotient = math.quotient;\\\\n\\\\nconst getDenominationsLog = function(amount, denominations) {\\\\n  const coinsForEachDenominations = {};\\\\n  let remainingAmount = amount;\\\\n  denominations = decendingSort(denominations);\\\\n\\\\n  for (const denomination of denominations) {\\\\n    const coins = quotient(remainingAmount, denomination);\\\\n\\\\n    coinsForEachDenominations[denomination] = coins;\\\\n    remainingAmount = remainingAmount - (coins * denomination);\\\\n  }\\\\n\\\\n  return coinsForEachDenominations;\\\\n}\\\\n\\\\nconst determineMinimumNoOfCoins = function(amount, denomination_list) {\\\\n  return sumOf(getDenominationsLog(amount, denomination_list));\\\\n}\\\\n\\\\nexports.determineMinimumNoOfCoins = determineMinimumNoOfCoins;\\\\nexports.decendingSort = decendingSort;\\\\nexports.getDenominationsLog = getDenominationsLog;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/MilanChakraborty/vending-machine/test/comparison-utilities-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (18). Maximum allowed is 10.\\\",\\\"line\\\":15,\\\"column\\\":28,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":38,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":38,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":39,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1384,1384],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (22). Maximum allowed is 10.\\\",\\\"line\\\":40,\\\"column\\\":29,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":69,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":41,\\\"column\\\":41,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":42,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1467,1467],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":69,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":70,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2627,2627],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":74,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":75,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2705,2705],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":6,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":4,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require(\\\\\\\"../lib/testing-utilities.js\\\\\\\");\\\\nconst check = require(\\\\\\\"../lib/comparison-utilities\\\\\\\");\\\\n\\\\nconst assert = testing.assert;\\\\nconst assertArray = testing.assertArray;\\\\nconst assertObject = testing.assertObject;\\\\nconst printHeadLine = testing.printHeadLine;\\\\nconst groupingTestLog = testing.groupingTestLog;\\\\nconst getTestLog = testing.getTestLog;\\\\nconst displayTestSummary = testing.displayTestSummary;\\\\n\\\\nconst areArraysEqual = check.areArraysEqual;\\\\nconst areObjectsEqual = check.areObjectsEqual;\\\\n\\\\nconst testAreArraysEqual = function() {\\\\n  const functionName = \\\\\\\"areArraysEqual\\\\\\\";\\\\n  printHeadLine(\\\\\\\"Running Test For Are arrays Equal\\\\\\\");\\\\n\\\\n  let detail = \\\\\\\"Two empty arrays must be equal\\\\\\\";\\\\n  let expected = true;\\\\n  let actual = areArraysEqual([], []);\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"Two Arrays with Same Elements in Same Order must be Equal\\\\\\\";\\\\n  expected = true;\\\\n  actual = areArraysEqual([1, 2, 3], [1, 2, 3]);\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"Two Arrays with Same Elements not in Same Order must not be Equal\\\\\\\";\\\\n  expected = false;\\\\n  actual = areArraysEqual([1, 2, 3], [2, 1, 3]);\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"Two Arrays with Different Elements must not be Equal\\\\\\\";\\\\n  expected = false;\\\\n  actual = areArraysEqual([1, 2, 3], [4, 5, 6]);\\\\n  assert(expected, actual, detail, functionName);\\\\n}\\\\n\\\\nconst testAreObjectsEqual = function() {\\\\n  const functionName = \\\\\\\"areObjectsEqual\\\\\\\"\\\\n  printHeadLine(\\\\\\\"Running Test For Are Objects Equal\\\\\\\");\\\\n\\\\n  let detail = \\\\\\\"Two empty objects must be equal\\\\\\\";\\\\n  let expected = true;\\\\n  let actual = areObjectsEqual({}, {});\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"Two Objects with Same Entries and Keys  in Same Order must be Equal\\\\\\\";\\\\n  expected = true;\\\\n  actual = areObjectsEqual({one: 1, two: 2, three: 3}, {one: 1, two: 2, three: 3});\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"Two Objects with Same Entries and Keys Not in Same Order must be Equal\\\\\\\";\\\\n  expected = true;\\\\n  actual = areObjectsEqual({one: 1, two: 2, three: 3}, {two: 2, three: 3, one: 1});\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"Two Objects with unequal Entries must not be equal\\\\\\\";\\\\n  expected = false;\\\\n  actual = areObjectsEqual({one: 1, two: 2, three: 3, four: 4}, {one: 1, two: 2, three: 3});\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"Two Objects with Different Entries and Keys in must not be Equal\\\\\\\";\\\\n  expected = false;\\\\n  actual = areObjectsEqual({one: 1, two: 2, three: 3}, {four: 4, five: 5, six: 6});\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n}\\\\n\\\\nconst test = function() {\\\\n  testAreArraysEqual();\\\\n  testAreObjectsEqual();\\\\n}\\\\n\\\\ntest();\\\\ndisplayTestSummary();\\\\n\\\\n\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/MilanChakraborty/vending-machine/test/math-utilities-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (18). Maximum allowed is 10.\\\",\\\"line\\\":14,\\\"column\\\":28,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":37,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":37,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":38,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1239,1239],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (18). Maximum allowed is 10.\\\",\\\"line\\\":39,\\\"column\\\":29,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":62,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":62,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":63,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2089,2089],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":67,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":68,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2172,2172],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":5,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":3,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require(\\\\\\\"../lib/testing-utilities.js\\\\\\\");\\\\nconst math = require(\\\\\\\"../lib/math-utilities.js\\\\\\\");\\\\n\\\\nconst assert = testing.assert;\\\\nconst assertArray = testing.assertArray;\\\\nconst assertObject = testing.assertObject;\\\\nconst printHeadLine = testing.printHeadLine;\\\\nconst groupingTestLog = testing.groupingTestLog;\\\\nconst getTestLog = testing.getTestLog;\\\\nconst displayTestSummary = testing.displayTestSummary;\\\\n\\\\nconst sumOf = math.sumOf;\\\\n\\\\nconst testSumOfForArrays = function() {\\\\n  const functionName = \\\\\\\"sumOf\\\\\\\";\\\\n  printHeadLine(\\\\\\\"Testing For Sum Of When Provided Arrays\\\\\\\");\\\\n\\\\n  let detail = \\\\\\\"For an empty array the sum must be 0\\\\\\\";\\\\n  let expected = 0;\\\\n  let actual = sumOf([]);\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"For an array having all elements zero, sum must be 0\\\\\\\";\\\\n  expected = 0;\\\\n  actual = sumOf([0, 0, 0]);\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"For array of positive elements, sum must be sum of elements\\\\\\\";\\\\n  expected = 2;\\\\n  actual = sumOf([1, 1]);\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"For array of both positive and negative elements, sum must be sum of elements\\\\\\\";\\\\n  expected = 0;\\\\n  actual = sumOf([1, -1]);\\\\n  assert(expected, actual, detail, functionName);\\\\n}\\\\n\\\\nconst testSumOfForObjects = function() {\\\\n  const functionName = \\\\\\\"sumOf\\\\\\\";\\\\n  printHeadLine(\\\\\\\"Testing For Sum Of when Provided Objects\\\\\\\");\\\\n\\\\n  let expected = 0;\\\\n  let actual = sumOf({});\\\\n  let detail = \\\\\\\"For an empty object the sum must be 0\\\\\\\";\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"For an object having all elements zero, sum must be 0\\\\\\\";\\\\n  expected = 0;\\\\n  actual = sumOf({val1: 0, val2: 0, val3: 0});\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"For object of positive elements, sum must be sum of elements\\\\\\\";\\\\n  expected = 2;\\\\n  actual = sumOf({val1: 1,val2: 1});\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"For object of both positive and negative elements, sum must be sum of elements\\\\\\\";\\\\n  expected = 0;\\\\n  actual = sumOf({val1: 1, val2: -1});\\\\n  assert(expected, actual, detail, functionName);\\\\n}\\\\n\\\\nconst testSumOf = function() {\\\\n  testSumOfForArrays();\\\\n  testSumOfForObjects();\\\\n}\\\\n\\\\ntestSumOf();\\\\ndisplayTestSummary();\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/MilanChakraborty/vending-machine/test/sorting-utilities-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (26). Maximum allowed is 10.\\\",\\\"line\\\":14,\\\"column\\\":27,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":47,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":47,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":48,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1793,1793],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":2,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":1,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require(\\\\\\\"../lib/testing-utilities.js\\\\\\\");\\\\nconst sort = require(\\\\\\\"../lib/sorting-utilities.js\\\\\\\");\\\\n\\\\nconst assert = testing.assert;\\\\nconst assertArray = testing.assertArray;\\\\nconst assertObject = testing.assertObject;\\\\nconst printHeadLine = testing.printHeadLine;\\\\nconst groupingTestLog = testing.groupingTestLog;\\\\nconst getTestLog = testing.getTestLog;\\\\nconst displayTestSummary = testing.displayTestSummary;\\\\n\\\\nconst decendingSort = sort.decendingSort;\\\\n\\\\nconst testDecendingSort = function() {\\\\n  const functionName = \\\\\\\"decendingSort\\\\\\\";\\\\n  printHeadLine(\\\\\\\"Running Tests For Decending Sort\\\\\\\");\\\\n\\\\n  let detail = \\\\\\\"Sorting of Empty Array Must return an empty array\\\\\\\";\\\\n  let expected = [];\\\\n  let actual = decendingSort([]);\\\\n  assertArray(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"Sorting of One element must return the same element\\\\\\\";\\\\n  expected = [1];\\\\n  actual = decendingSort([1]);\\\\n  assertArray(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"Sorting array of same elements must give the same array\\\\\\\";\\\\n  expected = [1, 1, 1];\\\\n  actual = decendingSort([1, 1, 1]);\\\\n  assertArray(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"Sorting array of positive integers must give sorted array in decending order\\\\\\\";\\\\n  expected = [15, 10, 5];\\\\n  actual = decendingSort([5, 15, 10]);\\\\n  assertArray(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"Sorting array of both negative and positive elements, must give sorted array in decending form\\\\\\\";\\\\n  expected = [15, 1, -15];\\\\n  actual = decendingSort([-15, 15, 1]);\\\\n  assertArray(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"Sorting array of repeating elements, sorted array must have conecutively repeated elements\\\\\\\";\\\\n  expected = [1, 1, 1];\\\\n  actual = decendingSort([1, 1, 1]);\\\\n  assertArray(expected, actual, detail, functionName);\\\\n}\\\\n\\\\ntestDecendingSort();\\\\ndisplayTestSummary();\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/MilanChakraborty/vending-machine/test/vending-machine-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (30). Maximum allowed is 10.\\\",\\\"line\\\":15,\\\"column\\\":39,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":53,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":53,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":54,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2202,2202],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has too many statements (26). Maximum allowed is 10.\\\",\\\"line\\\":55,\\\"column\\\":32,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":88,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":88,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":89,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3788,3788],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":95,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":96,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[3923,3923],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":5,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":3,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require(\\\\\\\"../lib/testing-utilities.js\\\\\\\");\\\\nconst vendingMachine = require(\\\\\\\"../src/vending-machine.js\\\\\\\");\\\\n\\\\nconst assert = testing.assert;\\\\nconst assertArray = testing.assertArray;\\\\nconst assertObject = testing.assertObject;\\\\nconst printHeadLine = testing.printHeadLine;\\\\nconst groupingTestLog = testing.groupingTestLog;\\\\nconst getTestLog = testing.getTestLog;\\\\nconst displayTestSummary = testing.displayTestSummary;\\\\n\\\\nconst determineMinimumNoOfCoins = vendingMachine.determineMinimumNoOfCoins;\\\\nconst getDenominationsLog = vendingMachine.getDenominationsLog;\\\\n\\\\nconst testDetermineMinimumNoOfCoins = function() {\\\\n  const functionName = \\\\\\\"determineMinimumNoOfCoins\\\\\\\";\\\\n  printHeadLine(\\\\\\\"Running Test for Get Minimum No Of Coins\\\\\\\");\\\\n\\\\n  let detail = \\\\\\\"Amount of Zero must give 0 Coins for any denomination set\\\\\\\";\\\\n  let expected = 0;\\\\n  let actual = determineMinimumNoOfCoins(0, [1, 2, 5, 10]);\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"When the Denominations set is empty, Must give 0 coins for any amount\\\\\\\";\\\\n  expected = 0;\\\\n  actual = determineMinimumNoOfCoins(10, []);\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"When the amount is same as any denomination value, it must give one coin\\\\\\\";\\\\n  expected = 1;\\\\n  actual = determineMinimumNoOfCoins(1, [1, 2, 5, 10]);\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"When the amount is lower than all denomination values, it must give zero coin\\\\\\\";\\\\n  expected = 0;\\\\n  actual = determineMinimumNoOfCoins(1, [2, 5, 10]);\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"Must give the Minimum numbers of coins required for an given amount\\\\\\\";\\\\n  expected = 3;\\\\n  actual = determineMinimumNoOfCoins(8, [1, 2, 5, 10]);\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"Must give the Minimum number of coins required, when the denomination set is ordered\\\\\\\";\\\\n  expected = 4;\\\\n  actual = determineMinimumNoOfCoins(18, [1, 2, 5, 10]);\\\\n  assert(expected, actual, detail, functionName);\\\\n\\\\n  detail = \\\\\\\"When an unordered array is provided, must return the minimum no of coins \\\\\\\";\\\\n  expected = 6;\\\\n  actual = determineMinimumNoOfCoins(88, [1, 2, 5, 10, 20, 50]);\\\\n  assert(expected, actual, detail, functionName);\\\\n}\\\\n\\\\nconst testGetDenominationLog = function() {\\\\n  const functionName = \\\\\\\"getDenominationsLog\\\\\\\";\\\\n  printHeadLine(\\\\\\\"Running Tests For Get Denomination Log\\\\\\\");\\\\n\\\\n  let detail = \\\\\\\"When an empty denomination set is provided, must give an empty set of coins log\\\\\\\";\\\\n  let expected = {};\\\\n  let actual = getDenominationsLog(10, []);\\\\n  assertObject(expected, actual, detail , functionName);\\\\n\\\\n  detail = \\\\\\\"When the Amount is Zero, the coin log must have zero coins for each denomination\\\\\\\";\\\\n  expected = {1: 0, 2: 0, 5: 0};\\\\n  actual = getDenominationsLog(0, [1, 2, 5]);\\\\n  assertObject(expected, actual, detail , functionName);\\\\n\\\\n  detail = \\\\\\\"When the Amount is equal to any denomination value, must give one coin of that denomination\\\\\\\";\\\\n  expected = {1: 0, 2: 0, 5: 1};\\\\n  actual = getDenominationsLog(5, [1, 2, 5]);\\\\n  assertObject(expected, actual, detail , functionName);\\\\n\\\\n  detail = \\\\\\\"When the Amount is Lower Than all denomination values, must give zero coins for all denominations\\\\\\\";\\\\n  expected = {2: 0, 5: 0, 10: 0};\\\\n  actual = getDenominationsLog(0, [2, 5, 10]);\\\\n  assertObject(expected, actual, detail , functionName);\\\\n\\\\n  detail = \\\\\\\"When an ordered Denomination List is Provided, must give log of minimum coins required\\\\\\\";\\\\n  expected = {1: 1, 2: 1, 5: 1};\\\\n  actual = getDenominationsLog(8, [1, 2, 5]);\\\\n  assertObject(expected, actual, detail , functionName);\\\\n\\\\n  detail = \\\\\\\"An unordered Denomination List must give log of minimum coins required for the amount\\\\\\\";\\\\n  expected = {1: 1, 2: 1, 5: 1, 10: 1};\\\\n  actual = getDenominationsLog(18, [10, 1, 5, 2]);\\\\n  assertObject(expected, actual, detail , functionName);\\\\n}\\\\n\\\\nconst test = function() {\\\\n  printHeadLine(\\\\\\\"Vending Machine Tests\\\\\\\");\\\\n\\\\n  testDetermineMinimumNoOfCoins();\\\\n  testGetDenominationLog();\\\\n}\\\\n\\\\ntest();\\\\ndisplayTestSummary();\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]}]\\n\""}],"Swagato1024":[{"vending-machine":"\"[{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/Swagato1024/vending-machine/lib/sort/bubble-sort.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":2,\\\"column\\\":20,\\\"nodeType\\\":\\\"FunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":16,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"max-depth\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Blocks are nested too deeply (3). Maximum allowed is 2.\\\",\\\"line\\\":7,\\\"column\\\":7,\\\"nodeType\\\":\\\"IfStatement\\\",\\\"messageId\\\":\\\"tooDeeply\\\",\\\"endLine\\\":11,\\\"endColumn\\\":8},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":16,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":17,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[412,412],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":3,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":1,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"\\\\nconst bubbleSort = function (list) {\\\\n  const arranged = list.slice();\\\\n\\\\n  for (let pass = 0 ; pass < arranged.length; pass++) {\\\\n    for (let index = 0 ; index < arranged.length - pass; index++) {\\\\n      if(arranged[index] > arranged[index + 1]) {\\\\n        const element = arranged[index];\\\\n        arranged[index] = arranged[index + 1];\\\\n        arranged[index + 1] = element;\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  return arranged;\\\\n}\\\\n\\\\nexports.bubbleSort = bubbleSort;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/Swagato1024/vending-machine/lib/utilities.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":9,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":10,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[128,128],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":15,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":16,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[224,224],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":2,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":2,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const sumOf = function (list) {\\\\n  let sum = 0;\\\\n\\\\n  for(let element of list) {\\\\n    sum = sum + element;      \\\\n  }\\\\n\\\\n  return sum;\\\\n}\\\\n\\\\nconst addAll = function(obj) {\\\\n  const values = Object.values(obj);\\\\n\\\\n  return sumOf(values);\\\\n}\\\\n\\\\nexports.sumOf = sumOf;\\\\nexports.addAll = addAll;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/Swagato1024/vending-machine/src/vending-machine.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":50,\\\"fix\\\":{\\\"range\\\":[21,49],\\\"text\\\":\\\"\\\\\\\"../lib/sort/bubble-sort.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":27,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":48,\\\"fix\\\":{\\\"range\\\":[78,99],\\\"text\\\":\\\"\\\\\\\"../lib/utilities.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":10,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":11,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[311,311],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":14,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":15,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[395,395],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":28,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":28,\\\"endColumn\\\":3,\\\"fix\\\":{\\\"range\\\":[829,829],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":32,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":33,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[957,957],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":6,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":6,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const sort = require('../lib/sort/bubble-sort.js');\\\\nconst utilities = require('../lib/utilities.js');\\\\n\\\\nconst bubbleSort = sort.bubbleSort;\\\\nconst sumOf = utilities.sumOf;\\\\nconst addAll = utilities.addAll;\\\\n\\\\nconst calculateNoOfCoins = function (amount, denomination) {\\\\n  return Math.floor(amount / denomination); \\\\n}\\\\n\\\\nconst arrangeInDescOrder = function(list) {\\\\n  return bubbleSort(list).reverse();\\\\n}\\\\n\\\\nconst calculateEachCoinCounts = function (amount, denominations) {\\\\n\\\\n  const optimumNoOfCoins = {};\\\\n  const denominationsInDesc = arrangeInDescOrder(denominations.slice()); \\\\n  let remainingAmount = amount;\\\\n\\\\n  for (let denomination of denominationsInDesc) {\\\\n    optimumNoOfCoins[denomination] = calculateNoOfCoins(remainingAmount, denomination); \\\\n    remainingAmount = remainingAmount % denomination;\\\\n  }\\\\n\\\\n  return optimumNoOfCoins;\\\\n} \\\\n\\\\nconst countTotalCoins = function(amount, denominations) {\\\\n  return addAll(calculateEachCoinCounts (amount, denominations));\\\\n}\\\\n\\\\nexports.countTotalCoins = countTotalCoins;\\\\nexports.calculateCoinCounts = calculateEachCoinCounts;\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/Swagato1024/vending-machine/test/sort-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":25,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":44,\\\"fix\\\":{\\\"range\\\":[24,43],\\\"text\\\":\\\"\\\\\\\"../lib/testing.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":50,\\\"fix\\\":{\\\"range\\\":[67,95],\\\"text\\\":\\\"\\\\\\\"../lib/sort/bubble-sort.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":14,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":15,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[546,546],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":3,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":3,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require('../lib/testing.js');\\\\nconst sort = require('../lib/sort/bubble-sort.js');\\\\n\\\\nconst assertArraysEqual = testing.assertArraysEqual;\\\\nconst bubbleSort = sort.bubbleSort;\\\\nconst print = testing.print;\\\\n\\\\nconst testBubbleSort = function () {\\\\n  print(\\\\\\\"testing for bubble Sort\\\\\\\");\\\\n\\\\n  assertArraysEqual(bubbleSort([3]), [3], \\\\\\\"Sorting of one element is the number itself\\\\\\\");\\\\n  assertArraysEqual(bubbleSort([4, 3]),[3, 4], \\\\\\\"Sorting of two elements\\\\\\\");\\\\n  assertArraysEqual(bubbleSort([1, 7, 4]),[1, 4, 7], \\\\\\\"Sorting more than two elements\\\\\\\");\\\\n}\\\\n\\\\ntestBubbleSort();\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/Swagato1024/vending-machine/test/utilities-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":25,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":44,\\\"fix\\\":{\\\"range\\\":[24,43],\\\"text\\\":\\\"\\\\\\\"../lib/testing.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":27,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":48,\\\"fix\\\":{\\\"range\\\":[72,93],\\\"text\\\":\\\"\\\\\\\"../lib/utilities.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":10,\\\"column\\\":9,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":10,\\\"endColumn\\\":34,\\\"fix\\\":{\\\"range\\\":[274,299],\\\"text\\\":\\\"\\\\\\\"test for sumOf elements\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":12,\\\"column\\\":31,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":12,\\\"endColumn\\\":72,\\\"fix\\\":{\\\"range\\\":[333,374],\\\"text\\\":\\\"\\\\\\\"Sum of one element is the number itself\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":13,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":13,\\\"endColumn\\\":55,\\\"fix\\\":{\\\"range\\\":[410,431],\\\"text\\\":\\\"\\\\\\\"Sum of two elements\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":14,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":14,\\\"endColumn\\\":68,\\\"fix\\\":{\\\"range\\\":[470,501],\\\"text\\\":\\\"\\\\\\\"Sum of more than two elements\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":15,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":16,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[505,505],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":19,\\\"column\\\":9,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":19,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[549,581],\\\"text\\\":\\\"\\\\\\\"testAddAll values of an object\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":21,\\\"column\\\":24,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":21,\\\"endColumn\\\":27,\\\"fix\\\":{\\\"range\\\":[608,611],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":21,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":21,\\\"endColumn\\\":98,\\\"fix\\\":{\\\"range\\\":[621,682],\\\"text\\\":\\\"\\\\\\\"Sum of values of an object with one key is the value itself\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":22,\\\"column\\\":24,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":22,\\\"endColumn\\\":27,\\\"fix\\\":{\\\"range\\\":[708,711],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":22,\\\"column\\\":32,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":22,\\\"endColumn\\\":35,\\\"fix\\\":{\\\"range\\\":[716,719],\\\"text\\\":\\\"\\\\\\\"b\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":22,\\\"column\\\":45,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":22,\\\"endColumn\\\":93,\\\"fix\\\":{\\\"range\\\":[729,777],\\\"text\\\":\\\"\\\\\\\"Sum of values of an object with any no of keys\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":23,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":24,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[781,781],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":29,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":30,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[846,846],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":15,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":15,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require('../lib/testing.js');\\\\nconst utilities = require('../lib/utilities.js');\\\\n\\\\nconst assertEquals = testing.assertEquals;\\\\nconst sumOf = utilities.sumOf;\\\\nconst addAll = utilities.addAll;\\\\nconst print = testing.print;\\\\n\\\\nconst testSumOf = function () {\\\\n  print('test for sumOf elements');\\\\n\\\\n  assertEquals(sumOf([1]), 1, 'Sum of one element is the number itself');\\\\n  assertEquals(sumOf([1, 2]), 3, 'Sum of two elements');\\\\n  assertEquals(sumOf([1, 2, 4]), 7, 'Sum of more than two elements');\\\\n}\\\\n\\\\n\\\\nconst testAddAll = function () {\\\\n  print('testAddAll values of an object');\\\\n\\\\n  assertEquals(addAll({'a': 1}), 1, 'Sum of values of an object with one key is the value itself');\\\\n  assertEquals(addAll({'a': 1, 'b': 2}), 3, 'Sum of values of an object with any no of keys');\\\\n}\\\\n\\\\n\\\\nconst runTest = function () {\\\\n  testSumOf();\\\\n  testAddAll();\\\\n}\\\\n\\\\nrunTest();\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/Swagato1024/vending-machine/test/vending-machine-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":25,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":44,\\\"fix\\\":{\\\"range\\\":[24,43],\\\"text\\\":\\\"\\\\\\\"../lib/testing.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":32,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":59,\\\"fix\\\":{\\\"range\\\":[77,104],\\\"text\\\":\\\"\\\\\\\"../src/vending-machine.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":50,\\\"fix\\\":{\\\"range\\\":[128,156],\\\"text\\\":\\\"\\\\\\\"../lib/sort/bubble-sort.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":14,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":15,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[513,513],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":20,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":20,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[637,640],\\\"text\\\":\\\"\\\\\\\"1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":20,\\\"column\\\":28,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":20,\\\"endColumn\\\":31,\\\"fix\\\":{\\\"range\\\":[645,648],\\\"text\\\":\\\"\\\\\\\"7\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":20,\\\"column\\\":35,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":20,\\\"endColumn\\\":38,\\\"fix\\\":{\\\"range\\\":[652,655],\\\"text\\\":\\\"\\\\\\\"4\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":23,\\\"column\\\":40,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":23,\\\"endColumn\\\":123,\\\"fix\\\":{\\\"range\\\":[753,836],\\\"text\\\":\\\"\\\\\\\"For amount 13 rupees in denomination of 1,7,4 should dispense 2 coins of 1 rupees\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":24,\\\"column\\\":40,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":24,\\\"endColumn\\\":123,\\\"fix\\\":{\\\"range\\\":[878,961],\\\"text\\\":\\\"\\\\\\\"For amount 13 rupees in denomination of 1,7,4 should dispense 1 coins of 7 rupees\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":25,\\\"column\\\":40,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":25,\\\"endColumn\\\":123,\\\"fix\\\":{\\\"range\\\":[1003,1086],\\\"text\\\":\\\"\\\\\\\"For amount 13 rupees in denomination of 1,7,4 should dispense 1 coins of 4 rupees\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":26,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":27,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1090,1090],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":29,\\\"column\\\":9,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":29,\\\"endColumn\\\":33,\\\"fix\\\":{\\\"range\\\":[1141,1165],\\\"text\\\":\\\"\\\\\\\"test count total coins\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":31,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":31,\\\"endColumn\\\":52,\\\"fix\\\":{\\\"range\\\":[1174,1220],\\\"text\\\":\\\"\\\\\\\"should dispense 0 coins for when amount is 0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":36,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":36,\\\"endColumn\\\":73,\\\"fix\\\":{\\\"range\\\":[1292,1359],\\\"text\\\":\\\"\\\\\\\"should dispense no of coins same as amount when denomination is 1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":41,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":41,\\\"endColumn\\\":66,\\\"fix\\\":{\\\"range\\\":[1428,1488],\\\"text\\\":\\\"\\\\\\\"should dispense optimum coins for ordered denomination set\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":46,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":46,\\\"endColumn\\\":68,\\\"fix\\\":{\\\"range\\\":[1564,1626],\\\"text\\\":\\\"\\\\\\\"should dispense optimum coins for unordered denomination set\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":50,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":51,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1697,1697],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":55,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":56,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1788,1788],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":18,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":18,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const testing = require('../lib/testing.js');\\\\nconst vendingMachine = require('../src/vending-machine.js');\\\\nconst sort = require('../lib/sort/bubble-sort.js');\\\\n\\\\nconst assertEquals = testing.assertEquals;\\\\nconst assertArraysEqual = testing.assertArraysEqual;\\\\nconst countTotalCoins = vendingMachine.countTotalCoins;\\\\nconst calculateCoinCounts = vendingMachine.calculateCoinCounts; \\\\nconst print = testing.print;\\\\n\\\\n\\\\nconst it = function(testName, testData) {\\\\n  assertEquals(testData.actual, testData.expected, testName);\\\\n}\\\\n\\\\n\\\\nconst testCalculateEachCoinCounts = function () {\\\\n  print(\\\\\\\"testing for calculate each coin counts\\\\\\\");\\\\n\\\\n  let expected = { '1': 2, '7':1, '4':1  };\\\\n  let actual = calculateCoinCounts(13, [1, 7, 4]);\\\\n\\\\n  assertEquals(actual[1], expected[1], 'For amount 13 rupees in denomination of 1,7,4 should dispense 2 coins of 1 rupees');\\\\n  assertEquals(actual[7], expected[7], 'For amount 13 rupees in denomination of 1,7,4 should dispense 1 coins of 7 rupees');\\\\n  assertEquals(actual[4], expected[4], 'For amount 13 rupees in denomination of 1,7,4 should dispense 1 coins of 4 rupees');\\\\n}\\\\n\\\\nconst testCountTotalCoins = function() {\\\\n  print('test count total coins');\\\\n\\\\n  it('should dispense 0 coins for when amount is 0', {\\\\n    actual: countTotalCoins(0, [1, 2]),\\\\n    expected: 0\\\\n  });\\\\n\\\\n  it('should dispense no of coins same as amount when denomination is 1', {\\\\n    actual: countTotalCoins(5, [1]),\\\\n    expected: 5\\\\n  });\\\\n\\\\n  it('should dispense optimum coins for ordered denomination set', {\\\\n    actual: countTotalCoins(13, [1, 4, 7]),\\\\n    expected: 4\\\\n  });\\\\n\\\\n  it('should dispense optimum coins for unordered denomination set', {\\\\n    actual: countTotalCoins(13, [1, 7, 4]),\\\\n    expected: 4\\\\n  });\\\\n}\\\\n\\\\nconst runTest = function () {\\\\n  testCountTotalCoins();\\\\n  testCalculateEachCoinCounts();\\\\n}\\\\n\\\\nrunTest();\\\\n\\\",\\\"usedDeprecatedRules\\\":[]}]\\n\""}],"GlitchRemo":[{"advent-of-code":"\"[{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/GlitchRemo/advent-of-code/2015/day2-gift-wrapping/main.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":17,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":17,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":18,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":18,\\\"endColumn\\\":14}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":0,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const fs = require(\\\\\\\"fs\\\\\\\");\\\\nconst { parseDimensions } = require(\\\\\\\"./src/dimensions-parser\\\\\\\");\\\\nconst { MaterialCalculator } = require(\\\\\\\"./src/material-calculator\\\\\\\");\\\\n\\\\nconst readDimensions = () =>\\\\n  fs.readFileSync(\\\\\\\"./resources/presents-dimensions.txt\\\\\\\", \\\\\\\"utf-8\\\\\\\");\\\\n\\\\nconst main = () => {\\\\n  const rawDimensions = readDimensions();\\\\n  const giftBoxesDimensions = parseDimensions(rawDimensions);\\\\n  const materialCalculator = new MaterialCalculator();\\\\n\\\\n  materialCalculator.createGiftBoxes(giftBoxesDimensions);\\\\n  const wrapperArea = materialCalculator.calculateWrapperArea();\\\\n  const ribbonLength = materialCalculator.calculateRibbonLength();\\\\n\\\\n  console.log(`Wrapping Material Area is ${wrapperArea} sq. feet`);\\\\n  console.log(`Ribbon Material Length is ${ribbonLength} feet`);\\\\n};\\\\n\\\\nmain();\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/GlitchRemo/advent-of-code/2015/day2-gift-wrapping/src/dimensions-parser.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"no-implicit-coercion\\\",\\\"severity\\\":1,\\\"message\\\":\\\"use `Number(n)` instead.\\\",\\\"line\\\":1,\\\"column\\\":25,\\\"nodeType\\\":\\\"UnaryExpression\\\",\\\"messageId\\\":\\\"useRecommendation\\\",\\\"endLine\\\":1,\\\"endColumn\\\":27,\\\"fix\\\":{\\\"range\\\":[24,26],\\\"text\\\":\\\"Number(n)\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":0,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":1,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":1,\\\"source\\\":\\\"const toNumber = (n) => +n;\\\\n\\\\nconst parseBoxDimensions = (dimension) => dimension.split(\\\\\\\"x\\\\\\\").map(toNumber);\\\\n\\\\nconst parseDimensions = (rawDimensions) => {\\\\n  if (rawDimensions.length === 0) return [];\\\\n\\\\n  const giftBoxesDimensions = rawDimensions.trim().split(\\\\\\\"\\\\\\\\n\\\\\\\");\\\\n  return giftBoxesDimensions.map(parseBoxDimensions);\\\\n};\\\\n\\\\nmodule.exports = { parseDimensions };\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/GlitchRemo/advent-of-code/2015/day2-gift-wrapping/src/giftbox.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":null,\\\"fatal\\\":true,\\\"severity\\\":2,\\\"message\\\":\\\"Parsing error: Unexpected character '#'\\\",\\\"line\\\":5,\\\"column\\\":3,\\\"nodeType\\\":null}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":1,\\\"fatalErrorCount\\\":1,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const total = (numbers) => numbers.reduce((a, b) => a + b, 0);\\\\nconst multiply = ([a, b]) => a * b;\\\\n\\\\nclass GiftBox {\\\\n  #l;\\\\n  #w;\\\\n  #h;\\\\n\\\\n  constructor(length, width, heigth) {\\\\n    this.#l = length;\\\\n    this.#w = width;\\\\n    this.#h = heigth;\\\\n  }\\\\n\\\\n  #sidesInOrder() {\\\\n    return [this.#l, this.#w, this.#h].sort((a, b) => a - b);\\\\n  }\\\\n\\\\n  smallestSideArea() {\\\\n    return multiply(this.#sidesInOrder().slice(0, 2));\\\\n  }\\\\n\\\\n  smallestSidePerimeter() {\\\\n    return 2 * total(this.#sidesInOrder().slice(0, 2));\\\\n  }\\\\n\\\\n  volume() {\\\\n    return this.#l * this.#w * this.#h;\\\\n  }\\\\n\\\\n  surfaceArea() {\\\\n    const [l, w, h] = [this.#l, this.#w, this.#h];\\\\n    return 2 * (l * w + w * h + l * h);\\\\n  }\\\\n}\\\\n\\\\nmodule.exports = { GiftBox };\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/GlitchRemo/advent-of-code/2015/day2-gift-wrapping/src/material-calculator.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":null,\\\"fatal\\\":true,\\\"severity\\\":2,\\\"message\\\":\\\"Parsing error: Unexpected character '#'\\\",\\\"line\\\":5,\\\"column\\\":3,\\\"nodeType\\\":null}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":1,\\\"fatalErrorCount\\\":1,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { GiftBox } = require(\\\\\\\"./giftbox\\\\\\\");\\\\nconst total = (numbers) => numbers.reduce((a, b) => a + b, 0);\\\\n\\\\nclass MaterialCalculator {\\\\n  #giftBoxes;\\\\n\\\\n  createGiftBoxes(giftBoxesDimensions) {\\\\n    this.#giftBoxes = giftBoxesDimensions.map(\\\\n      ([l, w, h]) => new GiftBox(l, w, h)\\\\n    );\\\\n  }\\\\n\\\\n  #calculateWrapperArea(giftBox) {\\\\n    return giftBox.surfaceArea() + giftBox.smallestSideArea();\\\\n  }\\\\n\\\\n  #calculateRibbonLength(giftBox) {\\\\n    return giftBox.smallestSidePerimeter() + giftBox.volume();\\\\n  }\\\\n\\\\n  calculateWrapperArea() {\\\\n    const wrapperAreas = this.#giftBoxes.map(this.#calculateWrapperArea);\\\\n    return total(wrapperAreas);\\\\n  }\\\\n\\\\n  calculateRibbonLength() {\\\\n    const ribbonsLength = this.#giftBoxes.map(this.#calculateRibbonLength);\\\\n    return total(ribbonsLength);\\\\n  }\\\\n}\\\\n\\\\nmodule.exports = { MaterialCalculator };\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/GlitchRemo/advent-of-code/2015/day2-gift-wrapping/test/dimensions-parser-test.js\\\",\\\"messages\\\":[],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":0,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/GlitchRemo/advent-of-code/2015/day2-gift-wrapping/test/giftbox-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Arrow function has too many statements (12). Maximum allowed is 10.\\\",\\\"line\\\":16,\\\"column\\\":60,\\\"nodeType\\\":\\\"ArrowFunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":32,\\\"endColumn\\\":6}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":1,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require(\\\\\\\"node:test\\\\\\\");\\\\nconst assert = require(\\\\\\\"assert\\\\\\\");\\\\nconst { GiftBox } = require(\\\\\\\"../src/giftbox\\\\\\\");\\\\n\\\\ndescribe(\\\\\\\"GiftBox\\\\\\\", () => {\\\\n  describe(\\\\\\\"calculateSurfaceArea\\\\\\\", () => {\\\\n    it(\\\\\\\"should give 0 if all dimensions are 0\\\\\\\", () => {\\\\n      const box = new GiftBox(0, 0, 0);\\\\n\\\\n      const actual = box.surfaceArea();\\\\n      const expected = 0;\\\\n\\\\n      assert.strictEqual(actual, expected);\\\\n    });\\\\n\\\\n    it(\\\\\\\"should give 0 if any two of the dimensions are 0\\\\\\\", () => {\\\\n      const box1 = new GiftBox(1, 0, 0);\\\\n      const box2 = new GiftBox(0, 1, 0);\\\\n      const box3 = new GiftBox(0, 0, 1);\\\\n\\\\n      const actual1 = box1.surfaceArea();\\\\n      const actual2 = box2.surfaceArea();\\\\n      const actual3 = box3.surfaceArea();\\\\n\\\\n      const expected1 = 0;\\\\n      const expected2 = 0;\\\\n      const expected3 = 0;\\\\n\\\\n      assert.strictEqual(actual1, expected1);\\\\n      assert.strictEqual(actual2, expected2);\\\\n      assert.strictEqual(actual3, expected3);\\\\n    });\\\\n\\\\n    it(\\\\\\\"should give 6 square units for an unit cube\\\\\\\", () => {\\\\n      const box = new GiftBox(1, 1, 1);\\\\n\\\\n      const actual = box.surfaceArea();\\\\n      const expected = 6;\\\\n\\\\n      assert.strictEqual(actual, expected);\\\\n    });\\\\n\\\\n    it(\\\\\\\"should give sum of areas of 6 faces for a cuboid of valid dimensions\\\\\\\", () => {\\\\n      const box1 = new GiftBox(1, 2, 3);\\\\n      const box2 = new GiftBox(2, 3, 4);\\\\n\\\\n      const actual1 = box1.surfaceArea(1, 2, 3);\\\\n      const actual2 = box2.surfaceArea(2, 3, 4);\\\\n\\\\n      const expected1 = 22;\\\\n      const expected2 = 52;\\\\n\\\\n      assert.strictEqual(actual1, expected1);\\\\n      assert.strictEqual(actual2, expected2);\\\\n    });\\\\n  });\\\\n\\\\n  describe(\\\\\\\"calculateSmallestSideArea\\\\\\\", () => {\\\\n    it(\\\\\\\"should give 0 if any dimension is 0\\\\\\\", () => {\\\\n      const box1 = new GiftBox(1, 0, 0);\\\\n      const box2 = new GiftBox(0, 1, 0);\\\\n      const box3 = new GiftBox(0, 0, 1);\\\\n\\\\n      assert.deepStrictEqual(box1.smallestSideArea(), 0);\\\\n      assert.deepStrictEqual(box2.smallestSideArea(), 0);\\\\n      assert.deepStrictEqual(box3.smallestSideArea(), 0);\\\\n    });\\\\n\\\\n    it(\\\\\\\"should give dimension² square unit for box of equal dimensions\\\\\\\", () => {\\\\n      const box = new GiftBox(1, 1, 1);\\\\n\\\\n      assert.strictEqual(box.smallestSideArea(), 1);\\\\n    });\\\\n\\\\n    it(\\\\\\\"should give base area if length and width are the smallest sides\\\\\\\", () => {\\\\n      const box = new GiftBox(1, 2, 3);\\\\n\\\\n      assert.strictEqual(box.smallestSideArea(), 2);\\\\n    });\\\\n\\\\n    it(\\\\\\\"should give side area if width and height are the smallest sides\\\\\\\", () => {\\\\n      const box = new GiftBox(3, 2, 1);\\\\n\\\\n      assert.strictEqual(box.smallestSideArea(), 2);\\\\n    });\\\\n\\\\n    it(\\\\\\\"should give front area if height and length are the smallest sides\\\\\\\", () => {\\\\n      const box = new GiftBox(2, 3, 1);\\\\n\\\\n      assert.strictEqual(box.smallestSideArea(), 2);\\\\n    });\\\\n  });\\\\n\\\\n  describe(\\\\\\\"calculateSmallestSidePerimeter\\\\\\\", () => {\\\\n    it(\\\\\\\"should give 0 if any two dimensions are 0\\\\\\\", () => {\\\\n      const box1 = new GiftBox(1, 0, 0);\\\\n      const box2 = new GiftBox(0, 1, 0);\\\\n      const box3 = new GiftBox(0, 0, 1);\\\\n\\\\n      assert.deepStrictEqual(box1.smallestSidePerimeter(), 0);\\\\n      assert.deepStrictEqual(box2.smallestSidePerimeter(), 0);\\\\n      assert.deepStrictEqual(box3.smallestSidePerimeter(), 0);\\\\n    });\\\\n\\\\n    it(\\\\\\\"should give base perimeter if length and width are the smallest sides\\\\\\\", () => {\\\\n      const box = new GiftBox(1, 2, 3);\\\\n\\\\n      assert.strictEqual(box.smallestSidePerimeter(), 6);\\\\n    });\\\\n\\\\n    it(\\\\\\\"should give side perimeter if width and height are the smallest sides\\\\\\\", () => {\\\\n      const box = new GiftBox(3, 2, 1);\\\\n\\\\n      assert.strictEqual(box.smallestSidePerimeter(), 6);\\\\n    });\\\\n\\\\n    it(\\\\\\\"should give front perimeter if height and length are the smallest sides\\\\\\\", () => {\\\\n      const box = new GiftBox(2, 3, 1);\\\\n\\\\n      assert.strictEqual(box.smallestSidePerimeter(), 6);\\\\n    });\\\\n  });\\\\n\\\\n  describe(\\\\\\\"calculateVolume\\\\\\\", () => {\\\\n    it(\\\\\\\"should give 0 if giftbox dimensions are 0\\\\\\\", () => {\\\\n      const box = new GiftBox(0, 0, 0);\\\\n\\\\n      const actual = box.volume();\\\\n      const expected = 0;\\\\n\\\\n      assert.strictEqual(actual, expected);\\\\n    });\\\\n\\\\n    it(\\\\\\\"should give dimension³ cubic units if box dimensions are equal\\\\\\\", () => {\\\\n      const box = new GiftBox(1, 1, 1);\\\\n\\\\n      const actual = box.volume();\\\\n      const expected = 1;\\\\n\\\\n      assert.strictEqual(actual, expected);\\\\n    });\\\\n\\\\n    it(\\\\\\\"should give product of length, width and height if box dimensions are unequal\\\\\\\", () => {\\\\n      const box = new GiftBox(1, 2, 3);\\\\n\\\\n      const actual = box.volume();\\\\n      const expected = 6;\\\\n\\\\n      assert.strictEqual(actual, expected);\\\\n    });\\\\n  });\\\\n});\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/GlitchRemo/advent-of-code/2015/day2-gift-wrapping/test/material-calculator-test.js\\\",\\\"messages\\\":[],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":0,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/GlitchRemo/advent-of-code/2015/day3-house-visit/main.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":6,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":6,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":11,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":11,\\\"endColumn\\\":14}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":0,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const fs = require(\\\\\\\"fs\\\\\\\");\\\\nconst { countHousesVisited, countHousesVisitedByTwoSantas } = require(\\\\\\\"./src/count-houses\\\\\\\");\\\\n\\\\nconst part1 = (directions) => {\\\\n  const housesVisitedByOneSanta = countHousesVisited(directions);\\\\n  console.log(`One Santa delivers present to ${housesVisitedByOneSanta} houses at least once`);\\\\n};\\\\n\\\\nconst part2 = (directions) => {\\\\n  const housesVisitedByTwoSantas = countHousesVisitedByTwoSantas(directions);\\\\n  console.log(`Two Santas deliver present to ${housesVisitedByTwoSantas} houses at least once`);\\\\n};\\\\n\\\\nconst main = () => {\\\\n  const directions = fs.readFileSync(\\\\\\\"./resources/directions.txt\\\\\\\", \\\\\\\"utf-8\\\\\\\");\\\\n\\\\n  part1(directions);\\\\n  part2(directions);\\\\n};\\\\n\\\\nmain();\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/GlitchRemo/advent-of-code/2015/day3-house-visit/src/count-houses.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Arrow function has a complexity of 5. Maximum allowed is 2.\\\",\\\"line\\\":18,\\\"column\\\":28,\\\"nodeType\\\":\\\"ArrowFunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":29,\\\"endColumn\\\":2}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":1,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const isEvenIndex = (index) => index % 2 === 0;\\\\n\\\\nconst valuesOfOddPositions = (list, predicate) => {\\\\n  return list.filter((_, i) => !predicate(i));\\\\n};\\\\n\\\\nconst valuesOfEvenPositions = (list, predicate) => {\\\\n  return list.filter((_, i) => predicate(i));\\\\n};\\\\n\\\\nconst partitionBy = (list, predicate) => {\\\\n  return {\\\\n    evens: valuesOfEvenPositions(list, predicate),\\\\n    odds: valuesOfOddPositions(list, predicate),\\\\n  };\\\\n};\\\\n\\\\nconst findNextCoordinate = ({ x, y }, direction) => {\\\\n  switch (direction) {\\\\n    case \\\\\\\">\\\\\\\":\\\\n      return { x: x + 1, y: y + 0 };\\\\n    case \\\\\\\"<\\\\\\\":\\\\n      return { x: x - 1, y: y + 0 };\\\\n    case \\\\\\\"^\\\\\\\":\\\\n      return { x: x + 0, y: y + 1 };\\\\n    case \\\\\\\"v\\\\\\\":\\\\n      return { x: x + 0, y: y - 1 };\\\\n  }\\\\n};\\\\n\\\\nconst convertToString = ({ x, y }) => `${x}_${y}`;\\\\n\\\\nconst recordHousesVisited = (directions) => {\\\\n  let currentCoordinate = { x: 0, y: 0 };\\\\n  const housesVisited = new Set([convertToString(currentCoordinate)]);\\\\n\\\\n  directions.forEach((direction) => {\\\\n    currentCoordinate = findNextCoordinate(currentCoordinate, direction);\\\\n    housesVisited.add(convertToString(currentCoordinate));\\\\n  });\\\\n\\\\n  return housesVisited;\\\\n};\\\\n\\\\nconst countHousesVisited = (directions) => {\\\\n  return recordHousesVisited([...directions]).size;\\\\n};\\\\n\\\\nconst countHousesVisitedByTwoSantas = (directions) => {\\\\n  const { evens: santaDirections, odds: roboSantaDirections } = partitionBy(\\\\n    [...directions],\\\\n    isEvenIndex\\\\n  );\\\\n\\\\n  const housesVisitedBySanta = recordHousesVisited(santaDirections);\\\\n  const housesVisitedByTwoSantas = recordHousesVisited(roboSantaDirections);\\\\n  const uniqueHousesVisited = new Set([...housesVisitedBySanta, ...housesVisitedByTwoSantas]);\\\\n\\\\n  return uniqueHousesVisited.size;\\\\n};\\\\n\\\\nmodule.exports = {\\\\n  countHousesVisited,\\\\n  findNextCoordinate,\\\\n  countHousesVisitedByTwoSantas,\\\\n  recordHousesVisited,\\\\n  partitionBy,\\\\n};\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/GlitchRemo/advent-of-code/2015/day3-house-visit/test/count-houses-test.js\\\",\\\"messages\\\":[],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":0,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/GlitchRemo/advent-of-code/2022/day1/code.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"no-implicit-coercion\\\",\\\"severity\\\":1,\\\"message\\\":\\\"use `Number(stringifiedNumber)` instead.\\\",\\\"line\\\":7,\\\"column\\\":40,\\\"nodeType\\\":\\\"UnaryExpression\\\",\\\"messageId\\\":\\\"useRecommendation\\\",\\\"endLine\\\":7,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[186,204],\\\"text\\\":\\\"Number(stringifiedNumber)\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":27,\\\"column\\\":5,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":27,\\\"endColumn\\\":16}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":0,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":1,\\\"source\\\":\\\"const fs = require(\\\\\\\"fs\\\\\\\");\\\\n\\\\nconst takeRight = (quantity, list) => list.slice(-quantity);\\\\n\\\\nconst sort = list => list.slice().sort((a, b) => a - b);\\\\n\\\\nconst toNumber = stringifiedNumber =>  +stringifiedNumber;\\\\n\\\\nconst sumAll = list => list.reduce((a,b) => a+b);\\\\n\\\\nconst generateInventory = calories => calories.split(\\\\\\\"\\\\\\\\n\\\\\\\").map(toNumber);\\\\n\\\\nconst segregateInventories = (elvesInventories) => elvesInventories.split(\\\\\\\"\\\\\\\\n\\\\\\\\n\\\\\\\").map(generateInventory);\\\\n\\\\nconst getMostCalories = (totalCalories) => {\\\\n  return Math.max(...totalCalories);\\\\n};\\\\n\\\\nconst main = (inputFilePath) => {\\\\n  fs.readFile(inputFilePath, \\\\\\\"utf-8\\\\\\\", (_, elvesInventories) => {\\\\n    const caloriesCarriedByElves = segregateInventories(elvesInventories);\\\\n    const totalCalories = caloriesCarriedByElves.map(sumAll);\\\\n\\\\n    const mostCalorie = getMostCalories(totalCalories);\\\\n    const totalOfTopThree = sumAll(takeRight(3, sort(totalCalories)));\\\\n\\\\n    console.log(\\\\\\\"Most Calorie:-\\\\\\\", mostCalorie, \\\\\\\"Sum Of Top Three:-\\\\\\\", totalOfTopThree);\\\\n  });\\\\n};\\\\n\\\\nmain(process.argv[2]);\\\\n\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/GlitchRemo/advent-of-code/2022/day2/main.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":7,\\\"column\\\":83,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":8,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[342,342],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":8,\\\"column\\\":5,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":8,\\\"endColumn\\\":16},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":9,\\\"column\\\":5,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":9,\\\"endColumn\\\":16}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":1,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":1,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const fs = require(\\\\\\\"fs\\\\\\\");\\\\nconst {calculateGameScore, calculateGameScoreAfterDecryption} = require(\\\\\\\"./src/day2\\\\\\\");\\\\n\\\\nconst main = (inputFilePath) => {\\\\n  fs.readFile(inputFilePath, \\\\\\\"utf-8\\\\\\\", (_, guideData) => {\\\\n    const totalScore = calculateGameScore(guideData);\\\\n    const totalScoreAfterDecryption = calculateGameScoreAfterDecryption(guideData)\\\\n    console.log(\\\\\\\"Total score according to strategy guide is\\\\\\\", totalScore);\\\\n    console.log(\\\\\\\"Total score according to strategy guide after decryption is\\\\\\\", totalScoreAfterDecryption);\\\\n  });\\\\n};\\\\n\\\\nmain(process.argv[2]);\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/GlitchRemo/advent-of-code/2022/day2/src/day2.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":9,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":10,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[69,69],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Arrow function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":21,\\\"column\\\":29,\\\"nodeType\\\":\\\"ArrowFunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":28,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":28,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":29,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[860,860],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Arrow function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":30,\\\"column\\\":17,\\\"nodeType\\\":\\\"ArrowFunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":43,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":31,\\\"column\\\":27,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":31,\\\"endColumn\\\":30,\\\"fix\\\":{\\\"range\\\":[934,937],\\\"text\\\":\\\"\\\\\\\"A\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":31,\\\"column\\\":32,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":31,\\\"endColumn\\\":35,\\\"fix\\\":{\\\"range\\\":[939,942],\\\"text\\\":\\\"\\\\\\\"B\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":31,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":31,\\\"endColumn\\\":40,\\\"fix\\\":{\\\"range\\\":[944,947],\\\"text\\\":\\\"\\\\\\\"C\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":32,\\\"column\\\":21,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":32,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[970,973],\\\"text\\\":\\\"\\\\\\\"X\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":32,\\\"column\\\":26,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":32,\\\"endColumn\\\":29,\\\"fix\\\":{\\\"range\\\":[975,978],\\\"text\\\":\\\"\\\\\\\"Y\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":32,\\\"column\\\":31,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":32,\\\"endColumn\\\":34,\\\"fix\\\":{\\\"range\\\":[980,983],\\\"text\\\":\\\"\\\\\\\"Z\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":37,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":37,\\\"endColumn\\\":13,\\\"fix\\\":{\\\"range\\\":[1106,1109],\\\"text\\\":\\\"\\\\\\\"X\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":38,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":38,\\\"endColumn\\\":13,\\\"fix\\\":{\\\"range\\\":[1194,1197],\\\"text\\\":\\\"\\\\\\\"Y\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":39,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":39,\\\"endColumn\\\":13,\\\"fix\\\":{\\\"range\\\":[1263,1266],\\\"text\\\":\\\"\\\\\\\"Z\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":43,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":44,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1385,1385],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":49,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":50,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1581,1581],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":56,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":57,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1862,1862],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":16,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":14,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const moveScore = \\\\n{\\\\n  A: 1,\\\\n  B: 2,\\\\n  C: 3,\\\\n  X: 1,\\\\n  Y: 2,\\\\n  Z: 3\\\\n}\\\\n\\\\nconst sumOf = numbers => numbers.reduce((a, b) => a + b);\\\\n\\\\nconst nextIndexOf = (index, arraySize) => (index + 1) % arraySize;\\\\nconst previousIndexOf = (index, arraySize) => (index - 1 + arraySize) % arraySize;\\\\n\\\\nconst hasWon = (opponentScore, myScore) => opponentScore - myScore === -1 || opponentScore - myScore === 2;\\\\nconst isGameDrawn = (opponentScore, myScore) => opponentScore - myScore === 0;\\\\n\\\\nconst generateStrategyGuide = (guideData) => guideData.split(\\\\\\\"\\\\\\\\n\\\\\\\").map(roundData => roundData.split(\\\\\\\" \\\\\\\"));\\\\n\\\\nconst calculateRoundScore = ([opponentMove, myMove]) => {\\\\n  const myScore = moveScore[myMove];\\\\n  const opponentScore = moveScore[opponentMove];\\\\n\\\\n  if(hasWon(opponentScore, myScore)) return myScore + 6;\\\\n  if(isGameDrawn(opponentScore, myScore)) return myScore + 3;\\\\n  return myScore;\\\\n}\\\\n\\\\nconst decrypt = ([opponentMove, myMove]) => {\\\\n  const opponentShapes = ['A', 'B', 'C'];\\\\n  const myShapes = ['X', 'Y', 'Z'];\\\\n  const indexOfOpponentMove = opponentShapes.indexOf(opponentMove);\\\\n  let legibleMyMove;\\\\n  \\\\n  switch(myMove) {\\\\n    case 'X' : legibleMyMove = myShapes[previousIndexOf(indexOfOpponentMove, 3)];break;\\\\n    case 'Y' : legibleMyMove = myShapes[indexOfOpponentMove]; break;\\\\n    case 'Z' : legibleMyMove = myShapes[nextIndexOf(indexOfOpponentMove, 3)]; break;\\\\n  }\\\\n\\\\n  return [opponentMove, legibleMyMove];\\\\n}\\\\n\\\\nconst calculateGameScore = (guideData) => {\\\\n  const strategyGuide = generateStrategyGuide(guideData);\\\\n  const totalScores = strategyGuide.map(calculateRoundScore);\\\\n  return sumOf(totalScores);\\\\n}\\\\n\\\\nconst calculateGameScoreAfterDecryption = (guideData) => {\\\\n  const strategyGuide = generateStrategyGuide(guideData);\\\\n  const decryptedStrategyGuide = strategyGuide.map(decrypt);\\\\n  const totalScores = decryptedStrategyGuide.map(calculateRoundScore);\\\\n  return sumOf(totalScores);\\\\n}\\\\n\\\\nmodule.exports = {calculateGameScoreAfterDecryption, calculateGameScore, calculateRoundScore, generateStrategyGuide, sumOf, hasWon, isGameDrawn, nextIndexOf, previousIndexOf, decrypt};\\\\n\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/GlitchRemo/advent-of-code/2022/day2/test/day2-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":54,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":62,\\\"fix\\\":{\\\"range\\\":[53,61],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":33,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":44,\\\"fix\\\":{\\\"range\\\":[96,107],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":185,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":198,\\\"fix\\\":{\\\"range\\\":[294,307],\\\"text\\\":\\\"\\\\\\\"../src/day2\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":33,\\\"fix\\\":{\\\"range\\\":[320,343],\\\"text\\\":\\\"\\\\\\\"generateStrategyGuide\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 0.\\\",\\\"line\\\":6,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":6,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[353,353],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":4,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":43,\\\"fix\\\":{\\\"range\\\":[356,395],\\\"text\\\":\\\"\\\\\\\"should create moves guide of the game\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":42,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":52,\\\"fix\\\":{\\\"range\\\":[446,456],\\\"text\\\":\\\"\\\\\\\"A Y\\\\\\\\nB X\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":24,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":27,\\\"fix\\\":{\\\"range\\\":[482,485],\\\"text\\\":\\\"\\\\\\\"A\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":29,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":32,\\\"fix\\\":{\\\"range\\\":[487,490],\\\"text\\\":\\\"\\\\\\\"Y\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":35,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":38,\\\"fix\\\":{\\\"range\\\":[493,496],\\\"text\\\":\\\"\\\\\\\"B\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":40,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":43,\\\"fix\\\":{\\\"range\\\":[498,501],\\\"text\\\":\\\"\\\\\\\"X\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":10,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":11,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[548,548],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":11,\\\"column\\\":3,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":12,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[551,551],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":13,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":13,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[562,597],\\\"text\\\":\\\"\\\\\\\"calculateGameScoreAfterDecryption\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 0.\\\",\\\"line\\\":14,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":14,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[607,607],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":14,\\\"column\\\":4,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":14,\\\"endColumn\\\":73,\\\"fix\\\":{\\\"range\\\":[610,679],\\\"text\\\":\\\"\\\\\\\"should calculate the game score after decrypting the strategy guide\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":15,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":15,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[689,692],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":15,\\\"column\\\":53,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":15,\\\"endColumn\\\":68,\\\"fix\\\":{\\\"range\\\":[741,756],\\\"text\\\":\\\"\\\\\\\"A Y\\\\\\\\nB X\\\\\\\\nC Z\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":16,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":16,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[759,762],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":17,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":17,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[783,786],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":18,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":19,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[821,821],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":19,\\\"column\\\":3,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":20,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[824,824],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":21,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":21,\\\"endColumn\\\":30,\\\"fix\\\":{\\\"range\\\":[835,855],\\\"text\\\":\\\"\\\\\\\"calculateGameScore\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 0.\\\",\\\"line\\\":22,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":22,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[865,865],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":22,\\\"column\\\":4,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":22,\\\"endColumn\\\":65,\\\"fix\\\":{\\\"range\\\":[868,929],\\\"text\\\":\\\"\\\\\\\"should calculate the game score according to strategy guide\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":23,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":23,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[939,942],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":23,\\\"column\\\":38,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":23,\\\"endColumn\\\":53,\\\"fix\\\":{\\\"range\\\":[976,991],\\\"text\\\":\\\"\\\\\\\"A Y\\\\\\\\nB X\\\\\\\\nC Z\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":24,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":24,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[994,997],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":25,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":25,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[1018,1021],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":26,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":27,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1056,1056],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":27,\\\"column\\\":3,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":28,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1059,1059],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":29,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":29,\\\"endColumn\\\":31,\\\"fix\\\":{\\\"range\\\":[1070,1091],\\\"text\\\":\\\"\\\\\\\"calculateRoundScore\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 0.\\\",\\\"line\\\":30,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":30,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1101,1101],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":30,\\\"column\\\":4,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":30,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[1104,1174],\\\"text\\\":\\\"\\\\\\\"should calculate each round score based on opponent move and my move\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":31,\\\"column\\\":41,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":31,\\\"endColumn\\\":44,\\\"fix\\\":{\\\"range\\\":[1224,1227],\\\"text\\\":\\\"\\\\\\\"A\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":31,\\\"column\\\":46,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":31,\\\"endColumn\\\":49,\\\"fix\\\":{\\\"range\\\":[1229,1232],\\\"text\\\":\\\"\\\\\\\"Y\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":34,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":35,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1299,1299],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":35,\\\"column\\\":3,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":36,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1302,1302],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":37,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":37,\\\"endColumn\\\":19,\\\"fix\\\":{\\\"range\\\":[1313,1322],\\\"text\\\":\\\"\\\\\\\"decrypt\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 0.\\\",\\\"line\\\":38,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":38,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1332,1332],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":38,\\\"column\\\":4,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":38,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[1335,1389],\\\"text\\\":\\\"\\\\\\\"should change my shape according to decryption guide\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":39,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":39,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[1399,1402],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":39,\\\"column\\\":28,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":39,\\\"endColumn\\\":31,\\\"fix\\\":{\\\"range\\\":[1426,1429],\\\"text\\\":\\\"\\\\\\\"A\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":39,\\\"column\\\":33,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":39,\\\"endColumn\\\":36,\\\"fix\\\":{\\\"range\\\":[1431,1434],\\\"text\\\":\\\"\\\\\\\"Y\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":40,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":40,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[1438,1441],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":40,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":40,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[1459,1462],\\\"text\\\":\\\"\\\\\\\"A\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":40,\\\"column\\\":27,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":40,\\\"endColumn\\\":30,\\\"fix\\\":{\\\"range\\\":[1464,1467],\\\"text\\\":\\\"\\\\\\\"X\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":41,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":41,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[1470,1473],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":42,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":43,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1512,1512],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":43,\\\"column\\\":3,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":44,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1515,1515],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":45,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":45,\\\"endColumn\\\":17,\\\"fix\\\":{\\\"range\\\":[1526,1533],\\\"text\\\":\\\"\\\\\\\"sumOf\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 0.\\\",\\\"line\\\":46,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":46,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1543,1543],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":46,\\\"column\\\":4,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":46,\\\"endColumn\\\":38,\\\"fix\\\":{\\\"range\\\":[1546,1580],\\\"text\\\":\\\"\\\\\\\"should add all numbers of a list\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":47,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":47,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[1590,1593],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":48,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":48,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[1626,1629],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":49,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":49,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[1649,1652],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":50,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":51,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1687,1687],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":51,\\\"column\\\":3,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":52,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1690,1690],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":53,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":53,\\\"endColumn\\\":18,\\\"fix\\\":{\\\"range\\\":[1701,1709],\\\"text\\\":\\\"\\\\\\\"hasWon\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 0.\\\",\\\"line\\\":54,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":54,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1719,1719],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":54,\\\"column\\\":4,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":54,\\\"endColumn\\\":62,\\\"fix\\\":{\\\"range\\\":[1722,1780],\\\"text\\\":\\\"\\\\\\\"should give true if opponent plays rock and I play paper\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":55,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":55,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[1790,1793],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":56,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":56,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[1822,1825],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":56,\\\"column\\\":14,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":57,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1835,1835],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":57,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":58,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1840,1840],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":58,\\\"column\\\":3,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":59,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1843,1843],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":60,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":60,\\\"endColumn\\\":18,\\\"fix\\\":{\\\"range\\\":[1854,1862],\\\"text\\\":\\\"\\\\\\\"hasWon\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 0.\\\",\\\"line\\\":61,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":61,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1872,1872],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":61,\\\"column\\\":4,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":61,\\\"endColumn\\\":64,\\\"fix\\\":{\\\"range\\\":[1875,1935],\\\"text\\\":\\\"\\\\\\\"should give true if opponent plays scissor and I play rock\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":62,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":62,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[1945,1948],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":63,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":63,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[1977,1980],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":63,\\\"column\\\":14,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":64,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1990,1990],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":64,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":65,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1995,1995],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":65,\\\"column\\\":3,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":66,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1998,1998],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":67,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":67,\\\"endColumn\\\":18,\\\"fix\\\":{\\\"range\\\":[2009,2017],\\\"text\\\":\\\"\\\\\\\"hasWon\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 0.\\\",\\\"line\\\":68,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":68,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2027,2027],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":68,\\\"column\\\":4,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":68,\\\"endColumn\\\":65,\\\"fix\\\":{\\\"range\\\":[2030,2091],\\\"text\\\":\\\"\\\\\\\"should give true if opponent plays paper and I play scissor\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":69,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":69,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[2101,2104],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":70,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":70,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[2133,2136],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":70,\\\"column\\\":14,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":71,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2146,2146],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":71,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":72,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2151,2151],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":72,\\\"column\\\":3,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":73,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2154,2154],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":74,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":74,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[2165,2178],\\\"text\\\":\\\"\\\\\\\"isGameDrawn\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 0.\\\",\\\"line\\\":75,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":75,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2188,2188],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":75,\\\"column\\\":4,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":75,\\\"endColumn\\\":59,\\\"fix\\\":{\\\"range\\\":[2191,2246],\\\"text\\\":\\\"\\\\\\\"should give true if opponent and I play the same move\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":76,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":76,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[2256,2259],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":77,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":77,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[2293,2296],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":77,\\\"column\\\":14,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":78,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2306,2306],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":78,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":79,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2311,2311],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":79,\\\"column\\\":3,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":80,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2314,2314],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":81,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":81,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[2325,2338],\\\"text\\\":\\\"\\\\\\\"nextIndexOf\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 0.\\\",\\\"line\\\":82,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":82,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2348,2348],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":82,\\\"column\\\":4,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":82,\\\"endColumn\\\":34,\\\"fix\\\":{\\\"range\\\":[2351,2381],\\\"text\\\":\\\"\\\\\\\"0 of an array of size 3 is 1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":83,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":83,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[2391,2394],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":84,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":84,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[2428,2431],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":85,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":85,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[2451,2454],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":86,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":87,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2489,2489],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":87,\\\"column\\\":3,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":88,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2492,2492],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":89,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":89,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[2503,2516],\\\"text\\\":\\\"\\\\\\\"nextIndexOf\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 0.\\\",\\\"line\\\":90,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":90,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2526,2526],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":90,\\\"column\\\":4,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":90,\\\"endColumn\\\":34,\\\"fix\\\":{\\\"range\\\":[2529,2559],\\\"text\\\":\\\"\\\\\\\"2 of an array of size 3 is 0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":91,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":91,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[2569,2572],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":92,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":92,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[2606,2609],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":93,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":93,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[2629,2632],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":94,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":95,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2667,2667],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":95,\\\"column\\\":3,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":96,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2670,2670],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":97,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":97,\\\"endColumn\\\":27,\\\"fix\\\":{\\\"range\\\":[2681,2698],\\\"text\\\":\\\"\\\\\\\"previousIndexOf\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 0.\\\",\\\"line\\\":98,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":98,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2708,2708],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":98,\\\"column\\\":4,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":98,\\\"endColumn\\\":34,\\\"fix\\\":{\\\"range\\\":[2711,2741],\\\"text\\\":\\\"\\\\\\\"0 of an array of size 3 is 2\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":99,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":99,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[2751,2754],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":100,\\\"column\\\":1,\\\"nodeType\\\":\\\"Keyword\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":100,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[2792,2795],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 4 spaces but found 3.\\\",\\\"line\\\":101,\\\"column\\\":1,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":101,\\\"endColumn\\\":4,\\\"fix\\\":{\\\"range\\\":[2815,2818],\\\"text\\\":\\\"    \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":102,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":103,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2853,2853],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":103,\\\"column\\\":3,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"fix\\\":{\\\"range\\\":[2856,2856],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":114,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":114,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { deepStrictEqual, strictEqual, ok } = require('assert');\\\\nconst { describe,it } = require('node:test');\\\\nconst { generateStrategyGuide, calculateGameScore, calculateRoundScore, sumOf, hasWon, isGameDrawn, nextIndexOf, previousIndexOf, calculateGameScoreAfterDecryption, decrypt} = require('../src/day2');\\\\n\\\\ndescribe('generateStrategyGuide', () => {\\\\nit('should create moves guide of the game', () => {\\\\n    const actual = generateStrategyGuide('A Y\\\\\\\\nB X');\\\\n    const expected = [['A', 'Y'],['B', 'X']];\\\\n    deepStrictEqual(actual, expected);\\\\n  })\\\\n})\\\\n\\\\ndescribe('calculateGameScoreAfterDecryption', () => {\\\\nit('should calculate the game score after decrypting the strategy guide', () => {\\\\n   const actual = calculateGameScoreAfterDecryption('A Y\\\\\\\\nB X\\\\\\\\nC Z');\\\\n   const expected = 12;\\\\n   strictEqual(actual, expected);\\\\n  })\\\\n})\\\\n\\\\ndescribe('calculateGameScore', () => {\\\\nit('should calculate the game score according to strategy guide', () => {\\\\n   const actual = calculateGameScore('A Y\\\\\\\\nB X\\\\\\\\nC Z');\\\\n   const expected = 15;\\\\n   strictEqual(actual, expected);\\\\n  })\\\\n})\\\\n\\\\ndescribe('calculateRoundScore', () => {\\\\nit('should calculate each round score based on opponent move and my move', () => {\\\\n    const actual = calculateRoundScore(['A', 'Y']);\\\\n    const expected = 8;\\\\n    strictEqual(actual, expected);\\\\n  })\\\\n})\\\\n\\\\ndescribe('decrypt', () => {\\\\nit('should change my shape according to decryption guide', () => {\\\\n   const actual = decrypt(['A', 'Y']);\\\\n   const expected = ['A', 'X'];\\\\n   deepStrictEqual(actual, expected);\\\\n  })\\\\n})\\\\n\\\\ndescribe('sumOf', () => {\\\\nit('should add all numbers of a list', () => {\\\\n   const actual = sumOf([1, 2, 3]);\\\\n   const expected = 6;\\\\n   strictEqual(actual, expected);\\\\n  })\\\\n})\\\\n\\\\ndescribe('hasWon', () => {\\\\nit('should give true if opponent plays rock and I play paper', () => {\\\\n   const actual = hasWon(1, 2);\\\\n   ok(actual)\\\\n  })\\\\n})\\\\n\\\\ndescribe('hasWon', () => {\\\\nit('should give true if opponent plays scissor and I play rock', () => {\\\\n   const actual = hasWon(3, 1);\\\\n   ok(actual)\\\\n  })\\\\n})\\\\n\\\\ndescribe('hasWon', () => {\\\\nit('should give true if opponent plays paper and I play scissor', () => {\\\\n   const actual = hasWon(2, 3);\\\\n   ok(actual)\\\\n  })\\\\n})\\\\n\\\\ndescribe('isGameDrawn', () => {\\\\nit('should give true if opponent and I play the same move', () => {\\\\n   const actual = isGameDrawn(1, 1);\\\\n   ok(actual)\\\\n  })\\\\n})\\\\n\\\\ndescribe('nextIndexOf', () => {\\\\nit('0 of an array of size 3 is 1', () => {\\\\n   const actual = nextIndexOf(0, 3);\\\\n   const expected = 1;\\\\n   strictEqual(actual, expected);\\\\n  })\\\\n})\\\\n\\\\ndescribe('nextIndexOf', () => {\\\\nit('2 of an array of size 3 is 0', () => {\\\\n   const actual = nextIndexOf(2, 3);\\\\n   const expected = 0;\\\\n   strictEqual(actual, expected);\\\\n  })\\\\n})\\\\n\\\\ndescribe('previousIndexOf', () => {\\\\nit('0 of an array of size 3 is 2', () => {\\\\n   const actual = previousIndexOf(0, 3);\\\\n   const expected = 2;\\\\n   strictEqual(actual, expected);\\\\n  })\\\\n})\\\",\\\"usedDeprecatedRules\\\":[]}]\\n\""}],"manjeetsharma0796":[{"advent-of-code-2015":"\"[{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/manjeetsharma0796/advent-of-code-2015/day-2/main.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[19,23],\\\"text\\\":\\\"\\\\\\\"fs\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":47,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":79,\\\"fix\\\":{\\\"range\\\":[198,230],\\\"text\\\":\\\"\\\\\\\"./resources/box-dimensions.txt\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":81,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":88,\\\"fix\\\":{\\\"range\\\":[232,239],\\\"text\\\":\\\"\\\\\\\"utf-8\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":96,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":100,\\\"fix\\\":{\\\"range\\\":[247,251],\\\"text\\\":\\\"\\\\\\\"\\\\\\\\n\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":9,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":9,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":9,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":9,\\\"endColumn\\\":67,\\\"fix\\\":{\\\"range\\\":[417,469],\\\"text\\\":\\\"\\\\\\\"PART 1: The total wrapper paper area required is :\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":10,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":10,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":10,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":10,\\\"endColumn\\\":62,\\\"fix\\\":{\\\"range\\\":[502,549],\\\"text\\\":\\\"\\\\\\\"PART 2: The total ribbon length required is :\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":11,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":12,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[572,572],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":7,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":7,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const fs = require('fs');\\\\nconst { calculateTotalPaperArea, calculateTotalRibbonLength } = require(\\\\\\\"./src/paper-area-calculator\\\\\\\");\\\\n\\\\nconst main = () => {\\\\n  const rawBoxDimensionsSet = fs.readFileSync('./resources/box-dimensions.txt', 'utf-8').split('\\\\\\\\n');\\\\n  const totalPaperArea = calculateTotalPaperArea(rawBoxDimensionsSet);\\\\n  const totalRibbonLength = calculateTotalRibbonLength(rawBoxDimensionsSet);\\\\n\\\\n  console.log('PART 1: The total wrapper paper area required is :', totalPaperArea);\\\\n  console.log('PART 2: The total ribbon length required is :', totalRibbonLength);\\\\n}\\\\n\\\\nmain();\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/manjeetsharma0796/advent-of-code-2015/day-2/src/paper-area-calculator.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":6,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":7,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[231,231],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":11,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":12,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[445,445],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":15,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":16,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[577,577],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":18,\\\"column\\\":57,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":18,\\\"endColumn\\\":60,\\\"fix\\\":{\\\"range\\\":[685,688],\\\"text\\\":\\\"\\\\\\\"x\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"indent\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Expected indentation of 2 spaces but found 4.\\\",\\\"line\\\":23,\\\"column\\\":1,\\\"nodeType\\\":\\\"Punctuator\\\",\\\"messageId\\\":\\\"wrongIndentation\\\",\\\"endLine\\\":23,\\\"endColumn\\\":5,\\\"fix\\\":{\\\"range\\\":[858,862],\\\"text\\\":\\\"  \\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":27,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":28,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[961,961],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-param-reassign\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Assignment to function parameter 'totalPaperArea'.\\\",\\\"line\\\":31,\\\"column\\\":5,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"assignmentToFunctionParam\\\",\\\"endLine\\\":31,\\\"endColumn\\\":19},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":34,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":35,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1193,1193],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":37,\\\"column\\\":57,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":37,\\\"endColumn\\\":60,\\\"fix\\\":{\\\"range\\\":[1304,1307],\\\"text\\\":\\\"\\\\\\\"x\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":45,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":46,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1573,1573],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-param-reassign\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Assignment to function parameter 'totalRibbonLength'.\\\",\\\"line\\\":49,\\\"column\\\":5,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"assignmentToFunctionParam\\\",\\\"endLine\\\":49,\\\"endColumn\\\":22},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":52,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":53,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1820,1820],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":62,\\\"column\\\":2,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"fix\\\":{\\\"range\\\":[2016,2016],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":13,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":11,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const calculateAllSidesArea = (length, width, height) => {\\\\n  const baseArea = length * width;\\\\n  const lengthSideArea = length * height;\\\\n  const widthSideArea = width * height;\\\\n  return { baseArea, lengthSideArea, widthSideArea };\\\\n}\\\\n\\\\nconst findSlackArea = (length, width, height) => {\\\\n  const { baseArea, lengthSideArea, widthSideArea } = calculateAllSidesArea(length, width, height);\\\\n  return Math.min(baseArea, lengthSideArea, widthSideArea);\\\\n}\\\\n\\\\nconst calculateSurfaceAreaOfBox = (length, width, height) => {\\\\n  return 2 * (length * width + width * height + height * length);\\\\n}\\\\n\\\\nconst calculatePaperArea = (rawBoxDimension) => {\\\\n  const [length, width, height] = rawBoxDimension.split('x')\\\\n    .map(numberInString => parseInt(numberInString));\\\\n  const minimumArea = findSlackArea(length, width, height);\\\\n\\\\n  const surfaceAreaOfBox = calculateSurfaceAreaOfBox\\\\n    (length, width, height);\\\\n  const paperArea = surfaceAreaOfBox + minimumArea;\\\\n\\\\n  return paperArea;\\\\n}\\\\n\\\\nconst calculateTotalPaperArea = (rawBoxDimensionsSet) => {\\\\n  return rawBoxDimensionsSet.reduce((totalPaperArea, rawBoxDimension) => {\\\\n    totalPaperArea += calculatePaperArea(rawBoxDimension);\\\\n    return totalPaperArea;\\\\n  }, 0);\\\\n}\\\\n\\\\nconst calculateRibbonLength = (rawBoxDimension) => {\\\\n  const [length, width, height] = rawBoxDimension.split('x')\\\\n    .map(numberInString => parseInt(numberInString));\\\\n  const largeSide = Math.max(length, width, height);\\\\n\\\\n  const ribbonToWrap = 2 * ((length + width + height) - largeSide);\\\\n  const ribbonForBow = length * width * height;\\\\n\\\\n  return ribbonToWrap + ribbonForBow;\\\\n}\\\\n\\\\nconst calculateTotalRibbonLength = (rawBoxDimensionsSet) => {\\\\n  return rawBoxDimensionsSet.reduce((totalRibbonLength, rawBoxDimension) => {\\\\n    totalRibbonLength += calculateRibbonLength(rawBoxDimension);\\\\n    return totalRibbonLength;\\\\n  }, 0);\\\\n}\\\\n\\\\nmodule.exports = {\\\\n  calculateAllSidesArea,\\\\n  findSlackArea,\\\\n  calculateSurfaceAreaOfBox,\\\\n  calculatePaperArea,\\\\n  calculateTotalPaperArea,\\\\n  calculateRibbonLength,\\\\n  calculateTotalRibbonLength\\\\n}\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/manjeetsharma0796/advent-of-code-2015/day-2/test/paper-area-calculator-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":50,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[96,104],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":128,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":158,\\\"fix\\\":{\\\"range\\\":[234,264],\\\"text\\\":\\\"\\\\\\\"../src/paper-area-calculator\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":30,\\\"fix\\\":{\\\"range\\\":[277,297],\\\"text\\\":\\\"\\\\\\\"calculatePaperArea\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":64,\\\"fix\\\":{\\\"range\\\":[312,370],\\\"text\\\":\\\"\\\\\\\"Should be zero square feet for box with all dimensions 0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":39,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":46,\\\"fix\\\":{\\\"range\\\":[418,425],\\\"text\\\":\\\"\\\\\\\"0x0x0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":13,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":13,\\\"endColumn\\\":59,\\\"fix\\\":{\\\"range\\\":[500,553],\\\"text\\\":\\\"\\\\\\\"Should be non-zero for box with positive dimensions\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":14,\\\"column\\\":39,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":14,\\\"endColumn\\\":46,\\\"fix\\\":{\\\"range\\\":[601,608],\\\"text\\\":\\\"\\\\\\\"2x3x4\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":17,\\\"column\\\":36,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":17,\\\"endColumn\\\":43,\\\"fix\\\":{\\\"range\\\":[672,679],\\\"text\\\":\\\"\\\\\\\"2x3x4\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":18,\\\"column\\\":36,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":18,\\\"endColumn\\\":44,\\\"fix\\\":{\\\"range\\\":[722,730],\\\"text\\\":\\\"\\\\\\\"1x1x10\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":22,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":22,\\\"endColumn\\\":33,\\\"fix\\\":{\\\"range\\\":[758,781],\\\"text\\\":\\\"\\\\\\\"calculateAllSidesArea\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":23,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":23,\\\"endColumn\\\":103,\\\"fix\\\":{\\\"range\\\":[796,893],\\\"text\\\":\\\"\\\\\\\"Should give baseArea, lengthSideArea and widthSideArea as 0, when provided all dimensions are 0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":33,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":33,\\\"endColumn\\\":126,\\\"fix\\\":{\\\"range\\\":[1160,1280],\\\"text\\\":\\\"\\\\\\\"Should give baseArea as 1, lengthSideArea and widthSideArea as 0, when provided length and width are 1 and height is 0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":43,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":43,\\\"endColumn\\\":126,\\\"fix\\\":{\\\"range\\\":[1547,1667],\\\"text\\\":\\\"\\\\\\\"Should give lengthSideArea as 1, baseArea and widthSideArea as 0, when provided length and width are 1 and height is 0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":54,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":54,\\\"endColumn\\\":126,\\\"fix\\\":{\\\"range\\\":[1935,2055],\\\"text\\\":\\\"\\\\\\\"Should give widthSideArea as 1, baseArea and lengthSideArea as 0, when provided length and width are 1 and height is 0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":66,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":66,\\\"endColumn\\\":37,\\\"fix\\\":{\\\"range\\\":[2331,2358],\\\"text\\\":\\\"\\\\\\\"calculateSurfaceAreaOfBox\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":67,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":67,\\\"endColumn\\\":70,\\\"fix\\\":{\\\"range\\\":[2373,2437],\\\"text\\\":\\\"\\\\\\\"Should give 0 surface area, when length,width and height are 0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":76,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":77,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2646,2646],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":78,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":78,\\\"endColumn\\\":76,\\\"fix\\\":{\\\"range\\\":[2653,2723],\\\"text\\\":\\\"\\\\\\\"Should give surface area, when length, width and height are provided\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":80,\\\"column\\\":56,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":81,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2846,2846],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":81,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":82,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2851,2851],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":84,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":84,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[2866,2881],\\\"text\\\":\\\"\\\\\\\"findSlackArea\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":85,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":85,\\\"endColumn\\\":79,\\\"fix\\\":{\\\"range\\\":[2896,2969],\\\"text\\\":\\\"\\\\\\\"Should give slack area when different length, width and height provided\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":96,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":96,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[3174,3242],\\\"text\\\":\\\"\\\\\\\"Should give slack area when same length, width and height provided\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":108,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":108,\\\"endColumn\\\":33,\\\"fix\\\":{\\\"range\\\":[3455,3478],\\\"text\\\":\\\"\\\\\\\"calculateRibbonLength\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":109,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":109,\\\"endColumn\\\":69,\\\"fix\\\":{\\\"range\\\":[3493,3556],\\\"text\\\":\\\"\\\\\\\"Should be length as 0 as when non existing dimension provided\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":110,\\\"column\\\":29,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":110,\\\"endColumn\\\":36,\\\"fix\\\":{\\\"range\\\":[3594,3601],\\\"text\\\":\\\"\\\\\\\"0x0x0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":114,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":114,\\\"endColumn\\\":72,\\\"fix\\\":{\\\"range\\\":[3675,3741],\\\"text\\\":\\\"\\\\\\\"Should be length as non-zero as when existing dimension provided\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":115,\\\"column\\\":39,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":115,\\\"endColumn\\\":46,\\\"fix\\\":{\\\"range\\\":[3789,3796],\\\"text\\\":\\\"\\\\\\\"1x1x1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":116,\\\"column\\\":39,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":116,\\\"endColumn\\\":46,\\\"fix\\\":{\\\"range\\\":[3841,3848],\\\"text\\\":\\\"\\\\\\\"2x3x4\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":117,\\\"column\\\":39,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":117,\\\"endColumn\\\":47,\\\"fix\\\":{\\\"range\\\":[3894,3902],\\\"text\\\":\\\"\\\\\\\"1x1x10\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":119,\\\"column\\\":3,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"fix\\\":{\\\"range\\\":[3918,3918],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":32,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":32,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst { strictEqual, deepStrictEqual } = require('assert');\\\\nconst { calculatePaperArea, calculateAllSidesArea, calculateSurfaceAreaOfBox, findSlackArea, calculateRibbonLength } = require('../src/paper-area-calculator');\\\\n\\\\ndescribe('calculatePaperArea', () => {\\\\n  it('Should be zero square feet for box with all dimensions 0', () => {\\\\n    const actual = calculatePaperArea('0x0x0');\\\\n    const expected = 0;\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('Should be non-zero for box with positive dimensions', () => {\\\\n    const actual = calculatePaperArea('2x3x4');\\\\n    const expected = 58;\\\\n\\\\n    strictEqual(calculatePaperArea('2x3x4'), 58);\\\\n    strictEqual(calculatePaperArea('1x1x10'), 43);\\\\n  });\\\\n});\\\\n\\\\ndescribe('calculateAllSidesArea', () => {\\\\n  it('Should give baseArea, lengthSideArea and widthSideArea as 0, when provided all dimensions are 0', () => {\\\\n    const length = 0;\\\\n    const width = 0;\\\\n    const height = 0;\\\\n    const actual = calculateAllSidesArea(length, width, height);\\\\n    const expected = { baseArea: 0, lengthSideArea: 0, widthSideArea: 0 };\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('Should give baseArea as 1, lengthSideArea and widthSideArea as 0, when provided length and width are 1 and height is 0', () => {\\\\n    const length = 1;\\\\n    const width = 1;\\\\n    const height = 0;\\\\n    const actual = calculateAllSidesArea(length, width, height);\\\\n    const expected = { baseArea: 1, lengthSideArea: 0, widthSideArea: 0 };\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('Should give lengthSideArea as 1, baseArea and widthSideArea as 0, when provided length and width are 1 and height is 0', () => {\\\\n    const length = 1;\\\\n    const width = 0;\\\\n    const height = 1;\\\\n\\\\n    const actual = calculateAllSidesArea(length, width, height);\\\\n    const expected = { baseArea: 0, lengthSideArea: 1, widthSideArea: 0 };\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('Should give widthSideArea as 1, baseArea and lengthSideArea as 0, when provided length and width are 1 and height is 0', () => {\\\\n    const length = 0;\\\\n    const width = 1;\\\\n    const height = 1;\\\\n\\\\n    const actual = calculateAllSidesArea(length, width, height);\\\\n    const expected = { baseArea: 0, lengthSideArea: 0, widthSideArea: 1 };\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n});\\\\n\\\\ndescribe('calculateSurfaceAreaOfBox', () => {\\\\n  it('Should give 0 surface area, when length,width and height are 0', () => {\\\\n    const length = 0;\\\\n    const width = 0;\\\\n    const height = 0;\\\\n\\\\n    const actual = calculateSurfaceAreaOfBox(length, width, height);\\\\n    const expected = 0;\\\\n\\\\n    strictEqual(actual, expected);\\\\n  })\\\\n\\\\n  it('Should give surface area, when length, width and height are provided', () => {\\\\n    strictEqual(calculateSurfaceAreaOfBox(1, 1, 10), 42);\\\\n    strictEqual(calculateSurfaceAreaOfBox(2, 3, 4), 52)\\\\n  })\\\\n});\\\\n\\\\ndescribe('findSlackArea', () => {\\\\n  it('Should give slack area when different length, width and height provided', () => {\\\\n    const length = 1;\\\\n    const width = 2;\\\\n    const height = 3;\\\\n\\\\n    const actual = findSlackArea(length, width, height);\\\\n    const expected = 2;\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('Should give slack area when same length, width and height provided', () => {\\\\n    const length = 1;\\\\n    const width = 1;\\\\n    const height = 1;\\\\n\\\\n    const actual = findSlackArea(length, width, height);\\\\n    const expected = 1;\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n});\\\\n\\\\ndescribe('calculateRibbonLength', () => {\\\\n  it('Should be length as 0 as when non existing dimension provided', () => {\\\\n    const rawBoxDimension = '0x0x0';\\\\n    strictEqual(calculateRibbonLength(rawBoxDimension), 0);\\\\n  });\\\\n\\\\n  it('Should be length as non-zero as when existing dimension provided', () => {\\\\n    strictEqual(calculateRibbonLength('1x1x1'), 5);\\\\n    strictEqual(calculateRibbonLength('2x3x4'), 34);\\\\n    strictEqual(calculateRibbonLength('1x1x10'), 14);\\\\n  });\\\\n})\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/manjeetsharma0796/advent-of-code-2015/day-3/main.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[19,23],\\\"text\\\":\\\"\\\\\\\"fs\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":27,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":43,\\\"fix\\\":{\\\"range\\\":[52,68],\\\"text\\\":\\\"\\\\\\\"./src/santa.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":32,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":53,\\\"fix\\\":{\\\"range\\\":[102,123],\\\"text\\\":\\\"\\\\\\\"./src/controller.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":43,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":73,\\\"fix\\\":{\\\"range\\\":[193,223],\\\"text\\\":\\\"\\\\\\\"./resources/instructions.txt\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":75,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":82,\\\"fix\\\":{\\\"range\\\":[225,232],\\\"text\\\":\\\"\\\\\\\"utf-8\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":12,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":13,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[377,377],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":15,\\\"column\\\":43,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":15,\\\"endColumn\\\":73,\\\"fix\\\":{\\\"range\\\":[445,475],\\\"text\\\":\\\"\\\\\\\"./resources/instructions.txt\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":15,\\\"column\\\":75,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":15,\\\"endColumn\\\":82,\\\"fix\\\":{\\\"range\\\":[477,484],\\\"text\\\":\\\"\\\\\\\"utf-8\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":21,\\\"column\\\":38,\\\"nodeType\\\":\\\"ReturnStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":22,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[670,670],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":22,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":23,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[672,672],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":28,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":28,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":28,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":28,\\\"endColumn\\\":78,\\\"fix\\\":{\\\"range\\\":[790,853],\\\"text\\\":\\\"\\\\\\\"Total Number of houses which santa visited at least one time \\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":29,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":29,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":29,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":29,\\\"endColumn\\\":96,\\\"fix\\\":{\\\"range\\\":[890,971],\\\"text\\\":\\\"\\\\\\\"Total number of houses which santa and robo santa visited at least one time is \\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":30,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":31,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[995,995],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":13,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":13,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const fs = require('fs');\\\\nconst { Santa } = require('./src/santa.js');\\\\nconst { Controller } = require('./src/controller.js');\\\\n\\\\nconst partOne = () => {\\\\n  const rawInstructions = fs.readFileSync('./resources/instructions.txt', 'utf-8');\\\\n  const santa = new Santa();\\\\n  const elf = new Controller([santa]);\\\\n\\\\n  elf.navigate(rawInstructions);\\\\n  return Object.keys(elf.logs).length;\\\\n}\\\\n\\\\nconst partTwo = () => {\\\\n  const rawInstructions = fs.readFileSync('./resources/instructions.txt', 'utf-8');\\\\n  const santa = new Santa();\\\\n  const roboSanta = new Santa();\\\\n\\\\n  const elf = new Controller([santa, roboSanta]);\\\\n  elf.navigate(rawInstructions);\\\\n  return Object.keys(elf.logs).length\\\\n}\\\\n\\\\nconst main = () => {\\\\n  const totalHouseVisited1 = partOne();\\\\n  const totalHouseVisited2 = partTwo();\\\\n\\\\n  console.log('Total Number of houses which santa visited at least one time ', totalHouseVisited1);\\\\n  console.log('Total number of houses which santa and robo santa visited at least one time is ', totalHouseVisited2);\\\\n}\\\\n\\\\nmain();\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/manjeetsharma0796/advent-of-code-2015/day-3/src/controller.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":null,\\\"fatal\\\":true,\\\"severity\\\":2,\\\"message\\\":\\\"Parsing error: Unexpected character '#'\\\",\\\"line\\\":4,\\\"column\\\":3,\\\"nodeType\\\":null}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":1,\\\"fatalErrorCount\\\":1,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { Santa } = require(\\\\\\\"./santa\\\\\\\");\\\\n\\\\nclass Controller {\\\\n  #count\\\\n\\\\n  constructor(santa) {\\\\n    this.santa = santa;\\\\n    this.log = {};\\\\n    this.#count = 0;\\\\n  }\\\\n\\\\n  #incrementCount() {\\\\n    this.#count += 1;\\\\n  }\\\\n\\\\n  #registerLogs(count) {\\\\n    const { x, y } = this.santa[count].status;\\\\n    this.log[`${x},${y}`] = 'house';\\\\n  }\\\\n  navigate([...instructions]) {\\\\n\\\\n    const directionGuide = {\\\\n      '^': (santa) => { santa.moveUp() },\\\\n      '>': (santa) => { santa.moveRight() },\\\\n      '<': (santa) => { santa.moveLeft() },\\\\n      'v': (santa) => { santa.moveDown() }\\\\n    };\\\\n\\\\n    instructions.forEach((instruction) => {\\\\n      if (this.santa.length === 1) {\\\\n        directionGuide[instruction](this.santa[0]);\\\\n        this.#registerLogs(0);\\\\n      }\\\\n\\\\n      if (this.santa.length === 2) {\\\\n        const currentSanta = this.#count % 2;\\\\n        \\\\n        directionGuide[instruction](this.santa[currentSanta]);\\\\n        this.#registerLogs(currentSanta);\\\\n        this.#incrementCount();\\\\n      }\\\\n    })\\\\n  }\\\\n\\\\n  get logs() {\\\\n    const log = this.log;\\\\n    return log;\\\\n  }\\\\n}\\\\n\\\\nexports.Controller = Controller;\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/manjeetsharma0796/advent-of-code-2015/day-3/src/santa.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":null,\\\"fatal\\\":true,\\\"severity\\\":2,\\\"message\\\":\\\"Parsing error: Unexpected character '#'\\\",\\\"line\\\":7,\\\"column\\\":3,\\\"nodeType\\\":null}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":1,\\\"fatalErrorCount\\\":1,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"class Santa {\\\\n  constructor() {\\\\n    this.currentCoordinate = { x: 0, y: 0 };\\\\n  }\\\\n\\\\n\\\\n  #move(delta) {\\\\n    this.currentCoordinate.y += delta.y;\\\\n    this.currentCoordinate.x += delta.x;\\\\n  }\\\\n\\\\n  moveUp() {\\\\n    this.#move({ x: 0, y: 1 });\\\\n  }\\\\n\\\\n  moveDown() {\\\\n    this.#move({ x: 0, y: -1 });\\\\n  }\\\\n\\\\n  moveRight() {\\\\n    this.#move({ x: 1, y: 0 });\\\\n  }\\\\n\\\\n  moveLeft() {\\\\n    this.#move({ x: -1, y: 0 });\\\\n  }\\\\n\\\\n  get status() {\\\\n    const currentCoordinate = this.currentCoordinate;\\\\n    return currentCoordinate;\\\\n  }\\\\n}\\\\n\\\\nmodule.exports = {\\\\n  Santa\\\\n}\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/manjeetsharma0796/advent-of-code-2015/day-3/test/controller-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[83,91],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":27,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[120,134],\\\"text\\\":\\\"\\\\\\\"../src/santa\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":4,\\\"column\\\":32,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":4,\\\"endColumn\\\":54,\\\"fix\\\":{\\\"range\\\":[168,190],\\\"text\\\":\\\"\\\\\\\"../src/controller.js\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":22,\\\"fix\\\":{\\\"range\\\":[203,215],\\\"text\\\":\\\"\\\\\\\"Controller\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":22,\\\"fix\\\":{\\\"range\\\":[236,246],\\\"text\\\":\\\"\\\\\\\"navigate\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":76,\\\"fix\\\":{\\\"range\\\":[263,331],\\\"text\\\":\\\"\\\\\\\"Should navigate the Santa to north when provided instruction is up\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":11,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":11,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[436,439],\\\"text\\\":\\\"\\\\\\\"^\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":19,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":19,\\\"endColumn\\\":78,\\\"fix\\\":{\\\"range\\\":[575,645],\\\"text\\\":\\\"\\\\\\\"Should navigate the Santa to south when provided instruction is down\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":22,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":22,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[750,753],\\\"text\\\":\\\"\\\\\\\"v\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":30,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":30,\\\"endColumn\\\":78,\\\"fix\\\":{\\\"range\\\":[890,960],\\\"text\\\":\\\"\\\\\\\"Should navigate the Santa to east when provided instruction is right\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":33,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":33,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[1065,1068],\\\"text\\\":\\\"\\\\\\\">\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":41,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":41,\\\"endColumn\\\":77,\\\"fix\\\":{\\\"range\\\":[1204,1273],\\\"text\\\":\\\"\\\\\\\"Should navigate the Santa to west when provided instruction is left\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":44,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":44,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[1378,1381],\\\"text\\\":\\\"\\\\\\\"<\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":52,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":52,\\\"endColumn\\\":94,\\\"fix\\\":{\\\"range\\\":[1518,1604],\\\"text\\\":\\\"\\\\\\\"Should navigate the Santa to west and register log when provided instruction is left\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":55,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":55,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[1709,1712],\\\"text\\\":\\\"\\\\\\\"<\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":58,\\\"column\\\":26,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":58,\\\"endColumn\\\":32,\\\"fix\\\":{\\\"range\\\":[1771,1777],\\\"text\\\":\\\"\\\\\\\"-1,0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":58,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":58,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[1779,1786],\\\"text\\\":\\\"\\\\\\\"house\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":63,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":63,\\\"endColumn\\\":79,\\\"fix\\\":{\\\"range\\\":[1848,1919],\\\"text\\\":\\\"\\\\\\\"Should navigate the Santa multiple instructions and record logs in it\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":66,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":66,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[2024,2028],\\\"text\\\":\\\"\\\\\\\"<>\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":69,\\\"column\\\":26,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":69,\\\"endColumn\\\":32,\\\"fix\\\":{\\\"range\\\":[2087,2093],\\\"text\\\":\\\"\\\\\\\"-1,0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":69,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":69,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[2095,2102],\\\"text\\\":\\\"\\\\\\\"house\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":69,\\\"column\\\":43,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":69,\\\"endColumn\\\":48,\\\"fix\\\":{\\\"range\\\":[2104,2109],\\\"text\\\":\\\"\\\\\\\"0,0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":69,\\\"column\\\":50,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":69,\\\"endColumn\\\":57,\\\"fix\\\":{\\\"range\\\":[2111,2118],\\\"text\\\":\\\"\\\\\\\"house\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":74,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":74,\\\"endColumn\\\":67,\\\"fix\\\":{\\\"range\\\":[2180,2239],\\\"text\\\":\\\"\\\\\\\"Should navigate Santas instructions and record logs in it\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":79,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":79,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[2387,2391],\\\"text\\\":\\\"\\\\\\\"<>\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":82,\\\"column\\\":26,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":82,\\\"endColumn\\\":32,\\\"fix\\\":{\\\"range\\\":[2450,2456],\\\"text\\\":\\\"\\\\\\\"-1,0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":82,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":82,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[2458,2465],\\\"text\\\":\\\"\\\\\\\"house\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":82,\\\"column\\\":43,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":82,\\\"endColumn\\\":48,\\\"fix\\\":{\\\"range\\\":[2467,2472],\\\"text\\\":\\\"\\\\\\\"1,0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":82,\\\"column\\\":50,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":82,\\\"endColumn\\\":57,\\\"fix\\\":{\\\"range\\\":[2474,2481],\\\"text\\\":\\\"\\\\\\\"house\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":88,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":88,\\\"endColumn\\\":17,\\\"fix\\\":{\\\"range\\\":[2553,2558],\\\"text\\\":\\\"\\\\\\\"log\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":89,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":89,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[2575,2625],\\\"text\\\":\\\"\\\\\\\"Should be empty log when no instruction provided\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":32,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":32,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst { deepStrictEqual } = require('assert');\\\\nconst { Santa } = require('../src/santa');\\\\nconst { Controller } = require('../src/controller.js');\\\\n\\\\ndescribe('Controller', () => {\\\\n  describe('navigate', () => {\\\\n    it('Should navigate the Santa to north when provided instruction is up', () => {\\\\n      const santa = new Santa();\\\\n      const elf = new Controller([santa]);\\\\n      elf.navigate('^');\\\\n\\\\n      const actual = santa.status;\\\\n      const expected = { x: 0, y: 1 };\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n\\\\n    it('Should navigate the Santa to south when provided instruction is down', () => {\\\\n      const santa = new Santa();\\\\n      const elf = new Controller([santa]);\\\\n      elf.navigate('v');\\\\n\\\\n      const actual = santa.status;\\\\n      const expected = { x: 0, y: -1 };\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n\\\\n    it('Should navigate the Santa to east when provided instruction is right', () => {\\\\n      const santa = new Santa();\\\\n      const elf = new Controller([santa]);\\\\n      elf.navigate('>');\\\\n\\\\n      const actual = santa.status;\\\\n      const expected = { x: 1, y: 0 };\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n\\\\n    it('Should navigate the Santa to west when provided instruction is left', () => {\\\\n      const santa = new Santa();\\\\n      const elf = new Controller([santa]);\\\\n      elf.navigate('<');\\\\n\\\\n      const actual = santa.status;\\\\n      const expected = { x: -1, y: 0 };\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n\\\\n    it('Should navigate the Santa to west and register log when provided instruction is left', () => {\\\\n      const santa = new Santa();\\\\n      const elf = new Controller([santa]);\\\\n      elf.navigate('<');\\\\n\\\\n      const actual = elf.log;\\\\n      const expected = { '-1,0': 'house' };\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n\\\\n    it('Should navigate the Santa multiple instructions and record logs in it', () => {\\\\n      const santa = new Santa();\\\\n      const elf = new Controller([santa]);\\\\n      elf.navigate('<>');\\\\n\\\\n      const actual = elf.log;\\\\n      const expected = { '-1,0': 'house', '0,0': 'house' };\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n\\\\n    it('Should navigate Santas instructions and record logs in it', () => {\\\\n      const santa = new Santa();\\\\n      const santa1 = new Santa();\\\\n\\\\n      const elf = new Controller([santa, santa1]);\\\\n      elf.navigate('<>');\\\\n\\\\n      const actual = elf.log;\\\\n      const expected = { '-1,0': 'house', '1,0': 'house' };\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n  });\\\\n\\\\n  describe('log', () => {\\\\n    it('Should be empty log when no instruction provided', () => {\\\\n      const santa = new Santa();\\\\n      const elf = new Controller([santa]);\\\\n\\\\n      const actual = elf.logs;\\\\n      const expected = {};\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n  });\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/manjeetsharma0796/advent-of-code-2015/day-3/test/santa-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[83,91],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":27,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[120,134],\\\"text\\\":\\\"\\\\\\\"../src/santa\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":17,\\\"fix\\\":{\\\"range\\\":[147,154],\\\"text\\\":\\\"\\\\\\\"Santa\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[175,183],\\\"text\\\":\\\"\\\\\\\"status\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":37,\\\"fix\\\":{\\\"range\\\":[200,229],\\\"text\\\":\\\"\\\\\\\"Should give status of santa\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":17,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":17,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[415,423],\\\"text\\\":\\\"\\\\\\\"moveUp\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":18,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":18,\\\"endColumn\\\":46,\\\"fix\\\":{\\\"range\\\":[440,478],\\\"text\\\":\\\"\\\\\\\"Should move santa to north direction\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":28,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":28,\\\"endColumn\\\":52,\\\"fix\\\":{\\\"range\\\":[676,720],\\\"text\\\":\\\"\\\\\\\"Should move santa to north direction twice\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":40,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":40,\\\"endColumn\\\":22,\\\"fix\\\":{\\\"range\\\":[950,960],\\\"text\\\":\\\"\\\\\\\"moveDown\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":41,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":41,\\\"endColumn\\\":46,\\\"fix\\\":{\\\"range\\\":[977,1015],\\\"text\\\":\\\"\\\\\\\"Should move santa to south direction\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":51,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":51,\\\"endColumn\\\":52,\\\"fix\\\":{\\\"range\\\":[1216,1260],\\\"text\\\":\\\"\\\\\\\"Should move santa to south direction twice\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":63,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":63,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[1495,1506],\\\"text\\\":\\\"\\\\\\\"moveRight\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":64,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":64,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[1523,1560],\\\"text\\\":\\\"\\\\\\\"Should move santa to east direction\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":74,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":74,\\\"endColumn\\\":51,\\\"fix\\\":{\\\"range\\\":[1761,1804],\\\"text\\\":\\\"\\\\\\\"Should move santa to east direction twice\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":86,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":86,\\\"endColumn\\\":22,\\\"fix\\\":{\\\"range\\\":[2040,2050],\\\"text\\\":\\\"\\\\\\\"moveLeft\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":87,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":87,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[2067,2104],\\\"text\\\":\\\"\\\\\\\"Should move santa to west direction\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":97,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":97,\\\"endColumn\\\":51,\\\"fix\\\":{\\\"range\\\":[2305,2348],\\\"text\\\":\\\"\\\\\\\"Should move santa to west direction twice\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":18,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":18,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst { deepStrictEqual } = require('assert');\\\\nconst { Santa } = require('../src/santa');\\\\n\\\\ndescribe('Santa', () => {\\\\n  describe('status', () => {\\\\n    it('Should give status of santa', () => {\\\\n      const santa = new Santa();\\\\n\\\\n      const actual = santa.status;\\\\n      const expected = { x: 0, y: 0 };\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n  });\\\\n\\\\n  describe('moveUp', () => {\\\\n    it('Should move santa to north direction', () => {\\\\n      const santa = new Santa();\\\\n      santa.moveUp();\\\\n\\\\n      const actual = santa.status;\\\\n      const expected = { x: 0, y: 1 };\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n\\\\n    it('Should move santa to north direction twice', () => {\\\\n      const santa = new Santa();\\\\n      santa.moveUp();\\\\n      santa.moveUp();\\\\n\\\\n      const actual = santa.status;\\\\n      const expected = { x: 0, y: 2 };\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n  });\\\\n\\\\n  describe('moveDown', () => {\\\\n    it('Should move santa to south direction', () => {\\\\n      const santa = new Santa();\\\\n      santa.moveDown();\\\\n\\\\n      const actual = santa.status;\\\\n      const expected = { x: 0, y: -1 };\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n\\\\n    it('Should move santa to south direction twice', () => {\\\\n      const santa = new Santa();\\\\n      santa.moveDown();\\\\n      santa.moveDown();\\\\n\\\\n      const actual = santa.status;\\\\n      const expected = { x: 0, y: -2 };\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n  });\\\\n\\\\n  describe('moveRight', () => {\\\\n    it('Should move santa to east direction', () => {\\\\n      const santa = new Santa();\\\\n      santa.moveRight();\\\\n\\\\n      const actual = santa.status;\\\\n      const expected = { x: 1, y: 0 };\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n\\\\n    it('Should move santa to east direction twice', () => {\\\\n      const santa = new Santa();\\\\n      santa.moveRight();\\\\n      santa.moveRight();\\\\n\\\\n      const actual = santa.status;\\\\n      const expected = { x: 2, y: 0 };\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n  });\\\\n\\\\n  describe('moveLeft', () => {\\\\n    it('Should move santa to west direction', () => {\\\\n      const santa = new Santa();\\\\n      santa.moveLeft();\\\\n\\\\n      const actual = santa.status;\\\\n      const expected = { x: -1, y: 0 };\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n\\\\n    it('Should move santa to west direction twice', () => {\\\\n      const santa = new Santa();\\\\n      santa.moveLeft();\\\\n      santa.moveLeft();\\\\n\\\\n      const actual = santa.status;\\\\n      const expected = { x: -2, y: 0 };\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n  });\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/manjeetsharma0796/advent-of-code-2015/day-4/main.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":1,\\\"column\\\":69,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":2,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[68,68],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":4,\\\"column\\\":41,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":4,\\\"endColumn\\\":51,\\\"fix\\\":{\\\"range\\\":[131,141],\\\"text\\\":\\\"\\\\\\\"yzbqklnj\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":41,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":51,\\\"fix\\\":{\\\"range\\\":[187,197],\\\"text\\\":\\\"\\\\\\\"yzbqklnj\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":7,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":7,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":75,\\\"fix\\\":{\\\"range\\\":[218,278],\\\"text\\\":\\\"\\\\\\\"The answer key for \\\\\\\\\\\\\\\"yzbqklnj\\\\\\\\\\\\\\\" with five zeroes in begin is\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":8,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":8,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[304,363],\\\"text\\\":\\\"\\\\\\\"The answer key for \\\\\\\\\\\\\\\"yzbqklnj\\\\\\\\\\\\\\\" with six zeroes in begin is\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":9,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":10,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[376,376],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":6,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":6,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { findSuffixOfSecretKey } = require(\\\\\\\"./src/answer-key-finder\\\\\\\")\\\\n\\\\nconst main = () => {\\\\n  const partOne = findSuffixOfSecretKey('yzbqklnj', 5);\\\\n  const partTwo = findSuffixOfSecretKey('yzbqklnj', 6);\\\\n\\\\n  console.log('The answer key for \\\\\\\"yzbqklnj\\\\\\\" with five zeroes in begin is', partOne);\\\\n  console.log('The answer key for \\\\\\\"yzbqklnj\\\\\\\" with six zeroes in begin is', partTwo);\\\\n}\\\\n\\\\nmain();\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/manjeetsharma0796/advent-of-code-2015/day-4/src/answer-key-finder.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":32,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[31,44],\\\"text\\\":\\\"\\\\\\\"node:crypto\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":1,\\\"column\\\":46,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":2,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[45,45],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Arrow function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":3,\\\"column\\\":31,\\\"nodeType\\\":\\\"ArrowFunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":18,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":29,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":34,\\\"fix\\\":{\\\"range\\\":[198,203],\\\"text\\\":\\\"\\\\\\\"md5\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":10,\\\"column\\\":36,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":10,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[290,295],\\\"text\\\":\\\"\\\\\\\"hex\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":12,\\\"column\\\":30,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":12,\\\"endColumn\\\":33,\\\"fix\\\":{\\\"range\\\":[329,332],\\\"text\\\":\\\"\\\\\\\"0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":18,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":19,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[442,442],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":7,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":6,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { createHash } = require('node:crypto')\\\\n\\\\nconst findSuffixOfSecretKey = (secretKey, numberOfZeroesInFrontOfHash) => {\\\\n  let suffixOfSecretKey = 1;\\\\n\\\\n  while (true) {\\\\n    const hash = createHash('md5');\\\\n    hash.update(secretKey + suffixOfSecretKey);\\\\n\\\\n    const hashValue = (hash.digest('hex'));\\\\n\\\\n    if (hashValue.startsWith('0'.repeat(numberOfZeroesInFrontOfHash))) {\\\\n      return suffixOfSecretKey;\\\\n    }\\\\n\\\\n    suffixOfSecretKey++;\\\\n  }\\\\n}\\\\n\\\\nexports.findSuffixOfSecretKey = findSuffixOfSecretKey;\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/manjeetsharma0796/advent-of-code-2015/day-4/test/answer-key-finder-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":24,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":32,\\\"fix\\\":{\\\"range\\\":[70,78],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":43,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":69,\\\"fix\\\":{\\\"range\\\":[123,149],\\\"text\\\":\\\"\\\\\\\"../src/answer-key-finder\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":33,\\\"fix\\\":{\\\"range\\\":[162,185],\\\"text\\\":\\\"\\\\\\\"findSuffixOfSecretKey\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":78,\\\"fix\\\":{\\\"range\\\":[200,272],\\\"text\\\":\\\"\\\\\\\"Should find suffix of secret key whose md5 hash has one leading zeroes\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":46,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":49,\\\"fix\\\":{\\\"range\\\":[327,330],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":10,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":10,\\\"endColumn\\\":79,\\\"fix\\\":{\\\"range\\\":[353,426],\\\"text\\\":\\\"\\\\\\\"Should find suffix of secret key whose md5 hash has five leading zeroes\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":11,\\\"column\\\":46,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":11,\\\"endColumn\\\":54,\\\"fix\\\":{\\\"range\\\":[481,489],\\\"text\\\":\\\"\\\\\\\"abcdef\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":12,\\\"column\\\":46,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":12,\\\"endColumn\\\":56,\\\"fix\\\":{\\\"range\\\":[549,559],\\\"text\\\":\\\"\\\\\\\"yzbqklnj\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":15,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":15,\\\"endColumn\\\":78,\\\"fix\\\":{\\\"range\\\":[586,658],\\\"text\\\":\\\"\\\\\\\"Should find suffix of secret key whose md5 hash has six leading zeroes\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":16,\\\"column\\\":46,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":16,\\\"endColumn\\\":56,\\\"fix\\\":{\\\"range\\\":[713,723],\\\"text\\\":\\\"\\\\\\\"yzbqklnj\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":11,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":11,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst assert = require('assert');\\\\nconst { findSuffixOfSecretKey } = require('../src/answer-key-finder');\\\\n\\\\ndescribe('findSuffixOfSecretKey', () => {\\\\n  it('Should find suffix of secret key whose md5 hash has one leading zeroes', () => {\\\\n    assert.strictEqual(findSuffixOfSecretKey('a', 1), 27);\\\\n  });\\\\n\\\\n  it('Should find suffix of secret key whose md5 hash has five leading zeroes', () => {\\\\n    assert.strictEqual(findSuffixOfSecretKey('abcdef', 5), 609043);\\\\n    assert.strictEqual(findSuffixOfSecretKey('yzbqklnj', 5), 282749);\\\\n  });\\\\n\\\\n  it('Should find suffix of secret key whose md5 hash has six leading zeroes', () => {\\\\n    assert.strictEqual(findSuffixOfSecretKey('yzbqklnj', 6), 9962624);\\\\n  });\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/manjeetsharma0796/advent-of-code-2015/day-5/main.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[19,23],\\\"text\\\":\\\"\\\\\\\"fs\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":39,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":70,\\\"fix\\\":{\\\"range\\\":[182,213],\\\"text\\\":\\\"\\\\\\\"./resources/strings-input.txt\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":72,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":79,\\\"fix\\\":{\\\"range\\\":[215,222],\\\"text\\\":\\\"\\\\\\\"utf-8\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[262,266],\\\"text\\\":\\\"\\\\\\\"\\\\\\\\n\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":55,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":59,\\\"fix\\\":{\\\"range\\\":[323,327],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":61,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":65,\\\"fix\\\":{\\\"range\\\":[329,333],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":67,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":71,\\\"fix\\\":{\\\"range\\\":[335,339],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":73,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":77,\\\"fix\\\":{\\\"range\\\":[341,345],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":11,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":11,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":11,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":11,\\\"endColumn\\\":54,\\\"fix\\\":{\\\"range\\\":[439,478],\\\"text\\\":\\\"\\\\\\\"Part 1: Total nice string present is \\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":12,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":12,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":12,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":12,\\\"endColumn\\\":59,\\\"fix\\\":{\\\"range\\\":[513,557],\\\"text\\\":\\\"\\\\\\\"Part 2: Total nice string by new rules is \\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":14,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":15,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[590,590],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":11,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":11,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const fs = require('fs');\\\\nconst { countNiceStrings, countNiceStringsWithNewRule } = require(\\\\\\\"./src/nice-string-counter\\\\\\\");\\\\n\\\\nconst main = () => {\\\\n  const fileContent = fs.readFileSync('./resources/strings-input.txt', 'utf-8');\\\\n\\\\n  const strings = fileContent.split('\\\\\\\\n');\\\\n  const niceStringsCount = countNiceStrings(strings, ['ab', 'cd', 'pq', 'xy']);\\\\n  const niceStringWithNewRuleCount = countNiceStringsWithNewRule(strings);\\\\n\\\\n  console.log('Part 1: Total nice string present is ', niceStringsCount);\\\\n  console.log('Part 2: Total nice string by new rules is ', niceStringWithNewRuleCount);\\\\n\\\\n}\\\\n\\\\nmain();\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/manjeetsharma0796/advent-of-code-2015/day-5/src/nice-string-counter.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Arrow function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":1,\\\"column\\\":31,\\\"nodeType\\\":\\\"ArrowFunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":26,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"no-shadow\\\",\\\"severity\\\":2,\\\"message\\\":\\\"'stringSummary' is already declared in the upper scope on line 6 column 9.\\\",\\\"line\\\":6,\\\"column\\\":45,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"noShadow\\\",\\\"endLine\\\":6,\\\"endColumn\\\":58},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":16,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":16,\\\"endColumn\\\":22,\\\"fix\\\":{\\\"range\\\":[345,348],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":16,\\\"column\\\":24,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":16,\\\"endColumn\\\":27,\\\"fix\\\":{\\\"range\\\":[350,353],\\\"text\\\":\\\"\\\\\\\"e\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":16,\\\"column\\\":29,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":16,\\\"endColumn\\\":32,\\\"fix\\\":{\\\"range\\\":[355,358],\\\"text\\\":\\\"\\\\\\\"i\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":16,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":16,\\\"endColumn\\\":37,\\\"fix\\\":{\\\"range\\\":[360,363],\\\"text\\\":\\\"\\\\\\\"o\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":16,\\\"column\\\":39,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":16,\\\"endColumn\\\":42,\\\"fix\\\":{\\\"range\\\":[365,368],\\\"text\\\":\\\"\\\\\\\"u\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":23,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":24,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[508,508],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":26,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":27,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[551,551],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Arrow function has a complexity of 4. Maximum allowed is 2.\\\",\\\"line\\\":28,\\\"column\\\":32,\\\"nodeType\\\":\\\"ArrowFunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":45,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":45,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":46,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[909,909],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":51,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":52,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1118,1118],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":65,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":66,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1564,1564],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-param-reassign\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Assignment to function parameter 'niceStringsCount'.\\\",\\\"line\\\":70,\\\"column\\\":7,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"assignmentToFunctionParam\\\",\\\"endLine\\\":70,\\\"endColumn\\\":23},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":75,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":76,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1813,1813],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":79,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":80,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1905,1905],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":83,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":84,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[1994,1994],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":91,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":92,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2273,2273],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"no-param-reassign\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Assignment to function parameter 'niceStringsCount'.\\\",\\\"line\\\":96,\\\"column\\\":7,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"assignmentToFunctionParam\\\",\\\"endLine\\\":96,\\\"endColumn\\\":23},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":101,\\\"column\\\":2,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":102,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[2500,2500],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":113,\\\"column\\\":2,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"fix\\\":{\\\"range\\\":[2766,2766],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":21,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":16,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const areThreeVowelsPresent = (string) => {\\\\n  if (!string) {\\\\n    return false;\\\\n  }\\\\n\\\\n  const stringSummary = [...string].reduce((stringSummary, letter) => {\\\\n    if (stringSummary[letter] === undefined) {\\\\n      stringSummary[letter] = 1;\\\\n    } else {\\\\n      stringSummary[letter] += 1;\\\\n    }\\\\n\\\\n    return stringSummary;\\\\n  }, {});\\\\n\\\\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\\\\n  let vowelCount = 0;\\\\n\\\\n  vowels.forEach((vowel) => {\\\\n    if (stringSummary[vowel]) {\\\\n      vowelCount += stringSummary[vowel];\\\\n    }\\\\n  })\\\\n\\\\n  return vowelCount < 3 ? false : true;\\\\n}\\\\n\\\\nconst isAnyLetterRepeatInRow = (string) => {\\\\n  if (!string) return false;\\\\n\\\\n  let letterIndex = 0;\\\\n\\\\n  while (letterIndex < string.length - 1) {\\\\n    const currentLetter = string[letterIndex];\\\\n    const succedingLetter = string[letterIndex + 1];\\\\n\\\\n    if (currentLetter === succedingLetter) {\\\\n      return true;\\\\n    }\\\\n\\\\n    letterIndex++;\\\\n  }\\\\n\\\\n  return false;\\\\n}\\\\n\\\\nconst isAnyRestrictedSubstringPresent = (stringToCheck, restrictedSubstrings) => {\\\\n  if (!stringToCheck) return false;\\\\n\\\\n  return restrictedSubstrings.some((subString) => stringToCheck.includes(subString));\\\\n}\\\\n\\\\nconst isStringNice = (string, restrictedSubstring) => {\\\\n  if (!string) return false;\\\\n\\\\n  const firstCriteria = areThreeVowelsPresent(string);\\\\n  const secondCriteria = isAnyLetterRepeatInRow(string);\\\\n  const thirdCriteria = !isAnyRestrictedSubstringPresent(string, restrictedSubstring);\\\\n\\\\n  const criterias = [firstCriteria, secondCriteria, thirdCriteria];\\\\n\\\\n  const allCriteriaMeet = criterias.every((value) => value);\\\\n\\\\n  return allCriteriaMeet;\\\\n}\\\\n\\\\nconst countNiceStrings = (strings, restrictedSubstrings) => {\\\\n  return strings.reduce((niceStringsCount, string) => {\\\\n    if (isStringNice(string, restrictedSubstrings)) {\\\\n      niceStringsCount += 1;\\\\n    }\\\\n\\\\n    return niceStringsCount;\\\\n  }, 0);\\\\n}\\\\n\\\\nconst isPairOfLettersRepeatedTwice = (string) => {\\\\n  return (/(..).*\\\\\\\\1/).test(string);  \\\\n}\\\\n\\\\nconst anyLetterRepeatedAfterALetter = (string) => {\\\\n  return (/(.).\\\\\\\\1/).test(string);\\\\n}\\\\n\\\\nconst isStringNiceWithNewRule = (string) => {\\\\n  const firstCriteria = isPairOfLettersRepeatedTwice(string);\\\\n  const secondCriteria = anyLetterRepeatedAfterALetter(string);\\\\n  const criterias = [firstCriteria, secondCriteria];\\\\n\\\\n  return criterias.every((criteria) => criteria);\\\\n}\\\\n\\\\nconst countNiceStringsWithNewRule = (strings) => {\\\\n  return strings.reduce((niceStringsCount, string) => {\\\\n    if (isStringNiceWithNewRule(string)) {\\\\n      niceStringsCount += 1;\\\\n    }\\\\n\\\\n    return niceStringsCount;\\\\n  }, 0);\\\\n}\\\\n\\\\nmodule.exports = {\\\\n  areThreeVowelsPresent,\\\\n  isAnyLetterRepeatInRow,\\\\n  isAnyRestrictedSubstringPresent,\\\\n  isStringNice,\\\\n  countNiceStrings,\\\\n  isPairOfLettersRepeatedTwice,\\\\n  anyLetterRepeatedAfterALetter,\\\\n  isStringNiceWithNewRule,\\\\n  countNiceStringsWithNewRule\\\\n}\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/manjeetsharma0796/advent-of-code-2015/day-5/test/nice-string-counter-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":24,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":32,\\\"fix\\\":{\\\"range\\\":[70,78],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":13,\\\"column\\\":13,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":13,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[344,372],\\\"text\\\":\\\"\\\\\\\"../src/nice-string-counter\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":15,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":15,\\\"endColumn\\\":33,\\\"fix\\\":{\\\"range\\\":[385,408],\\\"text\\\":\\\"\\\\\\\"areThreeVowelsPresent\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":16,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":16,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[423,462],\\\"text\\\":\\\"\\\\\\\"Should be false as no string provided\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":20,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":20,\\\"endColumn\\\":56,\\\"fix\\\":{\\\"range\\\":[540,590],\\\"text\\\":\\\"\\\\\\\"Should be false as string provided has no vowels\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":21,\\\"column\\\":46,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":21,\\\"endColumn\\\":50,\\\"fix\\\":{\\\"range\\\":[645,649],\\\"text\\\":\\\"\\\\\\\"bc\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":24,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":24,\\\"endColumn\\\":62,\\\"fix\\\":{\\\"range\\\":[672,728],\\\"text\\\":\\\"\\\\\\\"Should be false as string provided has two vowels only\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":25,\\\"column\\\":46,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":25,\\\"endColumn\\\":51,\\\"fix\\\":{\\\"range\\\":[783,788],\\\"text\\\":\\\"\\\\\\\"aep\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":28,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":28,\\\"endColumn\\\":63,\\\"fix\\\":{\\\"range\\\":[811,868],\\\"text\\\":\\\"\\\\\\\"Should be true as string provided has three vowels only\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":29,\\\"column\\\":46,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":29,\\\"endColumn\\\":52,\\\"fix\\\":{\\\"range\\\":[923,929],\\\"text\\\":\\\"\\\\\\\"aepo\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":32,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":32,\\\"endColumn\\\":68,\\\"fix\\\":{\\\"range\\\":[951,1013],\\\"text\\\":\\\"\\\\\\\"Should be true as string provided has three identical vowels\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":33,\\\"column\\\":46,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":33,\\\"endColumn\\\":51,\\\"fix\\\":{\\\"range\\\":[1068,1073],\\\"text\\\":\\\"\\\\\\\"aaa\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":37,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":37,\\\"endColumn\\\":34,\\\"fix\\\":{\\\"range\\\":[1103,1127],\\\"text\\\":\\\"\\\\\\\"isAnyLetterRepeatInRow\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":38,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":38,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[1142,1181],\\\"text\\\":\\\"\\\\\\\"Should be false as no string provided\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":42,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":42,\\\"endColumn\\\":73,\\\"fix\\\":{\\\"range\\\":[1260,1327],\\\"text\\\":\\\"\\\\\\\"Should be false as string provided has no repeating letter in row\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":43,\\\"column\\\":47,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":43,\\\"endColumn\\\":52,\\\"fix\\\":{\\\"range\\\":[1383,1388],\\\"text\\\":\\\"\\\\\\\"seb\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":44,\\\"column\\\":47,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":44,\\\"endColumn\\\":53,\\\"fix\\\":{\\\"range\\\":[1445,1451],\\\"text\\\":\\\"\\\\\\\"sefs\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":47,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":47,\\\"endColumn\\\":69,\\\"fix\\\":{\\\"range\\\":[1474,1537],\\\"text\\\":\\\"\\\\\\\"Should be true as string provided has repeating letter in row\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":48,\\\"column\\\":47,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":48,\\\"endColumn\\\":53,\\\"fix\\\":{\\\"range\\\":[1593,1599],\\\"text\\\":\\\"\\\\\\\"sseb\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":49,\\\"column\\\":47,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":49,\\\"endColumn\\\":53,\\\"fix\\\":{\\\"range\\\":[1655,1661],\\\"text\\\":\\\"\\\\\\\"sebb\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":50,\\\"column\\\":47,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":50,\\\"endColumn\\\":54,\\\"fix\\\":{\\\"range\\\":[1717,1724],\\\"text\\\":\\\"\\\\\\\"seebb\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":54,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":54,\\\"endColumn\\\":43,\\\"fix\\\":{\\\"range\\\":[1754,1787],\\\"text\\\":\\\"\\\\\\\"isAnyRestrictedSubstringPresent\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":55,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":55,\\\"endColumn\\\":70,\\\"fix\\\":{\\\"range\\\":[1802,1866],\\\"text\\\":\\\"\\\\\\\"Should be false as string provided has no restricted substring\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":56,\\\"column\\\":56,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":56,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[1931,1933],\\\"text\\\":\\\"\\\\\\\"\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":56,\\\"column\\\":61,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":56,\\\"endColumn\\\":65,\\\"fix\\\":{\\\"range\\\":[1936,1940],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":56,\\\"column\\\":67,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":56,\\\"endColumn\\\":71,\\\"fix\\\":{\\\"range\\\":[1942,1946],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":56,\\\"column\\\":73,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":56,\\\"endColumn\\\":77,\\\"fix\\\":{\\\"range\\\":[1948,1952],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":56,\\\"column\\\":79,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":56,\\\"endColumn\\\":83,\\\"fix\\\":{\\\"range\\\":[1954,1958],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":57,\\\"column\\\":56,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":57,\\\"endColumn\\\":61,\\\"fix\\\":{\\\"range\\\":[2025,2030],\\\"text\\\":\\\"\\\\\\\"aob\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":57,\\\"column\\\":64,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":57,\\\"endColumn\\\":68,\\\"fix\\\":{\\\"range\\\":[2033,2037],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":57,\\\"column\\\":70,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":57,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[2039,2043],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":57,\\\"column\\\":76,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":57,\\\"endColumn\\\":80,\\\"fix\\\":{\\\"range\\\":[2045,2049],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":57,\\\"column\\\":82,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":57,\\\"endColumn\\\":86,\\\"fix\\\":{\\\"range\\\":[2051,2055],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":60,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":60,\\\"endColumn\\\":66,\\\"fix\\\":{\\\"range\\\":[2079,2139],\\\"text\\\":\\\"\\\\\\\"Should be true as string provided has restricted substring\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":61,\\\"column\\\":56,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":61,\\\"endColumn\\\":60,\\\"fix\\\":{\\\"range\\\":[2204,2208],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":61,\\\"column\\\":63,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":61,\\\"endColumn\\\":67,\\\"fix\\\":{\\\"range\\\":[2211,2215],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":61,\\\"column\\\":69,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":61,\\\"endColumn\\\":73,\\\"fix\\\":{\\\"range\\\":[2217,2221],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":61,\\\"column\\\":75,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":61,\\\"endColumn\\\":79,\\\"fix\\\":{\\\"range\\\":[2223,2227],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":61,\\\"column\\\":81,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":61,\\\"endColumn\\\":85,\\\"fix\\\":{\\\"range\\\":[2229,2233],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":62,\\\"column\\\":56,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":62,\\\"endColumn\\\":62,\\\"fix\\\":{\\\"range\\\":[2299,2305],\\\"text\\\":\\\"\\\\\\\"cicd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":62,\\\"column\\\":65,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":62,\\\"endColumn\\\":69,\\\"fix\\\":{\\\"range\\\":[2308,2312],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":62,\\\"column\\\":71,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":62,\\\"endColumn\\\":75,\\\"fix\\\":{\\\"range\\\":[2314,2318],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":62,\\\"column\\\":77,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":62,\\\"endColumn\\\":81,\\\"fix\\\":{\\\"range\\\":[2320,2324],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":62,\\\"column\\\":83,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":62,\\\"endColumn\\\":87,\\\"fix\\\":{\\\"range\\\":[2326,2330],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":63,\\\"column\\\":56,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":63,\\\"endColumn\\\":62,\\\"fix\\\":{\\\"range\\\":[2396,2402],\\\"text\\\":\\\"\\\\\\\"cpqi\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":63,\\\"column\\\":65,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":63,\\\"endColumn\\\":69,\\\"fix\\\":{\\\"range\\\":[2405,2409],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":63,\\\"column\\\":71,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":63,\\\"endColumn\\\":75,\\\"fix\\\":{\\\"range\\\":[2411,2415],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":63,\\\"column\\\":77,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":63,\\\"endColumn\\\":81,\\\"fix\\\":{\\\"range\\\":[2417,2421],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":63,\\\"column\\\":83,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":63,\\\"endColumn\\\":87,\\\"fix\\\":{\\\"range\\\":[2423,2427],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":64,\\\"column\\\":56,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":64,\\\"endColumn\\\":62,\\\"fix\\\":{\\\"range\\\":[2493,2499],\\\"text\\\":\\\"\\\\\\\"cxyd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":64,\\\"column\\\":65,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":64,\\\"endColumn\\\":69,\\\"fix\\\":{\\\"range\\\":[2502,2506],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":64,\\\"column\\\":71,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":64,\\\"endColumn\\\":75,\\\"fix\\\":{\\\"range\\\":[2508,2512],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":64,\\\"column\\\":77,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":64,\\\"endColumn\\\":81,\\\"fix\\\":{\\\"range\\\":[2514,2518],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":64,\\\"column\\\":83,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":64,\\\"endColumn\\\":87,\\\"fix\\\":{\\\"range\\\":[2520,2524],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":68,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":68,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[2555,2569],\\\"text\\\":\\\"\\\\\\\"isStringNice\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":69,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":69,\\\"endColumn\\\":57,\\\"fix\\\":{\\\"range\\\":[2584,2635],\\\"text\\\":\\\"\\\\\\\"Nice String count should be zero for empty string\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":70,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":70,\\\"endColumn\\\":39,\\\"fix\\\":{\\\"range\\\":[2681,2683],\\\"text\\\":\\\"\\\\\\\"\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":70,\\\"column\\\":42,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":70,\\\"endColumn\\\":46,\\\"fix\\\":{\\\"range\\\":[2686,2690],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":70,\\\"column\\\":48,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":70,\\\"endColumn\\\":52,\\\"fix\\\":{\\\"range\\\":[2692,2696],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":70,\\\"column\\\":54,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":70,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[2698,2702],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":70,\\\"column\\\":60,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":70,\\\"endColumn\\\":64,\\\"fix\\\":{\\\"range\\\":[2704,2708],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":73,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":73,\\\"endColumn\\\":93,\\\"fix\\\":{\\\"range\\\":[2732,2819],\\\"text\\\":\\\"\\\\\\\"Nice String count should be zero for string provided that fails to meets all criteria\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":74,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":74,\\\"endColumn\\\":39,\\\"fix\\\":{\\\"range\\\":[2865,2867],\\\"text\\\":\\\"\\\\\\\"\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":74,\\\"column\\\":42,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":74,\\\"endColumn\\\":46,\\\"fix\\\":{\\\"range\\\":[2870,2874],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":74,\\\"column\\\":48,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":74,\\\"endColumn\\\":52,\\\"fix\\\":{\\\"range\\\":[2876,2880],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":74,\\\"column\\\":54,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":74,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[2882,2886],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":74,\\\"column\\\":60,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":74,\\\"endColumn\\\":64,\\\"fix\\\":{\\\"range\\\":[2888,2892],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":75,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":75,\\\"endColumn\\\":55,\\\"fix\\\":{\\\"range\\\":[2940,2958],\\\"text\\\":\\\"\\\\\\\"jchzalrnumimnmhp\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":75,\\\"column\\\":58,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":75,\\\"endColumn\\\":62,\\\"fix\\\":{\\\"range\\\":[2961,2965],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":75,\\\"column\\\":64,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":75,\\\"endColumn\\\":68,\\\"fix\\\":{\\\"range\\\":[2967,2971],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":75,\\\"column\\\":70,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":75,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[2973,2977],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":75,\\\"column\\\":76,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":75,\\\"endColumn\\\":80,\\\"fix\\\":{\\\"range\\\":[2979,2983],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":76,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":76,\\\"endColumn\\\":55,\\\"fix\\\":{\\\"range\\\":[3031,3049],\\\"text\\\":\\\"\\\\\\\"haegwjzuvuyypxyu\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":76,\\\"column\\\":58,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":76,\\\"endColumn\\\":62,\\\"fix\\\":{\\\"range\\\":[3052,3056],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":76,\\\"column\\\":64,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":76,\\\"endColumn\\\":68,\\\"fix\\\":{\\\"range\\\":[3058,3062],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":76,\\\"column\\\":70,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":76,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[3064,3068],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":76,\\\"column\\\":76,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":76,\\\"endColumn\\\":80,\\\"fix\\\":{\\\"range\\\":[3070,3074],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":77,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":77,\\\"endColumn\\\":55,\\\"fix\\\":{\\\"range\\\":[3122,3140],\\\"text\\\":\\\"\\\\\\\"dvszwmarrgswjxmb\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":77,\\\"column\\\":58,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":77,\\\"endColumn\\\":62,\\\"fix\\\":{\\\"range\\\":[3143,3147],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":77,\\\"column\\\":64,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":77,\\\"endColumn\\\":68,\\\"fix\\\":{\\\"range\\\":[3149,3153],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":77,\\\"column\\\":70,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":77,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[3155,3159],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":77,\\\"column\\\":76,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":77,\\\"endColumn\\\":80,\\\"fix\\\":{\\\"range\\\":[3161,3165],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":80,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":80,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[3189,3257],\\\"text\\\":\\\"\\\\\\\"Nice String count should be one for string that meets all criteria\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":81,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":81,\\\"endColumn\\\":55,\\\"fix\\\":{\\\"range\\\":[3303,3321],\\\"text\\\":\\\"\\\\\\\"ugknbfddgicrmopn\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":81,\\\"column\\\":58,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":81,\\\"endColumn\\\":62,\\\"fix\\\":{\\\"range\\\":[3324,3328],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":81,\\\"column\\\":64,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":81,\\\"endColumn\\\":68,\\\"fix\\\":{\\\"range\\\":[3330,3334],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":81,\\\"column\\\":70,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":81,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[3336,3340],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":81,\\\"column\\\":76,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":81,\\\"endColumn\\\":80,\\\"fix\\\":{\\\"range\\\":[3342,3346],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":82,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":82,\\\"endColumn\\\":42,\\\"fix\\\":{\\\"range\\\":[3393,3398],\\\"text\\\":\\\"\\\\\\\"aaa\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":82,\\\"column\\\":45,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":82,\\\"endColumn\\\":49,\\\"fix\\\":{\\\"range\\\":[3401,3405],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":82,\\\"column\\\":51,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":82,\\\"endColumn\\\":55,\\\"fix\\\":{\\\"range\\\":[3407,3411],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":82,\\\"column\\\":57,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":82,\\\"endColumn\\\":61,\\\"fix\\\":{\\\"range\\\":[3413,3417],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":82,\\\"column\\\":63,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":82,\\\"endColumn\\\":67,\\\"fix\\\":{\\\"range\\\":[3419,3423],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":86,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":86,\\\"endColumn\\\":27,\\\"fix\\\":{\\\"range\\\":[3454,3471],\\\"text\\\":\\\"\\\\\\\"countNiceString\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":87,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":87,\\\"endColumn\\\":63,\\\"fix\\\":{\\\"range\\\":[3486,3543],\\\"text\\\":\\\"\\\\\\\"count should be zero as the string provided is not nice\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":88,\\\"column\\\":42,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":88,\\\"endColumn\\\":44,\\\"fix\\\":{\\\"range\\\":[3594,3596],\\\"text\\\":\\\"\\\\\\\"\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":88,\\\"column\\\":48,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":88,\\\"endColumn\\\":52,\\\"fix\\\":{\\\"range\\\":[3600,3604],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":88,\\\"column\\\":54,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":88,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[3606,3610],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":88,\\\"column\\\":60,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":88,\\\"endColumn\\\":64,\\\"fix\\\":{\\\"range\\\":[3612,3616],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":88,\\\"column\\\":66,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":88,\\\"endColumn\\\":70,\\\"fix\\\":{\\\"range\\\":[3618,3622],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":89,\\\"column\\\":42,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":89,\\\"endColumn\\\":60,\\\"fix\\\":{\\\"range\\\":[3671,3689],\\\"text\\\":\\\"\\\\\\\"jchzalrnumimnmhp\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":89,\\\"column\\\":64,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":89,\\\"endColumn\\\":68,\\\"fix\\\":{\\\"range\\\":[3693,3697],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":89,\\\"column\\\":70,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":89,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[3699,3703],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":89,\\\"column\\\":76,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":89,\\\"endColumn\\\":80,\\\"fix\\\":{\\\"range\\\":[3705,3709],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":89,\\\"column\\\":82,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":89,\\\"endColumn\\\":86,\\\"fix\\\":{\\\"range\\\":[3711,3715],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":90,\\\"column\\\":42,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":90,\\\"endColumn\\\":60,\\\"fix\\\":{\\\"range\\\":[3764,3782],\\\"text\\\":\\\"\\\\\\\"haegwjzuvuyypxyu\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":90,\\\"column\\\":64,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":90,\\\"endColumn\\\":68,\\\"fix\\\":{\\\"range\\\":[3786,3790],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":90,\\\"column\\\":70,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":90,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[3792,3796],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":90,\\\"column\\\":76,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":90,\\\"endColumn\\\":80,\\\"fix\\\":{\\\"range\\\":[3798,3802],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":90,\\\"column\\\":82,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":90,\\\"endColumn\\\":86,\\\"fix\\\":{\\\"range\\\":[3804,3808],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":91,\\\"column\\\":42,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":91,\\\"endColumn\\\":60,\\\"fix\\\":{\\\"range\\\":[3857,3875],\\\"text\\\":\\\"\\\\\\\"dvszwmarrgswjxmb\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":91,\\\"column\\\":64,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":91,\\\"endColumn\\\":68,\\\"fix\\\":{\\\"range\\\":[3879,3883],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":91,\\\"column\\\":70,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":91,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[3885,3889],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":91,\\\"column\\\":76,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":91,\\\"endColumn\\\":80,\\\"fix\\\":{\\\"range\\\":[3891,3895],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":91,\\\"column\\\":82,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":91,\\\"endColumn\\\":86,\\\"fix\\\":{\\\"range\\\":[3897,3901],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":94,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":94,\\\"endColumn\\\":75,\\\"fix\\\":{\\\"range\\\":[3921,3990],\\\"text\\\":\\\"\\\\\\\"count should be non zero value as strings provided has nice strings\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":95,\\\"column\\\":42,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":95,\\\"endColumn\\\":60,\\\"fix\\\":{\\\"range\\\":[4041,4059],\\\"text\\\":\\\"\\\\\\\"ugknbfddgicrmopn\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":95,\\\"column\\\":62,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":95,\\\"endColumn\\\":69,\\\"fix\\\":{\\\"range\\\":[4061,4068],\\\"text\\\":\\\"\\\\\\\"abckd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":95,\\\"column\\\":73,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":95,\\\"endColumn\\\":77,\\\"fix\\\":{\\\"range\\\":[4072,4076],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":95,\\\"column\\\":79,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":95,\\\"endColumn\\\":83,\\\"fix\\\":{\\\"range\\\":[4078,4082],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":95,\\\"column\\\":85,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":95,\\\"endColumn\\\":89,\\\"fix\\\":{\\\"range\\\":[4084,4088],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":95,\\\"column\\\":91,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":95,\\\"endColumn\\\":95,\\\"fix\\\":{\\\"range\\\":[4090,4094],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":96,\\\"column\\\":42,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":96,\\\"endColumn\\\":60,\\\"fix\\\":{\\\"range\\\":[4143,4161],\\\"text\\\":\\\"\\\\\\\"ugknbfddgicrmopn\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":96,\\\"column\\\":62,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":96,\\\"endColumn\\\":71,\\\"fix\\\":{\\\"range\\\":[4163,4172],\\\"text\\\":\\\"\\\\\\\"aaaniio\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":96,\\\"column\\\":73,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":96,\\\"endColumn\\\":80,\\\"fix\\\":{\\\"range\\\":[4174,4181],\\\"text\\\":\\\"\\\\\\\"abckd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":96,\\\"column\\\":84,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":96,\\\"endColumn\\\":88,\\\"fix\\\":{\\\"range\\\":[4185,4189],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":96,\\\"column\\\":90,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":96,\\\"endColumn\\\":94,\\\"fix\\\":{\\\"range\\\":[4191,4195],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":96,\\\"column\\\":96,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":96,\\\"endColumn\\\":100,\\\"fix\\\":{\\\"range\\\":[4197,4201],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":96,\\\"column\\\":102,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":96,\\\"endColumn\\\":106,\\\"fix\\\":{\\\"range\\\":[4203,4207],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":100,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":100,\\\"endColumn\\\":40,\\\"fix\\\":{\\\"range\\\":[4235,4265],\\\"text\\\":\\\"\\\\\\\"isPairOfLettersRepeatedTwice\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":101,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":101,\\\"endColumn\\\":77,\\\"fix\\\":{\\\"range\\\":[4280,4351],\\\"text\\\":\\\"\\\\\\\"should be false as string provided is has no pair of letters repeated\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":102,\\\"column\\\":53,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":102,\\\"endColumn\\\":56,\\\"fix\\\":{\\\"range\\\":[4413,4416],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":103,\\\"column\\\":53,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":103,\\\"endColumn\\\":57,\\\"fix\\\":{\\\"range\\\":[4479,4483],\\\"text\\\":\\\"\\\\\\\"ac\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":104,\\\"column\\\":53,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":104,\\\"endColumn\\\":57,\\\"fix\\\":{\\\"range\\\":[4546,4550],\\\"text\\\":\\\"\\\\\\\"aa\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":105,\\\"column\\\":53,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":105,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[4613,4618],\\\"text\\\":\\\"\\\\\\\"aaa\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":108,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":108,\\\"endColumn\\\":73,\\\"fix\\\":{\\\"range\\\":[4641,4708],\\\"text\\\":\\\"\\\\\\\"should be true as string provided is has pair of letters repeated\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":109,\\\"column\\\":53,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":109,\\\"endColumn\\\":59,\\\"fix\\\":{\\\"range\\\":[4770,4776],\\\"text\\\":\\\"\\\\\\\"aaaa\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":110,\\\"column\\\":53,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":110,\\\"endColumn\\\":59,\\\"fix\\\":{\\\"range\\\":[4838,4844],\\\"text\\\":\\\"\\\\\\\"xyxy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":111,\\\"column\\\":53,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":111,\\\"endColumn\\\":65,\\\"fix\\\":{\\\"range\\\":[4906,4918],\\\"text\\\":\\\"\\\\\\\"aabcdefgaa\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":115,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":115,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[4948,4979],\\\"text\\\":\\\"\\\\\\\"anyLetterRepeatedAfterALetter\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":116,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":116,\\\"endColumn\\\":80,\\\"fix\\\":{\\\"range\\\":[4994,5068],\\\"text\\\":\\\"\\\\\\\"Should be false as string provided has no letter repeated after a letter\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":117,\\\"column\\\":54,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":117,\\\"endColumn\\\":57,\\\"fix\\\":{\\\"range\\\":[5131,5134],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":118,\\\"column\\\":54,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":118,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[5198,5202],\\\"text\\\":\\\"\\\\\\\"aa\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":119,\\\"column\\\":54,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":119,\\\"endColumn\\\":61,\\\"fix\\\":{\\\"range\\\":[5266,5273],\\\"text\\\":\\\"\\\\\\\"aabca\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":122,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":122,\\\"endColumn\\\":76,\\\"fix\\\":{\\\"range\\\":[5296,5366],\\\"text\\\":\\\"\\\\\\\"Should be true as string provided has letter repeated after a letter\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":123,\\\"column\\\":54,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":123,\\\"endColumn\\\":59,\\\"fix\\\":{\\\"range\\\":[5429,5434],\\\"text\\\":\\\"\\\\\\\"aba\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":124,\\\"column\\\":54,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":124,\\\"endColumn\\\":66,\\\"fix\\\":{\\\"range\\\":[5497,5509],\\\"text\\\":\\\"\\\\\\\"abcdefeghi\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":125,\\\"column\\\":54,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":125,\\\"endColumn\\\":72,\\\"fix\\\":{\\\"range\\\":[5572,5590],\\\"text\\\":\\\"\\\\\\\"qjhvhtzxzqqjkmpb\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":129,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":129,\\\"endColumn\\\":35,\\\"fix\\\":{\\\"range\\\":[5620,5645],\\\"text\\\":\\\"\\\\\\\"isStringNiceWithNewRule\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":130,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":130,\\\"endColumn\\\":97,\\\"fix\\\":{\\\"range\\\":[5660,5751],\\\"text\\\":\\\"\\\\\\\"Should be true as string provided has a pair repeated and exactly one letter between them\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":131,\\\"column\\\":48,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":131,\\\"endColumn\\\":66,\\\"fix\\\":{\\\"range\\\":[5808,5826],\\\"text\\\":\\\"\\\\\\\"qjhvhtzxzqqjkmpb\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":132,\\\"column\\\":48,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":132,\\\"endColumn\\\":55,\\\"fix\\\":{\\\"range\\\":[5883,5890],\\\"text\\\":\\\"\\\\\\\"xxyxx\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":135,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":135,\\\"endColumn\\\":99,\\\"fix\\\":{\\\"range\\\":[5912,6005],\\\"text\\\":\\\"\\\\\\\"Should be false because the string provided has no repeat with a single letter between them\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":136,\\\"column\\\":48,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":136,\\\"endColumn\\\":66,\\\"fix\\\":{\\\"range\\\":[6062,6080],\\\"text\\\":\\\"\\\\\\\"uurcxstgmygtbstg\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":137,\\\"column\\\":48,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":137,\\\"endColumn\\\":66,\\\"fix\\\":{\\\"range\\\":[6138,6156],\\\"text\\\":\\\"\\\\\\\"ieodomkazucvgmuy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":141,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":141,\\\"endColumn\\\":38,\\\"fix\\\":{\\\"range\\\":[6187,6215],\\\"text\\\":\\\"\\\\\\\"countNiceStringWithNewRule\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":142,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":142,\\\"endColumn\\\":63,\\\"fix\\\":{\\\"range\\\":[6230,6287],\\\"text\\\":\\\"\\\\\\\"count should be zero as the string provided is not nice\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":143,\\\"column\\\":53,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":143,\\\"endColumn\\\":55,\\\"fix\\\":{\\\"range\\\":[6349,6351],\\\"text\\\":\\\"\\\\\\\"\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":144,\\\"column\\\":53,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":144,\\\"endColumn\\\":71,\\\"fix\\\":{\\\"range\\\":[6412,6430],\\\"text\\\":\\\"\\\\\\\"uurcxstgmygtbstg\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":144,\\\"column\\\":73,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":144,\\\"endColumn\\\":91,\\\"fix\\\":{\\\"range\\\":[6432,6450],\\\"text\\\":\\\"\\\\\\\"ieodomkazucvgmuy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":147,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":147,\\\"endColumn\\\":75,\\\"fix\\\":{\\\"range\\\":[6470,6539],\\\"text\\\":\\\"\\\\\\\"count should be non zero value as strings provided has nice strings\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":148,\\\"column\\\":53,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":148,\\\"endColumn\\\":71,\\\"fix\\\":{\\\"range\\\":[6601,6619],\\\"text\\\":\\\"\\\\\\\"qjhvhtzxzqqjkmpb\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":149,\\\"column\\\":53,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":149,\\\"endColumn\\\":71,\\\"fix\\\":{\\\"range\\\":[6679,6697],\\\"text\\\":\\\"\\\\\\\"qjhvhtzxzqqjkmpb\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":149,\\\"column\\\":73,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":149,\\\"endColumn\\\":80,\\\"fix\\\":{\\\"range\\\":[6699,6706],\\\"text\\\":\\\"\\\\\\\"xxyxx\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":165,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":165,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst assert = require('assert');\\\\n\\\\nconst { areThreeVowelsPresent,\\\\n  isAnyLetterRepeatInRow,\\\\n  isAnyRestrictedSubstringPresent,\\\\n  isStringNice,\\\\n  countNiceStrings,\\\\n  isPairOfLettersRepeatedTwice,\\\\n  anyLetterRepeatedAfterALetter,\\\\n  isStringNiceWithNewRule,\\\\n  countNiceStringsWithNewRule\\\\n} = require('../src/nice-string-counter');\\\\n\\\\ndescribe('areThreeVowelsPresent', () => {\\\\n  it('Should be false as no string provided', () => {\\\\n    assert.strictEqual(areThreeVowelsPresent(), false);\\\\n  });\\\\n\\\\n  it('Should be false as string provided has no vowels', () => {\\\\n    assert.strictEqual(areThreeVowelsPresent('bc'), false);\\\\n  });\\\\n\\\\n  it('Should be false as string provided has two vowels only', () => {\\\\n    assert.strictEqual(areThreeVowelsPresent('aep'), false);\\\\n  });\\\\n\\\\n  it('Should be true as string provided has three vowels only', () => {\\\\n    assert.strictEqual(areThreeVowelsPresent('aepo'), true);\\\\n  });\\\\n\\\\n  it('Should be true as string provided has three identical vowels', () => {\\\\n    assert.strictEqual(areThreeVowelsPresent('aaa'), true);\\\\n  });\\\\n});\\\\n\\\\ndescribe('isAnyLetterRepeatInRow', () => {\\\\n  it('Should be false as no string provided', () => {\\\\n    assert.strictEqual(isAnyLetterRepeatInRow(), false);\\\\n  });\\\\n\\\\n  it('Should be false as string provided has no repeating letter in row', () => {\\\\n    assert.strictEqual(isAnyLetterRepeatInRow('seb'), false);\\\\n    assert.strictEqual(isAnyLetterRepeatInRow('sefs'), false);\\\\n  });\\\\n\\\\n  it('Should be true as string provided has repeating letter in row', () => {\\\\n    assert.strictEqual(isAnyLetterRepeatInRow('sseb'), true);\\\\n    assert.strictEqual(isAnyLetterRepeatInRow('sebb'), true);\\\\n    assert.strictEqual(isAnyLetterRepeatInRow('seebb'), true);\\\\n  });\\\\n});\\\\n\\\\ndescribe('isAnyRestrictedSubstringPresent', () => {\\\\n  it('Should be false as string provided has no restricted substring', () => {\\\\n    assert.strictEqual(isAnyRestrictedSubstringPresent('', ['ab', 'cd', 'pq', 'xy']), false);\\\\n    assert.strictEqual(isAnyRestrictedSubstringPresent('aob', ['ab', 'cd', 'pq', 'xy']), false);\\\\n  });\\\\n\\\\n  it('Should be true as string provided has restricted substring', () => {\\\\n    assert.strictEqual(isAnyRestrictedSubstringPresent('ab', ['ab', 'cd', 'pq', 'xy']), true);\\\\n    assert.strictEqual(isAnyRestrictedSubstringPresent('cicd', ['ab', 'cd', 'pq', 'xy']), true);\\\\n    assert.strictEqual(isAnyRestrictedSubstringPresent('cpqi', ['ab', 'cd', 'pq', 'xy']), true);\\\\n    assert.strictEqual(isAnyRestrictedSubstringPresent('cxyd', ['ab', 'cd', 'pq', 'xy']), true);\\\\n  });\\\\n});\\\\n\\\\ndescribe('isStringNice', () => {\\\\n  it('Nice String count should be zero for empty string', () => {\\\\n    assert.strictEqual(isStringNice('', ['ab', 'cd', 'pq', 'xy']), false);\\\\n  });\\\\n\\\\n  it('Nice String count should be zero for string provided that fails to meets all criteria', () => {\\\\n    assert.strictEqual(isStringNice('', ['ab', 'cd', 'pq', 'xy']), false);\\\\n    assert.strictEqual(isStringNice('jchzalrnumimnmhp', ['ab', 'cd', 'pq', 'xy']), false);\\\\n    assert.strictEqual(isStringNice('haegwjzuvuyypxyu', ['ab', 'cd', 'pq', 'xy']), false);\\\\n    assert.strictEqual(isStringNice('dvszwmarrgswjxmb', ['ab', 'cd', 'pq', 'xy']), false);\\\\n  });\\\\n\\\\n  it('Nice String count should be one for string that meets all criteria', () => {\\\\n    assert.strictEqual(isStringNice('ugknbfddgicrmopn', ['ab', 'cd', 'pq', 'xy']), true);\\\\n    assert.strictEqual(isStringNice('aaa', ['ab', 'cd', 'pq', 'xy']), true);\\\\n  });\\\\n});\\\\n\\\\ndescribe('countNiceString', () => {\\\\n  it('count should be zero as the string provided is not nice', () => {\\\\n    assert.strictEqual(countNiceStrings([''], ['ab', 'cd', 'pq', 'xy']), 0);\\\\n    assert.strictEqual(countNiceStrings(['jchzalrnumimnmhp'], ['ab', 'cd', 'pq', 'xy']), 0);\\\\n    assert.strictEqual(countNiceStrings(['haegwjzuvuyypxyu'], ['ab', 'cd', 'pq', 'xy']), 0);\\\\n    assert.strictEqual(countNiceStrings(['dvszwmarrgswjxmb'], ['ab', 'cd', 'pq', 'xy']), 0);\\\\n  });\\\\n\\\\n  it('count should be non zero value as strings provided has nice strings', () => {\\\\n    assert.strictEqual(countNiceStrings(['ugknbfddgicrmopn', 'abckd'], ['ab', 'cd', 'pq', 'xy']), 1);\\\\n    assert.strictEqual(countNiceStrings(['ugknbfddgicrmopn', 'aaaniio', 'abckd'], ['ab', 'cd', 'pq', 'xy']), 2);\\\\n  });\\\\n});\\\\n\\\\ndescribe('isPairOfLettersRepeatedTwice', () => {\\\\n  it('should be false as string provided is has no pair of letters repeated', () => {\\\\n    assert.strictEqual(isPairOfLettersRepeatedTwice('a'), false);\\\\n    assert.strictEqual(isPairOfLettersRepeatedTwice('ac'), false);\\\\n    assert.strictEqual(isPairOfLettersRepeatedTwice('aa'), false);\\\\n    assert.strictEqual(isPairOfLettersRepeatedTwice('aaa'), false);\\\\n  });\\\\n\\\\n  it('should be true as string provided is has pair of letters repeated', () => {\\\\n    assert.strictEqual(isPairOfLettersRepeatedTwice('aaaa'), true);\\\\n    assert.strictEqual(isPairOfLettersRepeatedTwice('xyxy'), true);\\\\n    assert.strictEqual(isPairOfLettersRepeatedTwice('aabcdefgaa'), true);\\\\n  });\\\\n});\\\\n\\\\ndescribe('anyLetterRepeatedAfterALetter', () => {\\\\n  it('Should be false as string provided has no letter repeated after a letter', () => {\\\\n    assert.strictEqual(anyLetterRepeatedAfterALetter('a'), false);\\\\n    assert.strictEqual(anyLetterRepeatedAfterALetter('aa'), false);\\\\n    assert.strictEqual(anyLetterRepeatedAfterALetter('aabca'), false);\\\\n  });\\\\n\\\\n  it('Should be true as string provided has letter repeated after a letter', () => {\\\\n    assert.strictEqual(anyLetterRepeatedAfterALetter('aba'), true);\\\\n    assert.strictEqual(anyLetterRepeatedAfterALetter('abcdefeghi'), true);\\\\n    assert.strictEqual(anyLetterRepeatedAfterALetter('qjhvhtzxzqqjkmpb'), true);\\\\n  });\\\\n});\\\\n\\\\ndescribe('isStringNiceWithNewRule', () => {\\\\n  it('Should be true as string provided has a pair repeated and exactly one letter between them', () => {\\\\n    assert.strictEqual(isStringNiceWithNewRule('qjhvhtzxzqqjkmpb'), true);\\\\n    assert.strictEqual(isStringNiceWithNewRule('xxyxx'), true);\\\\n  });\\\\n\\\\n  it('Should be false because the string provided has no repeat with a single letter between them', () => {\\\\n    assert.strictEqual(isStringNiceWithNewRule('uurcxstgmygtbstg'), false);\\\\n    assert.strictEqual(isStringNiceWithNewRule('ieodomkazucvgmuy'), false);\\\\n  });\\\\n});\\\\n\\\\ndescribe('countNiceStringWithNewRule', () => {\\\\n  it('count should be zero as the string provided is not nice', () => {\\\\n    assert.strictEqual(countNiceStringsWithNewRule([''],), 0);\\\\n    assert.strictEqual(countNiceStringsWithNewRule(['uurcxstgmygtbstg', 'ieodomkazucvgmuy']), 0);\\\\n  });\\\\n\\\\n  it('count should be non zero value as strings provided has nice strings', () => {\\\\n    assert.strictEqual(countNiceStringsWithNewRule(['qjhvhtzxzqqjkmpb']), 1);\\\\n    assert.strictEqual(countNiceStringsWithNewRule(['qjhvhtzxzqqjkmpb', 'xxyxx']), 2);\\\\n  });\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]}]\\n\""}],"b-rajkumar":[{"aoc-2015":"\"[{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-1/src/nql-p1.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":4,\\\"column\\\":5,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":4,\\\"endColumn\\\":8,\\\"fix\\\":{\\\"range\\\":[93,96],\\\"text\\\":\\\"\\\\\\\"(\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":5,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":8,\\\"fix\\\":{\\\"range\\\":[105,108],\\\"text\\\":\\\"\\\\\\\")\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[139,141],\\\"text\\\":\\\"\\\\\\\"\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"array-callback-return\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Array.prototype.forEach() expects no useless return value from arrow function.\\\",\\\"line\\\":7,\\\"column\\\":46,\\\"nodeType\\\":\\\"ArrowFunctionExpression\\\",\\\"messageId\\\":\\\"expectedNoReturnValue\\\",\\\"endLine\\\":7,\\\"endColumn\\\":48}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":4,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":3,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const getFloorNumber = (instructions) => {\\\\n  let currentFloor = 0;\\\\n  const movements = {\\\\n    '(': 1,\\\\n    ')': -1\\\\n  };\\\\n  instructions.split('').forEach(instruction => currentFloor += movements[instruction]);\\\\n\\\\n  return currentFloor;\\\\n};\\\\n\\\\nexports.getFloorNumber = getFloorNumber;\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-1/src/nql-p2.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Arrow function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":1,\\\"column\\\":30,\\\"nodeType\\\":\\\"ArrowFunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":14,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":5,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":8,\\\"fix\\\":{\\\"range\\\":[119,122],\\\"text\\\":\\\"\\\\\\\"(\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":5,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":8,\\\"fix\\\":{\\\"range\\\":[131,134],\\\"text\\\":\\\"\\\\\\\")\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":3,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":2,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const getStarPosOfBasement = (instructions) => {\\\\n  let currentFloor = 0;\\\\n  let position = 0;\\\\n  const movements = {\\\\n    '(': 1,\\\\n    ')': -1\\\\n  };\\\\n\\\\n  for(const instruction in instructions) {\\\\n    currentFloor += movements[instructions[instruction]];\\\\n    position += 1;\\\\n    if(currentFloor === -1) return position;\\\\n  };\\\\n};\\\\n\\\\nexports.getStarPosOfBasement = getStarPosOfBasement;\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-1/test/nql-p1-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[83,91],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":36,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":51,\\\"fix\\\":{\\\"range\\\":[129,144],\\\"text\\\":\\\"\\\\\\\"../src/nql-p1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":26,\\\"fix\\\":{\\\"range\\\":[157,173],\\\"text\\\":\\\"\\\\\\\"getFloorNumber\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[188,223],\\\"text\\\":\\\"\\\\\\\"should take santa to ground floor\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[251,257],\\\"text\\\":\\\"\\\\\\\"(())\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":14,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":14,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[377,412],\\\"text\\\":\\\"\\\\\\\"should take santa to second floor\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":15,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":15,\\\"endColumn\\\":27,\\\"fix\\\":{\\\"range\\\":[440,448],\\\"text\\\":\\\"\\\\\\\"(())((\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":22,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":22,\\\"endColumn\\\":49,\\\"fix\\\":{\\\"range\\\":[568,611],\\\"text\\\":\\\"\\\\\\\"should take santa to third level basement\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":23,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":23,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[639,648],\\\"text\\\":\\\"\\\\\\\")())())\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":10,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":10,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst { deepStrictEqual } = require('assert');\\\\nconst { getFloorNumber } = require('../src/nql-p1');\\\\n\\\\ndescribe('getFloorNumber', () => {\\\\n  it('should take santa to ground floor', () => {\\\\n    const input = '(())';\\\\n    const expected = 0;\\\\n    const actual = getFloorNumber(input);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should take santa to second floor', () => {\\\\n    const input = '(())((';\\\\n    const expected = 2;\\\\n    const actual = getFloorNumber(input);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should take santa to third level basement', () => {\\\\n    const input = ')())())';\\\\n    const expected = -3;\\\\n    const actual = getFloorNumber(input);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-1/test/nql-p2-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[83,91],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":42,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":57,\\\"fix\\\":{\\\"range\\\":[135,150],\\\"text\\\":\\\"\\\\\\\"../src/nql-p2\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":33,\\\"fix\\\":{\\\"range\\\":[163,186],\\\"text\\\":\\\"\\\\\\\"getStartPosOfBasement\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[201,218],\\\"text\\\":\\\"\\\\\\\"should return 1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":22,\\\"fix\\\":{\\\"range\\\":[246,249],\\\"text\\\":\\\"\\\\\\\")\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":14,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":14,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[375,392],\\\"text\\\":\\\"\\\\\\\"should return 5\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":15,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":15,\\\"endColumn\\\":26,\\\"fix\\\":{\\\"range\\\":[420,427],\\\"text\\\":\\\"\\\\\\\"()())\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":8,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":8,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst { deepStrictEqual } = require('assert');\\\\nconst { getStarPosOfBasement } = require('../src/nql-p2');\\\\n\\\\ndescribe('getStartPosOfBasement', () => {\\\\n  it('should return 1', () => {\\\\n    const input = ')';\\\\n    const actual = getStarPosOfBasement(input);\\\\n    const expected = 1;\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should return 5', () => {\\\\n    const input = '()())';\\\\n    const actual = getStarPosOfBasement(input);\\\\n    const expected = 5;\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-2/src/wrapping-paper-area.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":45,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":49,\\\"fix\\\":{\\\"range\\\":[44,48],\\\"text\\\":\\\"\\\\\\\"\\\\\\\\n\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":39,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":42,\\\"fix\\\":{\\\"range\\\":[89,92],\\\"text\\\":\\\"\\\\\\\"x\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":2,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":2,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const splitByNewLine = (text) => text.split('\\\\\\\\n');\\\\nconst splitByX = (text) => text.split('x');\\\\nconst sum = (numbers) => numbers.reduce((a, b) => a + b, 0);\\\\nconst ascendingSort = (numbers) => numbers.sort((a, b) => a - b);\\\\n\\\\nconst getSmallestSideArea = (dimensions) => {\\\\n  const [l, b] = ascendingSort(dimensions);\\\\n\\\\n  return l * b;\\\\n};\\\\n\\\\nconst getAreaOfPaperForPrism = ([l, w, h]) => {\\\\n  let areaOfPaper = 2 * l * w + 2 * w * h + 2 * h * l;\\\\n  areaOfPaper += getSmallestSideArea([l, w, h]);\\\\n\\\\n  return areaOfPaper;\\\\n};\\\\n\\\\nconst getPrisms = (data) => {\\\\n  return splitByNewLine(data).map(splitByX);\\\\n};\\\\n\\\\nconst getTotalAreaOfPaper = (data) => {\\\\n  const prisms = getPrisms(data);\\\\n\\\\n  return sum(prisms.map((dimensions) => getAreaOfPaperForPrism(dimensions)));\\\\n};\\\\n\\\\nconst getSmallestSidePerimeter = (dimensions) => {\\\\n  const [l, b] = ascendingSort(dimensions);\\\\n\\\\n  return 2 * l + 2 * b;\\\\n};\\\\n\\\\nconst getRibbonLengthOfPrism = ([l, w, h]) => {\\\\n  let ribbonLength = l * w * h;\\\\n  const smallestSidePerimeter = getSmallestSidePerimeter([l, w, h]);\\\\n\\\\n  return ribbonLength + smallestSidePerimeter;\\\\n};\\\\n\\\\nconst getTotalRibbonLength = (data) => {\\\\n  const prisms = getPrisms(data);\\\\n\\\\n  return sum(prisms.map((dimensions) => getRibbonLengthOfPrism(dimensions)));\\\\n};\\\\n\\\\nexports.getAreaOfPaperForPrism = getAreaOfPaperForPrism;\\\\nexports.getSmallestSideArea = getSmallestSideArea;\\\\nexports.getTotalAreaOfPaper = getTotalAreaOfPaper;\\\\nexports.getRibbonLengthOfPrism = getRibbonLengthOfPrism;\\\\nexports.getSmallestSidePerimeter = getSmallestSidePerimeter;\\\\nexports.getTotalRibbonLength = getTotalRibbonLength;\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-2/test/ribbon-length-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[83,91],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":92,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":120,\\\"fix\\\":{\\\"range\\\":[185,213],\\\"text\\\":\\\"\\\\\\\"../src/wrapping-paper-area\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":36,\\\"fix\\\":{\\\"range\\\":[226,252],\\\"text\\\":\\\"\\\\\\\"getSmallestSidePerimeter\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":73,\\\"fix\\\":{\\\"range\\\":[267,334],\\\"text\\\":\\\"\\\\\\\"should return perimeter of the smallest side of rectangular-prism\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":15,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":15,\\\"endColumn\\\":27,\\\"fix\\\":{\\\"range\\\":[486,503],\\\"text\\\":\\\"\\\\\\\"getRibbonLength\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":16,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":16,\\\"endColumn\\\":68,\\\"fix\\\":{\\\"range\\\":[518,580],\\\"text\\\":\\\"\\\\\\\"should return 34 for a rectangular-prism of dimensions 2x3x4\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":25,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":25,\\\"endColumn\\\":32,\\\"fix\\\":{\\\"range\\\":[730,752],\\\"text\\\":\\\"\\\\\\\"getTotalRibbonLength\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":26,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":26,\\\"endColumn\\\":82,\\\"fix\\\":{\\\"range\\\":[767,843],\\\"text\\\":\\\"\\\\\\\"should return the total length of ribbon required for all the given prisms\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":9,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":9,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst { deepStrictEqual } = require('assert');\\\\nconst { getSmallestSidePerimeter, getRibbonLengthOfPrism, getTotalRibbonLength } = require('../src/wrapping-paper-area');\\\\n\\\\ndescribe('getSmallestSidePerimeter', () => {\\\\n  it('should return perimeter of the smallest side of rectangular-prism', () => {\\\\n    const expected = 10;\\\\n    const actual = getSmallestSidePerimeter([2, 3, 4]);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n});\\\\n\\\\ndescribe('getRibbonLength', () => {\\\\n  it('should return 34 for a rectangular-prism of dimensions 2x3x4', () => {\\\\n    const expected = 34;\\\\n    const actual = getRibbonLengthOfPrism([2, 3, 4]);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n});\\\\n\\\\ndescribe('getTotalRibbonLength', () => {\\\\n  it('should return the total length of ribbon required for all the given prisms', () => {\\\\n    const data = `2x3x4\\\\n    5x5x5`;\\\\n    const expected = 179;\\\\n    const actual = getTotalRibbonLength(data);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-2/test/wrapping-paper-area-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[83,91],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":86,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":114,\\\"fix\\\":{\\\"range\\\":[179,207],\\\"text\\\":\\\"\\\\\\\"../src/wrapping-paper-area\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":34,\\\"fix\\\":{\\\"range\\\":[220,244],\\\"text\\\":\\\"\\\\\\\"getAreaOfPaperForPrism\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":72,\\\"fix\\\":{\\\"range\\\":[259,325],\\\"text\\\":\\\"\\\\\\\"should return 58 for the dimensions of rectangular-prism 2, 3, 4\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":13,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":13,\\\"endColumn\\\":98,\\\"fix\\\":{\\\"range\\\":[466,558],\\\"text\\\":\\\"\\\\\\\"should return 175 for the dimensions of a rectangular-prism with all dimensions equal to 5\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":21,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":21,\\\"endColumn\\\":31,\\\"fix\\\":{\\\"range\\\":[708,729],\\\"text\\\":\\\"\\\\\\\"getSmallestSideArea\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":22,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":22,\\\"endColumn\\\":70,\\\"fix\\\":{\\\"range\\\":[744,808],\\\"text\\\":\\\"\\\\\\\"should return the smallest area from the given side dimensions\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":31,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":31,\\\"endColumn\\\":31,\\\"fix\\\":{\\\"range\\\":[996,1017],\\\"text\\\":\\\"\\\\\\\"getTotalAreaOfPaper\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":32,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":32,\\\"endColumn\\\":67,\\\"fix\\\":{\\\"range\\\":[1032,1093],\\\"text\\\":\\\"\\\\\\\"should give the required area of paper for the given prisms\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":10,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":10,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst { deepStrictEqual } = require('assert');\\\\nconst { getAreaOfPaperForPrism, getSmallestSideArea, getTotalAreaOfPaper } = require('../src/wrapping-paper-area');\\\\n\\\\ndescribe('getAreaOfPaperForPrism', () => {\\\\n  it('should return 58 for the dimensions of rectangular-prism 2, 3, 4', () => {\\\\n    const expected = 58;\\\\n    const actual = getAreaOfPaperForPrism([2, 3, 4]);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should return 175 for the dimensions of a rectangular-prism with all dimensions equal to 5', () => {\\\\n    const expected = 175;\\\\n    const actual = getAreaOfPaperForPrism([5, 5, 5]);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n});\\\\n\\\\ndescribe('getSmallestSideArea', () => {\\\\n  it('should return the smallest area from the given side dimensions', () => {\\\\n    const sideDimensions = [2, 3, 4];\\\\n    const expected = 6;\\\\n    const actual = getSmallestSideArea(sideDimensions);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n});\\\\n\\\\ndescribe('getTotalAreaOfPaper', () => {\\\\n  it('should give the required area of paper for the given prisms', () => {\\\\n    const prisms = `2x3x4\\\\n    5x5x5`;\\\\n    const expected = 233;\\\\n    const actual = getTotalAreaOfPaper(prisms);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-3/src/gifts-by-robo-santa.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":null,\\\"fatal\\\":true,\\\"severity\\\":2,\\\"message\\\":\\\"Parsing error: Unexpected character '#'\\\",\\\"line\\\":4,\\\"column\\\":3,\\\"nodeType\\\":null}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":1,\\\"fatalErrorCount\\\":1,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const isEven = (number) => number % 2 === 0;\\\\n\\\\nclass Coordinates {\\\\n  #x\\\\n  #y\\\\n  constructor(x, y) {\\\\n    this.#x = x;\\\\n    this.#y = y;\\\\n  }\\\\n\\\\n  moveUp() {\\\\n    this.#y += 1;\\\\n  }\\\\n\\\\n  moveDown() {\\\\n    this.#y -= 1;\\\\n  }\\\\n\\\\n  moveLeft() {\\\\n    this.#x -= 1;\\\\n  }\\\\n\\\\n  moveRight() {\\\\n    this.#x += 1;\\\\n  }\\\\n\\\\n  toString() {\\\\n    return `${this.#x},${this.#y}`;\\\\n  }\\\\n};\\\\n\\\\nconst getVisitedHousesCount = (instructions) => {\\\\n  const santaLocation = new Coordinates(0, 0);\\\\n  const santaRoboLocation = new Coordinates(0, 0);\\\\n  const visitedHouses = new Set();\\\\n  visitedHouses.add(santaLocation.toString());\\\\n\\\\n  const instructionsToMove = {\\\\n    'v': (location) => location.moveDown(),\\\\n    '^': (location) => location.moveUp(),\\\\n    '<': (location) => location.moveLeft(),\\\\n    '>': (location) => location.moveRight(),\\\\n  };\\\\n\\\\n  Array.from(instructions).forEach((instruction, index) => {\\\\n    const location = isEven(index) ? santaLocation : santaRoboLocation;\\\\n    instructionsToMove[instruction](location);\\\\n\\\\n    visitedHouses.add(location.toString());\\\\n  });\\\\n\\\\n  return visitedHouses.size;\\\\n};\\\\n\\\\nexports.getVisitedHousesCount = getVisitedHousesCount;\\\\nexports.Coordinates = Coordinates;\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-3/src/gifts-by-santa.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":5,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":8,\\\"fix\\\":{\\\"range\\\":[200,203],\\\"text\\\":\\\"\\\\\\\"v\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":5,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":8,\\\"fix\\\":{\\\"range\\\":[238,241],\\\"text\\\":\\\"\\\\\\\"^\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":9,\\\"column\\\":5,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":9,\\\"endColumn\\\":8,\\\"fix\\\":{\\\"range\\\":[276,279],\\\"text\\\":\\\"\\\\\\\"<\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":10,\\\"column\\\":5,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":10,\\\"endColumn\\\":8,\\\"fix\\\":{\\\"range\\\":[314,317],\\\"text\\\":\\\"\\\\\\\">\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":4,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":4,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const getVisitedHousesCount = (instructions) => {\\\\n  const santaLocation = [0, 0];\\\\n  const visitedHouses = new Set();\\\\n  visitedHouses.add(santaLocation.toString());\\\\n\\\\n  const instructionsToMove = {\\\\n    'v': () => santaLocation[1] -= 1,\\\\n    '^': () => santaLocation[1] += 1,\\\\n    '<': () => santaLocation[0] -= 1,\\\\n    '>': () => santaLocation[0] += 1,\\\\n  };\\\\n\\\\n  for(const instruction of instructions) {\\\\n    instructionsToMove[instruction]();\\\\n\\\\n    visitedHouses.add(santaLocation.toString());\\\\n  };\\\\n\\\\n  return visitedHouses.size;\\\\n};\\\\n\\\\nexports.getVisitedHousesCount = getVisitedHousesCount;\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-3/test/gifts-by-robo-santa-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":46,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":57,\\\"fix\\\":{\\\"range\\\":[45,56],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[95,103],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":56,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":84,\\\"fix\\\":{\\\"range\\\":[161,189],\\\"text\\\":\\\"\\\\\\\"../src/gifts-by-robo-santa\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":33,\\\"fix\\\":{\\\"range\\\":[202,225],\\\"text\\\":\\\"\\\\\\\"getVisitedHousesCount\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":66,\\\"fix\\\":{\\\"range\\\":[240,300],\\\"text\\\":\\\"\\\\\\\"should give the number of houses visited by santa and robo\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[328,332],\\\"text\\\":\\\"\\\\\\\"^<\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":14,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":14,\\\"endColumn\\\":86,\\\"fix\\\":{\\\"range\\\":[459,539],\\\"text\\\":\\\"\\\\\\\"should give the count of houses visited by santa or robo at least for one time\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":15,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":15,\\\"endColumn\\\":31,\\\"fix\\\":{\\\"range\\\":[567,579],\\\"text\\\":\\\"\\\\\\\"^v^v^v^v^v\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":22,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":22,\\\"endColumn\\\":64,\\\"fix\\\":{\\\"range\\\":[707,765],\\\"text\\\":\\\"\\\\\\\"should give the count of houses visited by santa or robo\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":23,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":23,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[793,799],\\\"text\\\":\\\"\\\\\\\"^>v<\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":23,\\\"column\\\":25,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":24,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[799,799],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":32,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":32,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[934,947],\\\"text\\\":\\\"\\\\\\\"Coordinates\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":38,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":38,\\\"endColumn\\\":40,\\\"fix\\\":{\\\"range\\\":[1044,1078],\\\"text\\\":\\\"\\\\\\\"should move the position up by 1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":40,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":40,\\\"endColumn\\\":27,\\\"fix\\\":{\\\"range\\\":[1132,1137],\\\"text\\\":\\\"\\\\\\\"0,1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":46,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":46,\\\"endColumn\\\":42,\\\"fix\\\":{\\\"range\\\":[1231,1267],\\\"text\\\":\\\"\\\\\\\"should move the position down by 1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":48,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":48,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[1323,1329],\\\"text\\\":\\\"\\\\\\\"0,-1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":54,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":54,\\\"endColumn\\\":42,\\\"fix\\\":{\\\"range\\\":[1423,1459],\\\"text\\\":\\\"\\\\\\\"should move the position left by 1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":56,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":56,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[1515,1521],\\\"text\\\":\\\"\\\\\\\"-1,0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":62,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":62,\\\"endColumn\\\":43,\\\"fix\\\":{\\\"range\\\":[1615,1652],\\\"text\\\":\\\"\\\\\\\"should move the position right by 1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":64,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":64,\\\"endColumn\\\":27,\\\"fix\\\":{\\\"range\\\":[1709,1714],\\\"text\\\":\\\"\\\\\\\"1,0\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":20,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":20,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it, beforeEach } = require('node:test');\\\\nconst { deepStrictEqual } = require('assert');\\\\nconst { getVisitedHousesCount, Coordinates } = require('../src/gifts-by-robo-santa');\\\\n\\\\ndescribe('getVisitedHousesCount', () => {\\\\n  it('should give the number of houses visited by santa and robo', () => {\\\\n    const moves = '^<';\\\\n    const expected = 3;\\\\n    const actual = getVisitedHousesCount(moves);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should give the count of houses visited by santa or robo at least for one time', () => {\\\\n    const moves = '^v^v^v^v^v';\\\\n    const expected = 11;\\\\n    const actual = getVisitedHousesCount(moves);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should give the count of houses visited by santa or robo', () => {\\\\n    const moves = '^>v<'\\\\n    const expected = 3;\\\\n    const actual = getVisitedHousesCount(moves);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n});\\\\n\\\\ndescribe('Coordinates', () => {\\\\n  let position;\\\\n  beforeEach(() => {\\\\n    position = new Coordinates(0, 0);\\\\n  });\\\\n\\\\n  it('should move the position up by 1', () => {\\\\n    position.moveUp();\\\\n    const expected = '0,1';\\\\n    const actual = position.toString();\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should move the position down by 1', () => {\\\\n    position.moveDown();\\\\n    const expected = '0,-1';\\\\n    const actual = position.toString();\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should move the position left by 1', () => {\\\\n    position.moveLeft();\\\\n    const expected = '-1,0';\\\\n    const actual = position.toString();\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should move the position right by 1', () => {\\\\n    position.moveRight();\\\\n    const expected = '1,0';\\\\n    const actual = position.toString();\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-3/test/gifts-by-santa-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[83,91],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":43,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":66,\\\"fix\\\":{\\\"range\\\":[136,159],\\\"text\\\":\\\"\\\\\\\"../src/gifts-by-santa\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":33,\\\"fix\\\":{\\\"range\\\":[172,195],\\\"text\\\":\\\"\\\\\\\"getVisitedHousesCount\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":57,\\\"fix\\\":{\\\"range\\\":[210,261],\\\"text\\\":\\\"\\\\\\\"should give the number of houses visited by santa\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[289,293],\\\"text\\\":\\\"\\\\\\\"^<\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":14,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":14,\\\"endColumn\\\":90,\\\"fix\\\":{\\\"range\\\":[420,504],\\\"text\\\":\\\"\\\\\\\"should give the number of houses visited by santa even if he visits multiple times\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":15,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":15,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[532,536],\\\"text\\\":\\\"\\\\\\\"^v\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":8,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":8,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst { deepStrictEqual } = require('assert');\\\\nconst { getVisitedHousesCount } = require('../src/gifts-by-santa');\\\\n\\\\ndescribe('getVisitedHousesCount', () => {\\\\n  it('should give the number of houses visited by santa', () => {\\\\n    const moves = '^<';\\\\n    const expected = 3;\\\\n    const actual = getVisitedHousesCount(moves);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should give the number of houses visited by santa even if he visits multiple times', () => {\\\\n    const moves = '^v';\\\\n    const expected = 2;\\\\n    const actual = getVisitedHousesCount(moves);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-4/src/md5.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":24,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":32,\\\"fix\\\":{\\\"range\\\":[23,31],\\\"text\\\":\\\"\\\\\\\"crypto\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":1,\\\"column\\\":33,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":2,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[32,32],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":4,\\\"column\\\":28,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":4,\\\"endColumn\\\":33,\\\"fix\\\":{\\\"range\\\":[96,101],\\\"text\\\":\\\"\\\\\\\"md5\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":9,\\\"column\\\":66,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":9,\\\"endColumn\\\":69,\\\"fix\\\":{\\\"range\\\":[296,299],\\\"text\\\":\\\"\\\\\\\"0\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":4,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":4,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const crypto = require('crypto')\\\\n\\\\nconst generateMd5 = (message) => {\\\\n  return crypto.createHash('md5').update(message).digest(\\\\\\\"hex\\\\\\\");\\\\n};\\\\n\\\\nconst generateMd5MessageForLeadingZeros = (messagePrefix, count = 5) => {\\\\n  let postfix = 1;\\\\n  while(generateMd5(messagePrefix + postfix).slice(0, count) !== '0'.repeat(count)) {\\\\n    postfix += 1;\\\\n  }\\\\n\\\\n  return messagePrefix + postfix;\\\\n};\\\\n\\\\nexports.generateMd5MessageForLeadingZeros = generateMd5MessageForLeadingZeros;\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-4/test/md5-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[83,91],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":55,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":67,\\\"fix\\\":{\\\"range\\\":[148,160],\\\"text\\\":\\\"\\\\\\\"../src/md5\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":15,\\\"fix\\\":{\\\"range\\\":[173,178],\\\"text\\\":\\\"\\\\\\\"md5\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":87,\\\"fix\\\":{\\\"range\\\":[193,274],\\\"text\\\":\\\"\\\\\\\"should give the posfix for the given string to get the md5 with leading 5 zeros\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":36,\\\"fix\\\":{\\\"range\\\":[305,319],\\\"text\\\":\\\"\\\\\\\"abcdef609043\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":54,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":62,\\\"fix\\\":{\\\"range\\\":[374,382],\\\"text\\\":\\\"\\\\\\\"abcdef\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":7,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":7,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst { deepStrictEqual } = require('assert');\\\\nconst { generateMd5MessageForLeadingZeros } = require('../src/md5');\\\\n\\\\ndescribe('md5', () => {\\\\n  it('should give the posfix for the given string to get the md5 with leading 5 zeros', () => {\\\\n    const expected = 'abcdef609043';\\\\n    const actual = generateMd5MessageForLeadingZeros('abcdef', 5);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-5/main.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[19,23],\\\"text\\\":\\\"\\\\\\\"fs\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":67,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":90,\\\"fix\\\":{\\\"range\\\":[184,207],\\\"text\\\":\\\"\\\\\\\"./src/nice-strings-p2\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":27,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":52,\\\"fix\\\":{\\\"range\\\":[263,288],\\\"text\\\":\\\"\\\\\\\"./resources/strings.txt\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":43,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":50,\\\"fix\\\":{\\\"range\\\":[333,340],\\\"text\\\":\\\"\\\\\\\"utf-8\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":58,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":62,\\\"fix\\\":{\\\"range\\\":[348,352],\\\"text\\\":\\\"\\\\\\\"\\\\\\\\n\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":16,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":16,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":16,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":16,\\\"endColumn\\\":57,\\\"fix\\\":{\\\"range\\\":[552,594],\\\"text\\\":\\\"\\\\\\\"The number of nice strings in part 1 are\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":17,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":17,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":17,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":17,\\\"endColumn\\\":57,\\\"fix\\\":{\\\"range\\\":[633,675],\\\"text\\\":\\\"\\\\\\\"The number of nice strings in part 2 are\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":7,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":7,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const fs = require('fs');\\\\nconst { getNiceStringsCount: getNiceStringsCountForP1 } = require(\\\\\\\"./src/nice-strings-p1\\\\\\\");\\\\nconst { getNiceStringsCount: getNiceStringsCountForP2 } = require('./src/nice-strings-p2');\\\\n\\\\nconst readLines = () => {\\\\n  const stringsFilePath = './resources/strings.txt';\\\\n\\\\n  return fs.readFileSync(stringsFilePath, 'utf-8').split('\\\\\\\\n');\\\\n};\\\\n\\\\nconst main = () => {\\\\n  const lines = readLines();\\\\n  const niceStringsCountInP1 = getNiceStringsCountForP1(lines);\\\\n  const niceStringsCountInP2 = getNiceStringsCountForP2(lines);\\\\n\\\\n  console.log('The number of nice strings in part 1 are', niceStringsCountInP1);\\\\n  console.log('The number of nice strings in part 2 are', niceStringsCountInP2);\\\\n};\\\\n\\\\nmain();\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-5/src/nice-strings-p1.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":17,\\\"column\\\":21,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":17,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[392,396],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":17,\\\"column\\\":27,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":17,\\\"endColumn\\\":31,\\\"fix\\\":{\\\"range\\\":[398,402],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":17,\\\"column\\\":33,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":17,\\\"endColumn\\\":37,\\\"fix\\\":{\\\"range\\\":[404,408],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":17,\\\"column\\\":39,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":17,\\\"endColumn\\\":43,\\\"fix\\\":{\\\"range\\\":[410,414],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Arrow function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":19,\\\"column\\\":22,\\\"nodeType\\\":\\\"ArrowFunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":25,\\\"endColumn\\\":2}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":5,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":4,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const calculateVowelCount = (text) => {\\\\n  const vowels = /[aeiou]/g;\\\\n\\\\n  return (text.match(vowels) || []).length;\\\\n};\\\\n\\\\nconst hasConsecutiveSameLetters = (text) => {\\\\n  const consecutiveSameLetters = /(.)\\\\\\\\1/;\\\\n\\\\n  return consecutiveSameLetters.test(text);\\\\n};\\\\n\\\\nconst hasBadSubString = (text, badStrings) => {\\\\n  return badStrings.some(badString => text.includes(badString));\\\\n};\\\\n\\\\nconst badStrings = ['ab', 'cd', 'pq', 'xy'];\\\\n\\\\nconst isNiceString = (string) => {\\\\n  const containsMoreThanTwoVowels = calculateVowelCount(string) > 2;\\\\n  const containsConsecutiveSameLetters = hasConsecutiveSameLetters(string);\\\\n  const containsBadSubString = hasBadSubString(string, badStrings);\\\\n\\\\n  return containsMoreThanTwoVowels && containsConsecutiveSameLetters && !containsBadSubString;\\\\n};\\\\n\\\\nconst getNiceStringsCount = (strings) => {\\\\n  return strings.filter(isNiceString).length;\\\\n};\\\\n\\\\nmodule.exports = {\\\\n  getNiceStringsCount,\\\\n  isNiceString,\\\\n  calculateVowelCount,\\\\n  hasConsecutiveSameLetters,\\\\n  hasBadSubString\\\\n};\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-5/src/nice-strings-p2.js\\\",\\\"messages\\\":[],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":0,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-5/test/nice-strings-test-p1.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":33,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[79,87],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":120,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":144,\\\"fix\\\":{\\\"range\\\":[209,233],\\\"text\\\":\\\"\\\\\\\"../src/nice-strings-p1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":31,\\\"fix\\\":{\\\"range\\\":[246,267],\\\"text\\\":\\\"\\\\\\\"getNiceStringsCount\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":52,\\\"fix\\\":{\\\"range\\\":[282,328],\\\"text\\\":\\\"\\\\\\\"should return 0 if there are no nice strings\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[355,362],\\\"text\\\":\\\"\\\\\\\"adsff\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":9,\\\"column\\\":51,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":9,\\\"endColumn\\\":55,\\\"fix\\\":{\\\"range\\\":[438,442],\\\"text\\\":\\\"\\\\\\\"\\\\\\\\n\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":14,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":14,\\\"endColumn\\\":75,\\\"fix\\\":{\\\"range\\\":[494,563],\\\"text\\\":\\\"\\\\\\\"should give the number of nice strings present in the given strings\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":15,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":15,\\\"endColumn\\\":44,\\\"fix\\\":{\\\"range\\\":[590,616],\\\"text\\\":\\\"\\\\\\\"ugknbfddgicrmopn\\\\\\\\naaa\\\\\\\\nb\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":17,\\\"column\\\":51,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":17,\\\"endColumn\\\":55,\\\"fix\\\":{\\\"range\\\":[692,696],\\\"text\\\":\\\"\\\\\\\"\\\\\\\\n\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":23,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":23,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[756,770],\\\"text\\\":\\\"\\\\\\\"isNiceString\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":24,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":24,\\\"endColumn\\\":73,\\\"fix\\\":{\\\"range\\\":[785,852],\\\"text\\\":\\\"\\\\\\\"should return false if the string does not have at least 3 vowels\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":25,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":25,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[879,885],\\\"text\\\":\\\"\\\\\\\"raja\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":32,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":32,\\\"endColumn\\\":91,\\\"fix\\\":{\\\"range\\\":[1002,1087],\\\"text\\\":\\\"\\\\\\\"should return false if the string does not contain a repeating letter consecutively\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":33,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":33,\\\"endColumn\\\":29,\\\"fix\\\":{\\\"range\\\":[1114,1125],\\\"text\\\":\\\"\\\\\\\"something\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":40,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":40,\\\"endColumn\\\":84,\\\"fix\\\":{\\\"range\\\":[1242,1320],\\\"text\\\":\\\"\\\\\\\"should return false if the string contains any one of the listed bad strings\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":41,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":41,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[1347,1357],\\\"text\\\":\\\"\\\\\\\"abbacuse\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":48,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":48,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[1474,1542],\\\"text\\\":\\\"\\\\\\\"should return true for a string which satisfies all the conditions\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":49,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":49,\\\"endColumn\\\":36,\\\"fix\\\":{\\\"range\\\":[1569,1587],\\\"text\\\":\\\"\\\\\\\"ugknbfddgicrmopn\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":57,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":57,\\\"endColumn\\\":31,\\\"fix\\\":{\\\"range\\\":[1711,1732],\\\"text\\\":\\\"\\\\\\\"calculateVowelCount\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":58,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":58,\\\"endColumn\\\":56,\\\"fix\\\":{\\\"range\\\":[1747,1797],\\\"text\\\":\\\"\\\\\\\"should give 0 if there are no vowels in the text\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":59,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":59,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[1824,1829],\\\"text\\\":\\\"\\\\\\\"fly\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":66,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":66,\\\"endColumn\\\":72,\\\"fix\\\":{\\\"range\\\":[1949,2015],\\\"text\\\":\\\"\\\\\\\"should give the count of vowels in the text which contain vowels\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":67,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":67,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[2042,2049],\\\"text\\\":\\\"\\\\\\\"hello\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":75,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":75,\\\"endColumn\\\":37,\\\"fix\\\":{\\\"range\\\":[2177,2204],\\\"text\\\":\\\"\\\\\\\"hasConsecutiveSameLetters\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":76,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":76,\\\"endColumn\\\":80,\\\"fix\\\":{\\\"range\\\":[2219,2293],\\\"text\\\":\\\"\\\\\\\"should return false if there are no consecutive same letters in the text\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":77,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":77,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[2320,2326],\\\"text\\\":\\\"\\\\\\\"byeb\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":84,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":84,\\\"endColumn\\\":76,\\\"fix\\\":{\\\"range\\\":[2456,2526],\\\"text\\\":\\\"\\\\\\\"should return true if there are consecutive same letters in the text\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":85,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":85,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[2553,2560],\\\"text\\\":\\\"\\\\\\\"hello\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":93,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":93,\\\"endColumn\\\":27,\\\"fix\\\":{\\\"range\\\":[2697,2714],\\\"text\\\":\\\"\\\\\\\"hasBadSubString\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":94,\\\"column\\\":23,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":94,\\\"endColumn\\\":27,\\\"fix\\\":{\\\"range\\\":[2746,2750],\\\"text\\\":\\\"\\\\\\\"ab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":94,\\\"column\\\":29,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":94,\\\"endColumn\\\":33,\\\"fix\\\":{\\\"range\\\":[2752,2756],\\\"text\\\":\\\"\\\\\\\"cd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":94,\\\"column\\\":35,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":94,\\\"endColumn\\\":39,\\\"fix\\\":{\\\"range\\\":[2758,2762],\\\"text\\\":\\\"\\\\\\\"pq\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":94,\\\"column\\\":41,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":94,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[2764,2768],\\\"text\\\":\\\"\\\\\\\"xy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":96,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":96,\\\"endColumn\\\":75,\\\"fix\\\":{\\\"range\\\":[2777,2846],\\\"text\\\":\\\"\\\\\\\"should return false as there are no bad strings present in the text\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":97,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":97,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[2873,2879],\\\"text\\\":\\\"\\\\\\\"byea\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":104,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":104,\\\"endColumn\\\":71,\\\"fix\\\":{\\\"range\\\":[3011,3076],\\\"text\\\":\\\"\\\\\\\"should return true as there are bad strings present in the text\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Arrow function has too many statements (13). Maximum allowed is 10.\\\",\\\"line\\\":104,\\\"column\\\":73,\\\"nodeType\\\":\\\"ArrowFunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":123,\\\"endColumn\\\":4},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":107,\\\"column\\\":16,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":107,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[3129,3138],\\\"text\\\":\\\"\\\\\\\"abacuss\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":111,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":111,\\\"endColumn\\\":19,\\\"fix\\\":{\\\"range\\\":[3239,3246],\\\"text\\\":\\\"\\\\\\\"cdbac\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":115,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":115,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[3343,3355],\\\"text\\\":\\\"\\\\\\\"fbgpqcture\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":119,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":119,\\\"endColumn\\\":21,\\\"fix\\\":{\\\"range\\\":[3452,3461],\\\"text\\\":\\\"\\\\\\\"haxyafd\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":42,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":41,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst { strictEqual } = require('assert');\\\\nconst { getNiceStringsCount, isNiceString, calculateVowelCount, hasConsecutiveSameLetters, hasBadSubString } = require('../src/nice-strings-p1');\\\\n\\\\ndescribe('getNiceStringsCount', () => {\\\\n  it('should return 0 if there are no nice strings', () => {\\\\n    const data = 'adsff';\\\\n    const expected = 0;\\\\n    const actual = getNiceStringsCount(data.split('\\\\\\\\n'));\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should give the number of nice strings present in the given strings', () => {\\\\n    const data = 'ugknbfddgicrmopn\\\\\\\\naaa\\\\\\\\nb';\\\\n    const expected = 2;\\\\n    const actual = getNiceStringsCount(data.split('\\\\\\\\n'));\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n});\\\\n\\\\ndescribe('isNiceString', () => {\\\\n  it('should return false if the string does not have at least 3 vowels', () => {\\\\n    const data = 'raja';\\\\n    const expected = false;\\\\n    const actual = isNiceString(data);\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should return false if the string does not contain a repeating letter consecutively', () => {\\\\n    const data = 'something';\\\\n    const expected = false;\\\\n    const actual = isNiceString(data);\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should return false if the string contains any one of the listed bad strings', () => {\\\\n    const data = 'abbacuse';\\\\n    const expected = false;\\\\n    const actual = isNiceString(data);\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should return true for a string which satisfies all the conditions', () => {\\\\n    const data = 'ugknbfddgicrmopn';\\\\n    const expected = true;\\\\n    const actual = isNiceString(data);\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n});\\\\n\\\\ndescribe('calculateVowelCount', () => {\\\\n  it('should give 0 if there are no vowels in the text', () => {\\\\n    const text = 'fly';\\\\n    const expected = 0;\\\\n    const actual = calculateVowelCount(text);\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should give the count of vowels in the text which contain vowels', () => {\\\\n    const text = 'hello';\\\\n    const expected = 2;\\\\n    const actual = calculateVowelCount(text);\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n});\\\\n\\\\ndescribe('hasConsecutiveSameLetters', () => {\\\\n  it('should return false if there are no consecutive same letters in the text', () => {\\\\n    const text = 'byeb';\\\\n    const expected = false;\\\\n    const actual = hasConsecutiveSameLetters(text);\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should return true if there are consecutive same letters in the text', () => {\\\\n    const text = 'hello';\\\\n    const expected = true;\\\\n    const actual = hasConsecutiveSameLetters(text);\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n});\\\\n\\\\ndescribe('hasBadSubString', () => {\\\\n  const badStrings = ['ab', 'cd', 'pq', 'xy'];\\\\n\\\\n  it('should return false as there are no bad strings present in the text', () => {\\\\n    const text = 'byea';\\\\n    const expected = false;\\\\n    const actual = hasBadSubString(text, badStrings);\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should return true as there are bad strings present in the text', () => {\\\\n    const expected = true;\\\\n\\\\n    let text = 'abacuss';\\\\n    let actual = hasBadSubString(text, badStrings);\\\\n    strictEqual(actual, expected);\\\\n\\\\n    text = 'cdbac';\\\\n    actual = hasBadSubString(text, badStrings);\\\\n    strictEqual(actual, expected);\\\\n\\\\n    text = 'fbgpqcture';\\\\n    actual = hasBadSubString(text, badStrings);\\\\n    strictEqual(actual, expected);\\\\n\\\\n    text = 'haxyafd';\\\\n    actual = hasBadSubString(text, badStrings);\\\\n    strictEqual(actual, expected);\\\\n\\\\n  });\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-5/test/nice-strings-test-p2.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":33,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[79,87],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":73,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":97,\\\"fix\\\":{\\\"range\\\":[162,186],\\\"text\\\":\\\"\\\\\\\"../src/nice-strings-p2\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":31,\\\"fix\\\":{\\\"range\\\":[199,220],\\\"text\\\":\\\"\\\\\\\"getNiceStringsCount\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":50,\\\"fix\\\":{\\\"range\\\":[235,279],\\\"text\\\":\\\"\\\\\\\"should give 0 if there are no nice strings\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":36,\\\"fix\\\":{\\\"range\\\":[306,324],\\\"text\\\":\\\"\\\\\\\"uurcxstgmygtbstg\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":9,\\\"column\\\":51,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":9,\\\"endColumn\\\":55,\\\"fix\\\":{\\\"range\\\":[400,404],\\\"text\\\":\\\"\\\\\\\"\\\\\\\\n\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":14,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":14,\\\"endColumn\\\":53,\\\"fix\\\":{\\\"range\\\":[456,503],\\\"text\\\":\\\"\\\\\\\"should give the count of nice strings present\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":15,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":15,\\\"endColumn\\\":48,\\\"fix\\\":{\\\"range\\\":[530,560],\\\"text\\\":\\\"\\\\\\\"qjhvhtzxzqqjkmpb\\\\\\\\nxxyxx\\\\\\\\naga\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":17,\\\"column\\\":51,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":17,\\\"endColumn\\\":55,\\\"fix\\\":{\\\"range\\\":[636,640],\\\"text\\\":\\\"\\\\\\\"\\\\\\\\n\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":23,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":23,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[700,714],\\\"text\\\":\\\"\\\\\\\"isNiceString\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":24,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":24,\\\"endColumn\\\":101,\\\"fix\\\":{\\\"range\\\":[729,824],\\\"text\\\":\\\"\\\\\\\"should return false if the string does not contain a letter sandwiched between another letter\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":25,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":25,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[851,858],\\\"text\\\":\\\"\\\\\\\"abxab\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":32,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":32,\\\"endColumn\\\":83,\\\"fix\\\":{\\\"range\\\":[975,1052],\\\"text\\\":\\\"\\\\\\\"should return false if the string does not contain a pair that appear twice\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":33,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":33,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[1079,1084],\\\"text\\\":\\\"\\\\\\\"aba\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":40,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":40,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[1201,1269],\\\"text\\\":\\\"\\\\\\\"should return true for a string which satisfies all the conditions\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":42,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":42,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[1323,1330],\\\"text\\\":\\\"\\\\\\\"xxyxx\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":49,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":49,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[1427,1445],\\\"text\\\":\\\"\\\\\\\"isPatternPresent\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":50,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":50,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[1460,1528],\\\"text\\\":\\\"\\\\\\\"should return false if the text does not contain the given pattern\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":52,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":52,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[1612,1617],\\\"text\\\":\\\"\\\\\\\"tdd\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":59,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":59,\\\"endColumn\\\":64,\\\"fix\\\":{\\\"range\\\":[1768,1826],\\\"text\\\":\\\"\\\\\\\"should return true if the text contain the given pattern\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":61,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":61,\\\"endColumn\\\":36,\\\"fix\\\":{\\\"range\\\":[1910,1928],\\\"text\\\":\\\"\\\\\\\"qjhvhtzxzqqjkmpb\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":22,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":22,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst { strictEqual } = require('assert');\\\\nconst { isNiceString, isPatternPresent, getNiceStringsCount } = require('../src/nice-strings-p2');\\\\n\\\\ndescribe('getNiceStringsCount', () => {\\\\n  it('should give 0 if there are no nice strings', () => {\\\\n    const data = 'uurcxstgmygtbstg';\\\\n    const expected = 0;\\\\n    const actual = getNiceStringsCount(data.split('\\\\\\\\n'));\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should give the count of nice strings present', () => {\\\\n    const data = 'qjhvhtzxzqqjkmpb\\\\\\\\nxxyxx\\\\\\\\naga';\\\\n    const expected = 2;\\\\n    const actual = getNiceStringsCount(data.split('\\\\\\\\n'));\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n});\\\\n\\\\ndescribe('isNiceString', () => {\\\\n  it('should return false if the string does not contain a letter sandwiched between another letter', () => {\\\\n    const data = 'abxab';\\\\n    const expected = false;\\\\n    const actual = isNiceString(data);\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should return false if the string does not contain a pair that appear twice', () => {\\\\n    const data = 'aba';\\\\n    const expected = false;\\\\n    const actual = isNiceString(data);\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should return true for a string which satisfies all the conditions', () => {\\\\n    const expected = true;\\\\n    const data = 'xxyxx';\\\\n    const actual = isNiceString(data);\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n});\\\\n\\\\ndescribe('isPatternPresent', () => {\\\\n  it('should return false if the text does not contain the given pattern', () => {\\\\n    const repeatedPairOfLettersPattern = /(.)(.).*\\\\\\\\1\\\\\\\\2/;\\\\n    const text = 'tdd';\\\\n    const expected = false;\\\\n    const actual = isPatternPresent(text, repeatedPairOfLettersPattern);\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should return true if the text contain the given pattern', () => {\\\\n    const repeatedPairOfLettersPattern = /(.)(.).*\\\\\\\\1\\\\\\\\2/;\\\\n    const text = 'qjhvhtzxzqqjkmpb';\\\\n    const expected = true;\\\\n    const actual = isPatternPresent(text, repeatedPairOfLettersPattern);\\\\n\\\\n    strictEqual(actual, expected);\\\\n  });\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-6/main.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[19,23],\\\"text\\\":\\\"\\\\\\\"fs\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":40,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":67,\\\"fix\\\":{\\\"range\\\":[65,92],\\\"text\\\":\\\"\\\\\\\"./src/extract-instruction\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":27,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":40,\\\"fix\\\":{\\\"range\\\":[121,134],\\\"text\\\":\\\"\\\\\\\"./src/light\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":4,\\\"column\\\":32,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":4,\\\"endColumn\\\":51,\\\"fix\\\":{\\\"range\\\":[168,187],\\\"text\\\":\\\"\\\\\\\"./src/light-board\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":31,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":67,\\\"fix\\\":{\\\"range\\\":[254,290],\\\"text\\\":\\\"\\\\\\\"./resources/board-instructions.txt\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":47,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":54,\\\"fix\\\":{\\\"range\\\":[338,345],\\\"text\\\":\\\"\\\\\\\"utf-8\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":62,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":66,\\\"fix\\\":{\\\"range\\\":[353,357],\\\"text\\\":\\\"\\\\\\\"\\\\\\\\n\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"no-shadow\\\",\\\"severity\\\":2,\\\"message\\\":\\\"'_' is already declared in the upper scope on line 16 column 37.\\\",\\\"line\\\":16,\\\"column\\\":72,\\\"nodeType\\\":\\\"Identifier\\\",\\\"messageId\\\":\\\"noShadow\\\",\\\"endLine\\\":16,\\\"endColumn\\\":73},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":26,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":26,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":26,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":26,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[865,895],\\\"text\\\":\\\"\\\\\\\"The number of lit lights are\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":27,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":27,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":27,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":27,\\\"endColumn\\\":50,\\\"fix\\\":{\\\"range\\\":[941,976],\\\"text\\\":\\\"\\\\\\\"The total brightness of lights is\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":10,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":9,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const fs = require('fs');\\\\nconst { extractInstruction } = require('./src/extract-instruction');\\\\nconst { Light } = require('./src/light');\\\\nconst { LightBoard } = require('./src/light-board');\\\\n\\\\nconst readInstructions = () => {\\\\n  const instructionFilePath = './resources/board-instructions.txt';\\\\n  return fs.readFileSync(instructionFilePath, 'utf-8').split('\\\\\\\\n');\\\\n};\\\\n\\\\nconst getInstructions = (rawInstructions) => {\\\\n  return rawInstructions.map(extractInstruction);\\\\n};\\\\n\\\\nconst createLights = (rows, columns) => {\\\\n  return new Array(rows).fill().map(_ => new Array(columns).fill().map(_ => new Light()));\\\\n};\\\\n\\\\nconst main = () => {\\\\n  const rawInstructions = readInstructions();\\\\n  const instructions = getInstructions(rawInstructions);\\\\n  const lights = createLights(1000, 1000);\\\\n  const lightBoard = new LightBoard(lights);\\\\n  lightBoard.execute(instructions);\\\\n\\\\n  console.log('The number of lit lights are', lightBoard.litLightsCount());\\\\n  console.log('The total brightness of lights is', lightBoard.totalBrightnessOfLights());\\\\n};\\\\n\\\\nmain();\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-6/src/extract-instruction.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":39,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":42,\\\"fix\\\":{\\\"range\\\":[87,90],\\\"text\\\":\\\"\\\\\\\" \\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":26,\\\"fix\\\":{\\\"range\\\":[112,118],\\\"text\\\":\\\"\\\\\\\"turn\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":46,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":49,\\\"fix\\\":{\\\"range\\\":[254,257],\\\"text\\\":\\\"\\\\\\\",\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":44,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":47,\\\"fix\\\":{\\\"range\\\":[303,306],\\\"text\\\":\\\"\\\\\\\",\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":4,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":4,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const extractInstruction = (rawInstruction) => {\\\\n  const tokens = rawInstruction.split(' ');\\\\n  if(tokens[0] === 'turn') tokens.splice(0, 1);\\\\n\\\\n  const [name, startingCoordinates, , endingCoordinates] = tokens;\\\\n  const [c1, r1] = startingCoordinates.split(',');\\\\n  const [c2, r2] = endingCoordinates.split(',');\\\\n\\\\n  return {\\\\n    name,\\\\n    columnStart: parseInt(c1),\\\\n    columnEnd: parseInt(c2),\\\\n    rowStart: parseInt(r1),\\\\n    rowEnd: parseInt(r2)\\\\n  };\\\\n};\\\\n\\\\nmodule.exports = { extractInstruction };\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-6/src/light-board.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":null,\\\"fatal\\\":true,\\\"severity\\\":2,\\\"message\\\":\\\"Parsing error: Unexpected character '#'\\\",\\\"line\\\":2,\\\"column\\\":3,\\\"nodeType\\\":null}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":1,\\\"fatalErrorCount\\\":1,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"class LightBoard {\\\\n  #lights\\\\n  constructor(lights) {\\\\n    this.#lights = lights;\\\\n  }\\\\n\\\\n  execute(instructions) {\\\\n    instructions.forEach(instruction => {\\\\n      const { name, columnStart, columnEnd, rowEnd, rowStart } = instruction;\\\\n      const instructionManual = {\\\\n        \\\\\\\"on\\\\\\\": (light) => light.lit(),\\\\n        \\\\\\\"off\\\\\\\": (light) => light.unlit(),\\\\n        \\\\\\\"toggle\\\\\\\": (light) => light.toggle(),\\\\n      };\\\\n\\\\n      const instructionToExecute = instructionManual[name] || function() { };\\\\n\\\\n      for(let row = rowStart; row <= rowEnd; row++) {\\\\n        for(let column = columnStart; column <= columnEnd; column++) {\\\\n          const light = this.#lights[row][column];\\\\n          instructionToExecute(light);\\\\n        }\\\\n      }\\\\n    });\\\\n  }\\\\n\\\\n  litStatusOfLights() {\\\\n    return this.#lights.map(row => row.map(light => light.isLit()));\\\\n  }\\\\n\\\\n  litLightsCount() {\\\\n    return this.#lights.flat().filter(light => light.isLit()).length;\\\\n  }\\\\n\\\\n  totalBrightnessOfLights() {\\\\n    return this.#lights.flat().reduce((brightnessSum, light) => brightnessSum + light.getBrightness(), 0);\\\\n  }\\\\n};\\\\n\\\\nmodule.exports = { LightBoard };\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-6/src/light.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":null,\\\"fatal\\\":true,\\\"severity\\\":2,\\\"message\\\":\\\"Parsing error: Unexpected character '#'\\\",\\\"line\\\":2,\\\"column\\\":3,\\\"nodeType\\\":null}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":1,\\\"fatalErrorCount\\\":1,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"class Light {\\\\n  #isLit;\\\\n  #brightness;\\\\n  constructor() {\\\\n    this.#isLit = false;\\\\n    this.#brightness = 0;\\\\n  }\\\\n\\\\n  lit() {\\\\n    this.#isLit = true;\\\\n    this.#brightness += 1;\\\\n  }\\\\n\\\\n  unlit() {\\\\n    this.#isLit = false;\\\\n    this.#brightness = (this.#brightness - 1 < 0) ? 0 : this.#brightness - 1;\\\\n  }\\\\n\\\\n  toggle() {\\\\n    this.#isLit = !this.#isLit;\\\\n    this.#brightness += 2;\\\\n  }\\\\n\\\\n  isLit() {\\\\n    return this.#isLit;\\\\n  }\\\\n\\\\n  getBrightness() {\\\\n    return this.#brightness;\\\\n  }\\\\n};\\\\n\\\\nmodule.exports = { Light }\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-6/test/extract-instruction-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":37,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[83,91],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":40,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":68,\\\"fix\\\":{\\\"range\\\":[133,161],\\\"text\\\":\\\"\\\\\\\"../src/extract-instruction\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":30,\\\"fix\\\":{\\\"range\\\":[174,194],\\\"text\\\":\\\"\\\\\\\"extractInstruction\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":68,\\\"fix\\\":{\\\"range\\\":[209,271],\\\"text\\\":\\\"\\\\\\\"should extract the \\\\\\\\\\\\\\\"on\\\\\\\\\\\\\\\" instruction from the raw instruction\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":28,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":57,\\\"fix\\\":{\\\"range\\\":[308,337],\\\"text\\\":\\\"\\\\\\\"turn on 0,0 through 999,999\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":20,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":20,\\\"endColumn\\\":69,\\\"fix\\\":{\\\"range\\\":[575,638],\\\"text\\\":\\\"\\\\\\\"should extract the \\\\\\\\\\\\\\\"off\\\\\\\\\\\\\\\" instruction from the raw instruction\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":21,\\\"column\\\":28,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":21,\\\"endColumn\\\":56,\\\"fix\\\":{\\\"range\\\":[675,703],\\\"text\\\":\\\"\\\\\\\"turn off 2,0 through 9,799\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":34,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":34,\\\"endColumn\\\":72,\\\"fix\\\":{\\\"range\\\":[940,1006],\\\"text\\\":\\\"\\\\\\\"should extract the \\\\\\\\\\\\\\\"toggle\\\\\\\\\\\\\\\" instruction from the raw instruction\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":35,\\\"column\\\":28,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":35,\\\"endColumn\\\":52,\\\"fix\\\":{\\\"range\\\":[1043,1067],\\\"text\\\":\\\"\\\\\\\"toggle 1,2 through 5,7\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":10,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":10,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst { deepStrictEqual } = require('assert');\\\\nconst { extractInstruction } = require('../src/extract-instruction');\\\\n\\\\ndescribe('extractInstruction', () => {\\\\n  it('should extract the \\\\\\\"on\\\\\\\" instruction from the raw instruction', () => {\\\\n    const rawInstruction = 'turn on 0,0 through 999,999';\\\\n    const expected = {\\\\n      name: \\\\\\\"on\\\\\\\",\\\\n      rowStart: 0,\\\\n      rowEnd: 999,\\\\n      columnStart: 0,\\\\n      columnEnd: 999\\\\n    };\\\\n    const actual = extractInstruction(rawInstruction);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should extract the \\\\\\\"off\\\\\\\" instruction from the raw instruction', () => {\\\\n    const rawInstruction = 'turn off 2,0 through 9,799';\\\\n    const expected = {\\\\n      name: \\\\\\\"off\\\\\\\",\\\\n      rowStart: 0,\\\\n      rowEnd: 799,\\\\n      columnStart: 2,\\\\n      columnEnd: 9\\\\n    };\\\\n    const actual = extractInstruction(rawInstruction);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n\\\\n  it('should extract the \\\\\\\"toggle\\\\\\\" instruction from the raw instruction', () => {\\\\n    const rawInstruction = 'toggle 1,2 through 5,7';\\\\n    const expected = {\\\\n      name: \\\\\\\"toggle\\\\\\\",\\\\n      rowStart: 2,\\\\n      rowEnd: 7,\\\\n      columnStart: 1,\\\\n      columnEnd: 5\\\\n    };\\\\n    const actual = extractInstruction(rawInstruction);\\\\n\\\\n    deepStrictEqual(actual, expected);\\\\n  });\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-6/test/light-board-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":46,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":57,\\\"fix\\\":{\\\"range\\\":[45,56],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":50,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[108,116],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":32,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":52,\\\"fix\\\":{\\\"range\\\":[150,170],\\\"text\\\":\\\"\\\\\\\"../src/light-board\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":4,\\\"column\\\":27,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":4,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[199,213],\\\"text\\\":\\\"\\\\\\\"../src/light\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":22,\\\"fix\\\":{\\\"range\\\":[226,238],\\\"text\\\":\\\"\\\\\\\"LightBoard\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":31,\\\"fix\\\":{\\\"range\\\":[259,278],\\\"text\\\":\\\"\\\\\\\"litStatusOfLights\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":8,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":8,\\\"endColumn\\\":49,\\\"fix\\\":{\\\"range\\\":[295,336],\\\"text\\\":\\\"\\\\\\\"should return the lit status of a light\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":16,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":16,\\\"endColumn\\\":52,\\\"fix\\\":{\\\"range\\\":[561,605],\\\"text\\\":\\\"\\\\\\\"should return the lit status of the lights\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":27,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":27,\\\"endColumn\\\":21,\\\"fix\\\":{\\\"range\\\":[932,941],\\\"text\\\":\\\"\\\\\\\"execute\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":38,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":38,\\\"endColumn\\\":53,\\\"fix\\\":{\\\"range\\\":[1204,1249],\\\"text\\\":\\\"\\\\\\\"should lit up the lights in the given range\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":40,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":40,\\\"endColumn\\\":19,\\\"fix\\\":{\\\"range\\\":[1302,1306],\\\"text\\\":\\\"\\\\\\\"on\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":58,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":58,\\\"endColumn\\\":52,\\\"fix\\\":{\\\"range\\\":[1717,1761],\\\"text\\\":\\\"\\\\\\\"should unlit the lights in the given range\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":61,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":61,\\\"endColumn\\\":21,\\\"fix\\\":{\\\"range\\\":[1826,1830],\\\"text\\\":\\\"\\\\\\\"on\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":68,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":68,\\\"endColumn\\\":22,\\\"fix\\\":{\\\"range\\\":[1962,1967],\\\"text\\\":\\\"\\\\\\\"off\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":87,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":87,\\\"endColumn\\\":97,\\\"fix\\\":{\\\"range\\\":[2397,2486],\\\"text\\\":\\\"\\\\\\\"should toggle the state of lights from lit to unlit and unlit to lit in the given range\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":90,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":90,\\\"endColumn\\\":21,\\\"fix\\\":{\\\"range\\\":[2551,2555],\\\"text\\\":\\\"\\\\\\\"on\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":97,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":97,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[2687,2695],\\\"text\\\":\\\"\\\\\\\"toggle\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":117,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":117,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[3094,3110],\\\"text\\\":\\\"\\\\\\\"litLightsCount\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":128,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":128,\\\"endColumn\\\":56,\\\"fix\\\":{\\\"range\\\":[3373,3421],\\\"text\\\":\\\"\\\\\\\"should return 0 if all lights are in off state\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":134,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":134,\\\"endColumn\\\":65,\\\"fix\\\":{\\\"range\\\":[3548,3605],\\\"text\\\":\\\"\\\\\\\"should return the count of lights that are in lit state\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":136,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":136,\\\"endColumn\\\":19,\\\"fix\\\":{\\\"range\\\":[3658,3662],\\\"text\\\":\\\"\\\\\\\"on\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":151,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":151,\\\"endColumn\\\":37,\\\"fix\\\":{\\\"range\\\":[3927,3952],\\\"text\\\":\\\"\\\\\\\"totalBrightnessOfLights\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":152,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":152,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[3969,4019],\\\"text\\\":\\\"\\\\\\\"should return the total brightness of the lights\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":160,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":160,\\\"endColumn\\\":19,\\\"fix\\\":{\\\"range\\\":[4272,4276],\\\"text\\\":\\\"\\\\\\\"on\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":167,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":167,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[4394,4402],\\\"text\\\":\\\"\\\\\\\"toggle\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":174,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":174,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[4520,4525],\\\"text\\\":\\\"\\\\\\\"off\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":187,\\\"column\\\":5,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":188,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[4809,4809],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":27,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":27,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it, beforeEach } = require('node:test');\\\\nconst { deepStrictEqual, strictEqual } = require('assert');\\\\nconst { LightBoard } = require('../src/light-board');\\\\nconst { Light } = require('../src/light');\\\\n\\\\ndescribe('LightBoard', () => {\\\\n  describe('litStatusOfLights', () => {\\\\n    it('should return the lit status of a light', () => {\\\\n      const light = new Light();\\\\n      const lightBoard = new LightBoard([[light]]);\\\\n      const lightsLitStatus = lightBoard.litStatusOfLights();\\\\n\\\\n      deepStrictEqual(lightsLitStatus, [[false]]);\\\\n    });\\\\n\\\\n    it('should return the lit status of the lights', () => {\\\\n      const firstLight = new Light();\\\\n      const secondLight = new Light();\\\\n      firstLight.lit();\\\\n      const lightBoard = new LightBoard([[firstLight, secondLight]]);\\\\n      const lightsLitStatus = lightBoard.litStatusOfLights();\\\\n\\\\n      deepStrictEqual(lightsLitStatus, [[true, false]]);\\\\n    });\\\\n  });\\\\n\\\\n  describe('execute', () => {\\\\n    let lightBoard;\\\\n\\\\n    beforeEach(() => {\\\\n      lightBoard = new LightBoard([\\\\n        [new Light(), new Light(), new Light()],\\\\n        [new Light(), new Light(), new Light()],\\\\n        [new Light(), new Light(), new Light()],\\\\n      ]);\\\\n    });\\\\n\\\\n    it('should lit up the lights in the given range', () => {\\\\n      const instruction = [{\\\\n        name: 'on',\\\\n        rowStart: 0,\\\\n        rowEnd: 1,\\\\n        columnStart: 0,\\\\n        columnEnd: 1\\\\n      }];\\\\n      lightBoard.execute(instruction);\\\\n\\\\n      const expectedLightStatus = [\\\\n        [true, true, false],\\\\n        [true, true, false],\\\\n        [false, false, false],\\\\n      ];\\\\n      const lightsLitStatus = lightBoard.litStatusOfLights();\\\\n\\\\n      deepStrictEqual(lightsLitStatus, expectedLightStatus);\\\\n    });\\\\n\\\\n    it('should unlit the lights in the given range', () => {\\\\n      const instructions = [\\\\n        {\\\\n          name: 'on',\\\\n          rowStart: 0,\\\\n          rowEnd: 1,\\\\n          columnStart: 1,\\\\n          columnEnd: 2\\\\n        },\\\\n        {\\\\n          name: 'off',\\\\n          rowStart: 1,\\\\n          rowEnd: 1,\\\\n          columnStart: 1,\\\\n          columnEnd: 2\\\\n        }\\\\n      ];\\\\n      lightBoard.execute(instructions);\\\\n\\\\n      const expectedLightStatus = [\\\\n        [false, true, true],\\\\n        [false, false, false],\\\\n        [false, false, false]\\\\n      ];\\\\n      const lightsLitStatus = lightBoard.litStatusOfLights();\\\\n\\\\n      deepStrictEqual(lightsLitStatus, expectedLightStatus);\\\\n    });\\\\n\\\\n    it('should toggle the state of lights from lit to unlit and unlit to lit in the given range', () => {\\\\n      const instructions = [\\\\n        {\\\\n          name: 'on',\\\\n          rowStart: 0,\\\\n          rowEnd: 0,\\\\n          columnStart: 1,\\\\n          columnEnd: 2\\\\n        },\\\\n        {\\\\n          name: 'toggle',\\\\n          rowStart: 0,\\\\n          rowEnd: 2,\\\\n          columnStart: 1,\\\\n          columnEnd: 1\\\\n        }\\\\n      ];\\\\n\\\\n      lightBoard.execute(instructions);\\\\n      const expected = [\\\\n        [false, false, true],\\\\n        [false, true, false],\\\\n        [false, true, false]\\\\n      ];\\\\n      const actual = lightBoard.litStatusOfLights();\\\\n\\\\n      deepStrictEqual(actual, expected);\\\\n    });\\\\n  });\\\\n\\\\n  describe('litLightsCount', () => {\\\\n    let lightBoard;\\\\n\\\\n    beforeEach(() => {\\\\n      lightBoard = new LightBoard([\\\\n        [new Light(), new Light(), new Light()],\\\\n        [new Light(), new Light(), new Light()],\\\\n        [new Light(), new Light(), new Light()],\\\\n      ]);\\\\n    });\\\\n\\\\n    it('should return 0 if all lights are in off state', () => {\\\\n      const countOfLitLights = lightBoard.litLightsCount();\\\\n\\\\n      strictEqual(countOfLitLights, 0);\\\\n    });\\\\n\\\\n    it('should return the count of lights that are in lit state', () => {\\\\n      const instruction = [{\\\\n        name: 'on',\\\\n        rowStart: 0,\\\\n        rowEnd: 1,\\\\n        columnStart: 1,\\\\n        columnEnd: 2\\\\n      }];\\\\n\\\\n      lightBoard.execute(instruction);\\\\n\\\\n      const countOfLitLights = lightBoard.litLightsCount();\\\\n\\\\n      strictEqual(countOfLitLights, 4);\\\\n    });\\\\n  });\\\\n\\\\n  describe('totalBrightnessOfLights', () => {\\\\n    it('should return the total brightness of the lights', () => {\\\\n      const lightBoard = new LightBoard([\\\\n        [new Light(), new Light(), new Light()],\\\\n        [new Light(), new Light(), new Light()],\\\\n        [new Light(), new Light(), new Light()],\\\\n      ]);\\\\n\\\\n      const instruction = [{\\\\n        name: 'on',\\\\n        rowStart: 0,\\\\n        rowEnd: 1,\\\\n        columnStart: 0,\\\\n        columnEnd: 1\\\\n      },\\\\n      {\\\\n        name: 'toggle',\\\\n        rowStart: 0,\\\\n        rowEnd: 1,\\\\n        columnStart: 0,\\\\n        columnEnd: 0\\\\n      },\\\\n      {\\\\n        name: 'off',\\\\n        rowStart: 0,\\\\n        rowEnd: 0,\\\\n        columnStart: 0,\\\\n        columnEnd: 0\\\\n      }\\\\n      ];\\\\n      lightBoard.execute(instruction);\\\\n\\\\n      const totalBrightnessOfLights = lightBoard.totalBrightnessOfLights();\\\\n\\\\n      deepStrictEqual(totalBrightnessOfLights, 7);\\\\n    });\\\\n  })\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-6/test/light-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":24,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":32,\\\"fix\\\":{\\\"range\\\":[70,78],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":27,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":41,\\\"fix\\\":{\\\"range\\\":[107,121],\\\"text\\\":\\\"\\\\\\\"../src/light\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":17,\\\"fix\\\":{\\\"range\\\":[134,141],\\\"text\\\":\\\"\\\\\\\"Light\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":27,\\\"fix\\\":{\\\"range\\\":[162,177],\\\"text\\\":\\\"\\\\\\\"getBrightness\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":70,\\\"fix\\\":{\\\"range\\\":[194,256],\\\"text\\\":\\\"\\\\\\\"should return 0 as it is the initial brightness of the light\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":14,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":14,\\\"endColumn\\\":49,\\\"fix\\\":{\\\"range\\\":[403,444],\\\"text\\\":\\\"\\\\\\\"should be in unlit state after creation\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":24,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":24,\\\"endColumn\\\":17,\\\"fix\\\":{\\\"range\\\":[623,628],\\\"text\\\":\\\"\\\\\\\"lit\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":25,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":25,\\\"endColumn\\\":33,\\\"fix\\\":{\\\"range\\\":[645,670],\\\"text\\\":\\\"\\\\\\\"should lit up the light\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":33,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":33,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[820,870],\\\"text\\\":\\\"\\\\\\\"should increase the brightness of the light by 1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":42,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":42,\\\"endColumn\\\":19,\\\"fix\\\":{\\\"range\\\":[1045,1052],\\\"text\\\":\\\"\\\\\\\"unlit\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":43,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":43,\\\"endColumn\\\":32,\\\"fix\\\":{\\\"range\\\":[1069,1093],\\\"text\\\":\\\"\\\\\\\"should unlit the light\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":52,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":52,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[1264,1314],\\\"text\\\":\\\"\\\\\\\"should decrease the brightness of the light by 1\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":63,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":63,\\\"endColumn\\\":52,\\\"fix\\\":{\\\"range\\\":[1535,1579],\\\"text\\\":\\\"\\\\\\\"should not decrease the brightness below 0\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":72,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":72,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[1756,1764],\\\"text\\\":\\\"\\\\\\\"toggle\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":73,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":73,\\\"endColumn\\\":56,\\\"fix\\\":{\\\"range\\\":[1781,1829],\\\"text\\\":\\\"\\\\\\\"should lit the light when it is in unlit state\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":83,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":83,\\\"endColumn\\\":56,\\\"fix\\\":{\\\"range\\\":[2003,2051],\\\"text\\\":\\\"\\\\\\\"should unlit the light when it is in lit state\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":94,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":94,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[2259,2309],\\\"text\\\":\\\"\\\\\\\"should increase the brightness of the light by 2\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":18,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":18,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst assert = require('assert');\\\\nconst { Light } = require('../src/light');\\\\n\\\\ndescribe('Light', () => {\\\\n  describe('getBrightness', () => {\\\\n    it('should return 0 as it is the initial brightness of the light', () => {\\\\n      const bulb = new Light();\\\\n      const brightness = bulb.getBrightness();\\\\n\\\\n      assert.strictEqual(brightness, 0);\\\\n    });\\\\n\\\\n    it('should be in unlit state after creation', () => {\\\\n      const bulb = new Light();\\\\n      const actual = bulb.isLit();\\\\n      const expected = false;\\\\n\\\\n      assert.strictEqual(actual, expected);\\\\n    });\\\\n  });\\\\n\\\\n\\\\n  describe('lit', () => {\\\\n    it('should lit up the light', () => {\\\\n      const bulb = new Light();\\\\n      bulb.lit();\\\\n      const isLit = bulb.isLit();\\\\n\\\\n      assert.strictEqual(isLit, true);\\\\n    });\\\\n\\\\n    it('should increase the brightness of the light by 1', () => {\\\\n      const bulb = new Light();\\\\n      bulb.lit();\\\\n      const brightness = bulb.getBrightness();\\\\n\\\\n      assert.strictEqual(brightness, 1);\\\\n    });\\\\n  });\\\\n\\\\n  describe('unlit', () => {\\\\n    it('should unlit the light', () => {\\\\n      const bulb = new Light();\\\\n      bulb.lit();\\\\n      bulb.unlit();\\\\n      const isLit = bulb.isLit();\\\\n\\\\n      assert.strictEqual(isLit, false);\\\\n    });\\\\n\\\\n    it('should decrease the brightness of the light by 1', () => {\\\\n      const bulb = new Light();\\\\n      bulb.lit();\\\\n      bulb.lit();\\\\n      bulb.lit();\\\\n      bulb.unlit();\\\\n      const brightness = bulb.getBrightness();\\\\n\\\\n      assert.strictEqual(brightness, 2);\\\\n    });\\\\n\\\\n    it('should not decrease the brightness below 0', () => {\\\\n      const bulb = new Light();\\\\n      bulb.unlit();\\\\n      const brightness = bulb.getBrightness();\\\\n\\\\n      assert.strictEqual(brightness, 0);\\\\n    });\\\\n  });\\\\n\\\\n  describe('toggle', () => {\\\\n    it('should lit the light when it is in unlit state', () => {\\\\n      const bulb = new Light();\\\\n      bulb.unlit();\\\\n      bulb.toggle();\\\\n\\\\n      const isLit = bulb.isLit();\\\\n\\\\n      assert.strictEqual(isLit, true);\\\\n    });\\\\n\\\\n    it('should unlit the light when it is in lit state', () => {\\\\n      const bulb = new Light();\\\\n      bulb.lit();\\\\n      bulb.toggle();\\\\n\\\\n      const actual = bulb.isLit();\\\\n      const expected = false;\\\\n\\\\n      assert.strictEqual(actual, expected);\\\\n    });\\\\n\\\\n    it('should increase the brightness of the light by 2', () => {\\\\n      const bulb = new Light();\\\\n      bulb.toggle();\\\\n      const brightness = bulb.getBrightness();\\\\n\\\\n      assert.strictEqual(brightness, 2);\\\\n    });\\\\n  });\\\\n});\\\\n\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-7/main.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[19,23],\\\"text\\\":\\\"\\\\\\\"fs\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":52,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":74,\\\"fix\\\":{\\\"range\\\":[77,99],\\\"text\\\":\\\"\\\\\\\"./src/electronic-kit\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":40,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":69,\\\"fix\\\":{\\\"range\\\":[141,170],\\\"text\\\":\\\"\\\\\\\"./src/instructoin-extractor\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":28,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":58,\\\"fix\\\":{\\\"range\\\":[227,257],\\\"text\\\":\\\"\\\\\\\"./resources/instructions.txt\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":44,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":51,\\\"fix\\\":{\\\"range\\\":[302,309],\\\"text\\\":\\\"\\\\\\\"utf-8\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":59,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":63,\\\"fix\\\":{\\\"range\\\":[317,321],\\\"text\\\":\\\"\\\\\\\"\\\\\\\\n\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Arrow function has too many statements (11). Maximum allowed is 10.\\\",\\\"line\\\":16,\\\"column\\\":14,\\\"nodeType\\\":\\\"ArrowFunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":31,\\\"endColumn\\\":2},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":24,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":24,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":24,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":24,\\\"endColumn\\\":51,\\\"fix\\\":{\\\"range\\\":[825,861],\\\"text\\\":\\\"\\\\\\\"The signal provided to wire \\\\\\\\\\\\\\\"a\\\\\\\\\\\\\\\" is\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":26,\\\"column\\\":21,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":26,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[894,897],\\\"text\\\":\\\"\\\\\\\"b\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"no-console\\\",\\\"severity\\\":1,\\\"message\\\":\\\"Unexpected console statement.\\\",\\\"line\\\":30,\\\"column\\\":3,\\\"nodeType\\\":\\\"MemberExpression\\\",\\\"messageId\\\":\\\"unexpected\\\",\\\"endLine\\\":30,\\\"endColumn\\\":14},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":30,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":30,\\\"endColumn\\\":109,\\\"fix\\\":{\\\"range\\\":[1036,1130],\\\"text\\\":\\\"\\\\\\\"The signal of \\\\\\\\\\\\\\\"a\\\\\\\\\\\\\\\" wire after assigning the signal of \\\\\\\\\\\\\\\"a\\\\\\\\\\\\\\\" to \\\\\\\\\\\\\\\"b\\\\\\\\\\\\\\\" from previous operxations is\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":10,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":9,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const fs = require('fs');\\\\nconst { ElectronicCircuit, makeCircuit } = require('./src/electronic-kit');\\\\nconst { extractInstruction } = require('./src/instructoin-extractor');\\\\n\\\\nconst readLines = () => {\\\\n  const instructionsFile = './resources/instructions.txt';\\\\n  return fs.readFileSync(instructionsFile, 'utf-8').split('\\\\\\\\n');\\\\n};\\\\n\\\\nconst modifyInputSignal = (wire, input, components) => {\\\\n  components.forEach(component => {\\\\n    if(component.output === wire) component.input = input;\\\\n  });\\\\n};\\\\n\\\\nconst main = () => {\\\\n  const rawInstructions = readLines();\\\\n  const components = extractInstruction(rawInstructions);\\\\n  const electronicCircuit = new ElectronicCircuit();\\\\n  const secondElectronicCircuit = new ElectronicCircuit();\\\\n\\\\n  makeCircuit(components, electronicCircuit);\\\\n  let wires = electronicCircuit.getWires();\\\\n  console.log('The signal provided to wire \\\\\\\"a\\\\\\\" is', wires.a);\\\\n\\\\n  modifyInputSignal('b', [wires.a], components);\\\\n\\\\n  makeCircuit(components, secondElectronicCircuit);\\\\n  wires = secondElectronicCircuit.getWires();\\\\n  console.log('The signal of \\\\\\\"a\\\\\\\" wire after assigning the signal of \\\\\\\"a\\\\\\\" to \\\\\\\"b\\\\\\\" from previous operxations is', wires.a);\\\\n};\\\\n\\\\nmain();\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-7/src/electronic-kit.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":null,\\\"fatal\\\":true,\\\"severity\\\":2,\\\"message\\\":\\\"Parsing error: Unexpected character '#'\\\",\\\"line\\\":2,\\\"column\\\":3,\\\"nodeType\\\":null}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":1,\\\"fatalErrorCount\\\":1,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":0,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"class ElectronicCircuit {\\\\n  #wires;\\\\n  constructor() {\\\\n    this.#wires = {};\\\\n  }\\\\n\\\\n  #isNumber(value) {\\\\n    return typeof value === 'number';\\\\n  }\\\\n\\\\n  #identity([number]) {\\\\n    return number;\\\\n  }\\\\n\\\\n  #and([number1, number2]) {\\\\n    return number1 & number2;\\\\n  }\\\\n\\\\n  #or([number1, number2]) {\\\\n    return number1 | number2;\\\\n  }\\\\n\\\\n  #not([number]) {\\\\n    return 65535 - number;\\\\n  }\\\\n\\\\n  #lshift([number, shiftCount]) {\\\\n    return number << shiftCount;\\\\n  }\\\\n\\\\n  #rshift([number, shiftCount]) {\\\\n    return number >> shiftCount;\\\\n  }\\\\n\\\\n  #extractIO(instruction) {\\\\n    const inputs = instruction.input.map(signal =>\\\\n      this.#isNumber(signal) ? signal : this.#wires[signal]);\\\\n    const wire = instruction.output;\\\\n\\\\n    return { inputs, wire };\\\\n  }\\\\n\\\\n  execute(instruction) {\\\\n    const gates = {\\\\n      'ASSIGN': (inputs) => this.#identity(inputs),\\\\n      'AND': (inputs) => this.#and(inputs),\\\\n      'OR': (inputs) => this.#or(inputs),\\\\n      'NOT': (inputs) => this.#not(inputs),\\\\n      'LSHIFT': (inputs) => this.#lshift(inputs),\\\\n      'RSHIFT': (inputs) => this.#rshift(inputs),\\\\n    };\\\\n\\\\n    const operation = gates[instruction.operation];\\\\n    const { inputs, wire } = this.#extractIO(instruction);\\\\n\\\\n    if(inputs.includes(undefined)) return false;\\\\n    this.#wires[wire] = operation(inputs);\\\\n\\\\n    return true;\\\\n  }\\\\n\\\\n  getWires() {\\\\n    return { ...this.#wires };\\\\n  }\\\\n};\\\\n\\\\n\\\\nconst makeCircuit = (components, circuit) => {\\\\n  if(components.length === 0) return true;\\\\n\\\\n  const remainingComponents = components.filter(component => !circuit.execute(component));\\\\n\\\\n  if(remainingComponents.length === components.length) return false;\\\\n  else return makeCircuit(remainingComponents, circuit);\\\\n};\\\\n\\\\nmodule.exports = { ElectronicCircuit, makeCircuit };\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-7/src/instructoin-extractor.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":51,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":55,\\\"fix\\\":{\\\"range\\\":[149,153],\\\"text\\\":\\\"\\\\\\\"->\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":4,\\\"column\\\":40,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":4,\\\"endColumn\\\":43,\\\"fix\\\":{\\\"range\\\":[195,198],\\\"text\\\":\\\"\\\\\\\" \\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":10,\\\"column\\\":6,\\\"nodeType\\\":\\\"VariableDeclaration\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":11,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[366,366],\\\"text\\\":\\\";\\\"}},{\\\"ruleId\\\":\\\"complexity\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Arrow function has a complexity of 3. Maximum allowed is 2.\\\",\\\"line\\\":12,\\\"column\\\":20,\\\"nodeType\\\":\\\"ArrowFunctionExpression\\\",\\\"messageId\\\":\\\"complex\\\",\\\"endLine\\\":16,\\\"endColumn\\\":6},{\\\"ruleId\\\":\\\"no-implicit-coercion\\\",\\\"severity\\\":1,\\\"message\\\":\\\"use `Number(token)` instead.\\\",\\\"line\\\":14,\\\"column\\\":21,\\\"nodeType\\\":\\\"UnaryExpression\\\",\\\"messageId\\\":\\\"useRecommendation\\\",\\\"endLine\\\":14,\\\"endColumn\\\":27,\\\"fix\\\":{\\\"range\\\":[483,489],\\\"text\\\":\\\"Number(token)\\\"}},{\\\"ruleId\\\":\\\"no-implicit-coercion\\\",\\\"severity\\\":1,\\\"message\\\":\\\"use `Number(token)` instead.\\\",\\\"line\\\":15,\\\"column\\\":33,\\\"nodeType\\\":\\\"UnaryExpression\\\",\\\"messageId\\\":\\\"useRecommendation\\\",\\\"endLine\\\":15,\\\"endColumn\\\":39,\\\"fix\\\":{\\\"range\\\":[553,559],\\\"text\\\":\\\"Number(token)\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":4,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":2,\\\"fixableErrorCount\\\":3,\\\"fixableWarningCount\\\":2,\\\"source\\\":\\\"const extractInstruction = (rawInstructions) => {\\\\n  return rawInstructions.map(rawInstruction => {\\\\n    const [prefix, suffix] = rawInstruction.split('->');\\\\n    const tokens = prefix.trim().split(' ');\\\\n    const operators = [\\\\\\\"OR\\\\\\\", \\\\\\\"AND\\\\\\\", \\\\\\\"LSHIFT\\\\\\\", \\\\\\\"RSHIFT\\\\\\\", \\\\\\\"NOT\\\\\\\"];\\\\n    const component = {\\\\n      operation: \\\\\\\"ASSIGN\\\\\\\",\\\\n      input: [],\\\\n      output: suffix.trim()\\\\n    }\\\\n\\\\n    tokens.forEach(token => {\\\\n      if(operators.includes(token)) component.operation = token;\\\\n      else if(isNaN(+token)) component.input.push(token);\\\\n      else component.input.push(+token);\\\\n    });\\\\n\\\\n    return component;\\\\n  });\\\\n};\\\\n\\\\nmodule.exports = { extractInstruction };\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-7/test/electronic-kit-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":24,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":32,\\\"fix\\\":{\\\"range\\\":[70,78],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":52,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":75,\\\"fix\\\":{\\\"range\\\":[132,155],\\\"text\\\":\\\"\\\\\\\"../src/electronic-kit\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":29,\\\"fix\\\":{\\\"range\\\":[168,187],\\\"text\\\":\\\"\\\\\\\"electronicCircuit\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":22,\\\"fix\\\":{\\\"range\\\":[208,218],\\\"text\\\":\\\"\\\\\\\"getWires\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[235,272],\\\"text\\\":\\\"\\\\\\\"should return empty object at start\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":15,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":15,\\\"endColumn\\\":21,\\\"fix\\\":{\\\"range\\\":[457,466],\\\"text\\\":\\\"\\\\\\\"execute\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"max-statements\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Arrow function has too many statements (11). Maximum allowed is 10.\\\",\\\"line\\\":15,\\\"column\\\":23,\\\"nodeType\\\":\\\"ArrowFunctionExpression\\\",\\\"messageId\\\":\\\"exceed\\\",\\\"endLine\\\":228,\\\"endColumn\\\":4},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":16,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":16,\\\"endColumn\\\":72,\\\"fix\\\":{\\\"range\\\":[483,547],\\\"text\\\":\\\"\\\\\\\"should ASSIGN a signal value to a wire and add it to the wires\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":19,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":19,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[662,670],\\\"text\\\":\\\"\\\\\\\"ASSIGN\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":21,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":21,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[709,712],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":30,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":30,\\\"endColumn\\\":96,\\\"fix\\\":{\\\"range\\\":[885,973],\\\"text\\\":\\\"\\\\\\\"should perform \\\\\\\\\\\\\\\"AND\\\\\\\\\\\\\\\" operation between two input wires and assign the output to a wire\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":33,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":33,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[1085,1093],\\\"text\\\":\\\"\\\\\\\"ASSIGN\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":35,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":35,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[1132,1135],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":40,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":40,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[1233,1241],\\\"text\\\":\\\"\\\\\\\"ASSIGN\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":42,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":42,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[1279,1282],\\\"text\\\":\\\"\\\\\\\"b\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":47,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":47,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[1380,1385],\\\"text\\\":\\\"\\\\\\\"AND\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":48,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":48,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[1403,1406],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":48,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":48,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[1408,1411],\\\"text\\\":\\\"\\\\\\\"b\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":49,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":49,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[1430,1433],\\\"text\\\":\\\"\\\\\\\"c\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":57,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":57,\\\"endColumn\\\":106,\\\"fix\\\":{\\\"range\\\":[1616,1714],\\\"text\\\":\\\"\\\\\\\"should perform \\\\\\\\\\\\\\\"AND\\\\\\\\\\\\\\\" operation between a input wire and a number and assign the output to a wire\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":60,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":60,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[1826,1834],\\\"text\\\":\\\"\\\\\\\"ASSIGN\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":62,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":62,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[1873,1876],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":67,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":67,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[1974,1979],\\\"text\\\":\\\"\\\\\\\"AND\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":68,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":68,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[2000,2003],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":69,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":69,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[2022,2025],\\\"text\\\":\\\"\\\\\\\"b\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":77,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":77,\\\"endColumn\\\":92,\\\"fix\\\":{\\\"range\\\":[2202,2286],\\\"text\\\":\\\"\\\\\\\"should perform \\\\\\\\\\\\\\\"AND\\\\\\\\\\\\\\\" operation between two numbers and assign the output to a wire\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":80,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":80,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[2401,2406],\\\"text\\\":\\\"\\\\\\\"AND\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":82,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":82,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[2447,2450],\\\"text\\\":\\\"\\\\\\\"b\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":91,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":91,\\\"endColumn\\\":95,\\\"fix\\\":{\\\"range\\\":[2622,2709],\\\"text\\\":\\\"\\\\\\\"should perform \\\\\\\\\\\\\\\"OR\\\\\\\\\\\\\\\" operation between two input wires and assign the output to a wire\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":94,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":94,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[2821,2829],\\\"text\\\":\\\"\\\\\\\"ASSIGN\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":96,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":96,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[2868,2871],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":101,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":101,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[2969,2977],\\\"text\\\":\\\"\\\\\\\"ASSIGN\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":103,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":103,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[3015,3018],\\\"text\\\":\\\"\\\\\\\"b\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":108,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":108,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[3116,3120],\\\"text\\\":\\\"\\\\\\\"OR\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":109,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":109,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[3138,3141],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":109,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":109,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[3143,3146],\\\"text\\\":\\\"\\\\\\\"b\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":110,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":110,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[3165,3168],\\\"text\\\":\\\"\\\\\\\"c\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":118,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":118,\\\"endColumn\\\":105,\\\"fix\\\":{\\\"range\\\":[3352,3449],\\\"text\\\":\\\"\\\\\\\"should perform \\\\\\\\\\\\\\\"OR\\\\\\\\\\\\\\\" operation between a input wire and a number and assign the output to a wire\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":121,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":121,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[3561,3569],\\\"text\\\":\\\"\\\\\\\"ASSIGN\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":123,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":123,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[3608,3611],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":128,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":128,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[3709,3713],\\\"text\\\":\\\"\\\\\\\"OR\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":129,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":129,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[3734,3737],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":130,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":130,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[3756,3759],\\\"text\\\":\\\"\\\\\\\"b\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":138,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":138,\\\"endColumn\\\":91,\\\"fix\\\":{\\\"range\\\":[3937,4020],\\\"text\\\":\\\"\\\\\\\"should perform \\\\\\\\\\\\\\\"OR\\\\\\\\\\\\\\\" operation between two numbers and assign the output to a wire\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":141,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":141,\\\"endColumn\\\":24,\\\"fix\\\":{\\\"range\\\":[4134,4138],\\\"text\\\":\\\"\\\\\\\"OR\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":143,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":143,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[4179,4182],\\\"text\\\":\\\"\\\\\\\"b\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":152,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":152,\\\"endColumn\\\":104,\\\"fix\\\":{\\\"range\\\":[4353,4449],\\\"text\\\":\\\"\\\\\\\"should perform \\\\\\\\\\\\\\\"NOT\\\\\\\\\\\\\\\" operation on a input wire signal and assign the output to the output wire\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":155,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":155,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[4561,4569],\\\"text\\\":\\\"\\\\\\\"ASSIGN\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":157,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":157,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[4607,4610],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":162,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":162,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[4708,4713],\\\"text\\\":\\\"\\\\\\\"NOT\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":163,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":163,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[4731,4734],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":164,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":164,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[4753,4756],\\\"text\\\":\\\"\\\\\\\"b\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":173,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":173,\\\"endColumn\\\":93,\\\"fix\\\":{\\\"range\\\":[4937,5022],\\\"text\\\":\\\"\\\\\\\"should perform \\\\\\\\\\\\\\\"NOT\\\\\\\\\\\\\\\" operation on a number and assign the output to the output wire\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":176,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":176,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[5134,5139],\\\"text\\\":\\\"\\\\\\\"NOT\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":178,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":178,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[5177,5180],\\\"text\\\":\\\"\\\\\\\"b\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":187,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":187,\\\"endColumn\\\":107,\\\"fix\\\":{\\\"range\\\":[5355,5454],\\\"text\\\":\\\"\\\\\\\"should perform \\\\\\\\\\\\\\\"LSHIFT\\\\\\\\\\\\\\\" operation on a input wire signal and assign the output to the output wire\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":190,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":190,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[5566,5574],\\\"text\\\":\\\"\\\\\\\"ASSIGN\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":192,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":192,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[5612,5615],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":197,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":197,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[5713,5721],\\\"text\\\":\\\"\\\\\\\"LSHIFT\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":198,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":198,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[5739,5742],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":199,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":199,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[5764,5767],\\\"text\\\":\\\"\\\\\\\"b\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":208,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":208,\\\"endColumn\\\":107,\\\"fix\\\":{\\\"range\\\":[5945,6044],\\\"text\\\":\\\"\\\\\\\"should perform \\\\\\\\\\\\\\\"RSHIFT\\\\\\\\\\\\\\\" operation on a input wire signal and assign the output to the output wire\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":211,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":211,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[6156,6164],\\\"text\\\":\\\"\\\\\\\"ASSIGN\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":213,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":213,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[6202,6205],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":218,\\\"column\\\":20,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":218,\\\"endColumn\\\":28,\\\"fix\\\":{\\\"range\\\":[6303,6311],\\\"text\\\":\\\"\\\\\\\"RSHIFT\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":219,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":219,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[6329,6332],\\\"text\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":220,\\\"column\\\":17,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":220,\\\"endColumn\\\":20,\\\"fix\\\":{\\\"range\\\":[6354,6357],\\\"text\\\":\\\"\\\\\\\"b\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":230,\\\"column\\\":12,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":230,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[6544,6557],\\\"text\\\":\\\"\\\\\\\"makeCircuit\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":231,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":231,\\\"endColumn\\\":71,\\\"fix\\\":{\\\"range\\\":[6574,6637],\\\"text\\\":\\\"\\\\\\\"should return false if the given does not make up the circuit\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":236,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":236,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[6786,6790],\\\"text\\\":\\\"\\\\\\\"at\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":236,\\\"column\\\":25,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":236,\\\"endColumn\\\":29,\\\"fix\\\":{\\\"range\\\":[6792,6796],\\\"text\\\":\\\"\\\\\\\"az\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":237,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":237,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[6817,6821],\\\"text\\\":\\\"\\\\\\\"ba\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":241,\\\"column\\\":22,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":241,\\\"endColumn\\\":26,\\\"fix\\\":{\\\"range\\\":[6892,6896],\\\"text\\\":\\\"\\\\\\\"cx\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":242,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":242,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[6917,6921],\\\"text\\\":\\\"\\\\\\\"cy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":246,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":246,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[6989,6993],\\\"text\\\":\\\"\\\\\\\"go\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":247,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":247,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[7014,7018],\\\"text\\\":\\\"\\\\\\\"gp\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":256,\\\"column\\\":8,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":256,\\\"endColumn\\\":85,\\\"fix\\\":{\\\"range\\\":[7176,7253],\\\"text\\\":\\\"\\\\\\\"should add component to the circuit when all the required wires are present\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":262,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":262,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[7429,7433],\\\"text\\\":\\\"\\\\\\\"ba\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":267,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":267,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[7526,7530],\\\"text\\\":\\\"\\\\\\\"cy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":271,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":271,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[7598,7602],\\\"text\\\":\\\"\\\\\\\"ba\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":271,\\\"column\\\":25,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":271,\\\"endColumn\\\":29,\\\"fix\\\":{\\\"range\\\":[7604,7608],\\\"text\\\":\\\"\\\\\\\"cy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":272,\\\"column\\\":19,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":272,\\\"endColumn\\\":23,\\\"fix\\\":{\\\"range\\\":[7629,7633],\\\"text\\\":\\\"\\\\\\\"gp\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":280,\\\"column\\\":39,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":280,\\\"endColumn\\\":43,\\\"fix\\\":{\\\"range\\\":[7862,7866],\\\"text\\\":\\\"\\\\\\\"ba\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":280,\\\"column\\\":49,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":280,\\\"endColumn\\\":53,\\\"fix\\\":{\\\"range\\\":[7872,7876],\\\"text\\\":\\\"\\\\\\\"cy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":280,\\\"column\\\":58,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":280,\\\"endColumn\\\":62,\\\"fix\\\":{\\\"range\\\":[7881,7885],\\\"text\\\":\\\"\\\\\\\"gp\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"semi\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Missing semicolon.\\\",\\\"line\\\":280,\\\"column\\\":68,\\\"nodeType\\\":\\\"ExpressionStatement\\\",\\\"messageId\\\":\\\"missingSemi\\\",\\\"endLine\\\":281,\\\"endColumn\\\":1,\\\"fix\\\":{\\\"range\\\":[7891,7891],\\\"text\\\":\\\";\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":87,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":86,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst assert = require('assert');\\\\nconst { ElectronicCircuit, makeCircuit } = require('../src/electronic-kit');\\\\n\\\\ndescribe('electronicCircuit', () => {\\\\n  describe('getWires', () => {\\\\n    it('should return empty object at start', () => {\\\\n      const electronicCircuit = new ElectronicCircuit();\\\\n      const wires = electronicCircuit.getWires();\\\\n\\\\n      assert.deepStrictEqual(wires, {});\\\\n    });\\\\n  });\\\\n\\\\n  describe('execute', () => {\\\\n    it('should ASSIGN a signal value to a wire and add it to the wires', () => {\\\\n      const electronicCircuit = new ElectronicCircuit();\\\\n      const instructions = {\\\\n        operation: 'ASSIGN',\\\\n        input: [10],\\\\n        output: 'a'\\\\n      };\\\\n\\\\n      electronicCircuit.execute(instructions);\\\\n      const wires = electronicCircuit.getWires();\\\\n\\\\n      assert.deepStrictEqual(wires, { a: 10 });\\\\n    });\\\\n\\\\n    it('should perform \\\\\\\"AND\\\\\\\" operation between two input wires and assign the output to a wire', () => {\\\\n      const electronicCircuit = new ElectronicCircuit();\\\\n      let instruction = {\\\\n        operation: 'ASSIGN',\\\\n        input: [10],\\\\n        output: 'a'\\\\n      };\\\\n      electronicCircuit.execute(instruction);\\\\n\\\\n      instruction = {\\\\n        operation: 'ASSIGN',\\\\n        input: [2],\\\\n        output: 'b'\\\\n      };\\\\n      electronicCircuit.execute(instruction);\\\\n\\\\n      instruction = {\\\\n        operation: 'AND',\\\\n        input: ['a', 'b'],\\\\n        output: 'c'\\\\n      };\\\\n      electronicCircuit.execute(instruction);\\\\n      const wires = electronicCircuit.getWires();\\\\n\\\\n      assert.deepStrictEqual(wires, { a: 10, b: 2, c: 2 });\\\\n    });\\\\n\\\\n    it('should perform \\\\\\\"AND\\\\\\\" operation between a input wire and a number and assign the output to a wire', () => {\\\\n      const electronicCircuit = new ElectronicCircuit();\\\\n      let instruction = {\\\\n        operation: 'ASSIGN',\\\\n        input: [10],\\\\n        output: 'a'\\\\n      };\\\\n      electronicCircuit.execute(instruction);\\\\n\\\\n      instruction = {\\\\n        operation: 'AND',\\\\n        input: [3, 'a'],\\\\n        output: 'b'\\\\n      };\\\\n      electronicCircuit.execute(instruction);\\\\n      const wires = electronicCircuit.getWires();\\\\n\\\\n      assert.deepStrictEqual(wires, { a: 10, b: 2 });\\\\n    });\\\\n\\\\n    it('should perform \\\\\\\"AND\\\\\\\" operation between two numbers and assign the output to a wire', () => {\\\\n      const electronicCircuit = new ElectronicCircuit();\\\\n      const instructions = {\\\\n        operation: 'AND',\\\\n        input: [3, 5],\\\\n        output: 'b'\\\\n      };\\\\n\\\\n      electronicCircuit.execute(instructions);\\\\n      const wires = electronicCircuit.getWires();\\\\n\\\\n      assert.deepStrictEqual(wires, { b: 1 });\\\\n    });\\\\n\\\\n    it('should perform \\\\\\\"OR\\\\\\\" operation between two input wires and assign the output to a wire', () => {\\\\n      const electronicCircuit = new ElectronicCircuit();\\\\n      let instruction = {\\\\n        operation: 'ASSIGN',\\\\n        input: [10],\\\\n        output: 'a'\\\\n      };\\\\n      electronicCircuit.execute(instruction);\\\\n\\\\n      instruction = {\\\\n        operation: 'ASSIGN',\\\\n        input: [2],\\\\n        output: 'b'\\\\n      };\\\\n      electronicCircuit.execute(instruction);\\\\n\\\\n      instruction = {\\\\n        operation: 'OR',\\\\n        input: ['a', 'b'],\\\\n        output: 'c'\\\\n      };\\\\n      electronicCircuit.execute(instruction);\\\\n      const wires = electronicCircuit.getWires();\\\\n\\\\n      assert.deepStrictEqual(wires, { a: 10, b: 2, c: 10 });\\\\n    });\\\\n\\\\n    it('should perform \\\\\\\"OR\\\\\\\" operation between a input wire and a number and assign the output to a wire', () => {\\\\n      const electronicCircuit = new ElectronicCircuit();\\\\n      let instruction = {\\\\n        operation: 'ASSIGN',\\\\n        input: [10],\\\\n        output: 'a'\\\\n      };\\\\n      electronicCircuit.execute(instruction);\\\\n\\\\n      instruction = {\\\\n        operation: 'OR',\\\\n        input: [3, 'a'],\\\\n        output: 'b'\\\\n      };\\\\n      electronicCircuit.execute(instruction);\\\\n      const wires = electronicCircuit.getWires();\\\\n\\\\n      assert.deepStrictEqual(wires, { a: 10, b: 11 });\\\\n    });\\\\n\\\\n    it('should perform \\\\\\\"OR\\\\\\\" operation between two numbers and assign the output to a wire', () => {\\\\n      const electronicCircuit = new ElectronicCircuit();\\\\n      const instruction = {\\\\n        operation: 'OR',\\\\n        input: [3, 5],\\\\n        output: 'b'\\\\n      };\\\\n\\\\n      electronicCircuit.execute(instruction);\\\\n      const wires = electronicCircuit.getWires();\\\\n\\\\n      assert.deepStrictEqual(wires, { b: 7 });\\\\n    });\\\\n\\\\n    it('should perform \\\\\\\"NOT\\\\\\\" operation on a input wire signal and assign the output to the output wire', () => {\\\\n      const electronicCircuit = new ElectronicCircuit();\\\\n      let instruction = {\\\\n        operation: 'ASSIGN',\\\\n        input: [1],\\\\n        output: 'a'\\\\n      };\\\\n      electronicCircuit.execute(instruction);\\\\n\\\\n      instruction = {\\\\n        operation: 'NOT',\\\\n        input: ['a'],\\\\n        output: 'b'\\\\n      };\\\\n\\\\n      electronicCircuit.execute(instruction);\\\\n      const wires = electronicCircuit.getWires();\\\\n\\\\n      assert.deepStrictEqual(wires, { a: 1, b: 65534 });\\\\n    });\\\\n\\\\n    it('should perform \\\\\\\"NOT\\\\\\\" operation on a number and assign the output to the output wire', () => {\\\\n      const electronicCircuit = new ElectronicCircuit();\\\\n      let instruction = {\\\\n        operation: 'NOT',\\\\n        input: [5],\\\\n        output: 'b'\\\\n      };\\\\n\\\\n      electronicCircuit.execute(instruction);\\\\n      const wires = electronicCircuit.getWires();\\\\n\\\\n      assert.deepStrictEqual(wires, { b: 65530 });\\\\n    });\\\\n\\\\n    it('should perform \\\\\\\"LSHIFT\\\\\\\" operation on a input wire signal and assign the output to the output wire', () => {\\\\n      const electronicCircuit = new ElectronicCircuit();\\\\n      let instruction = {\\\\n        operation: 'ASSIGN',\\\\n        input: [7],\\\\n        output: 'a'\\\\n      };\\\\n      electronicCircuit.execute(instruction);\\\\n\\\\n      instruction = {\\\\n        operation: 'LSHIFT',\\\\n        input: ['a', 1],\\\\n        output: 'b'\\\\n      };\\\\n\\\\n      electronicCircuit.execute(instruction);\\\\n      const wires = electronicCircuit.getWires();\\\\n\\\\n      assert.deepStrictEqual(wires, { a: 7, b: 14 });\\\\n    });\\\\n\\\\n    it('should perform \\\\\\\"RSHIFT\\\\\\\" operation on a input wire signal and assign the output to the output wire', () => {\\\\n      const electronicCircuit = new ElectronicCircuit();\\\\n      let instruction = {\\\\n        operation: 'ASSIGN',\\\\n        input: [7],\\\\n        output: 'a'\\\\n      };\\\\n      electronicCircuit.execute(instruction);\\\\n\\\\n      instruction = {\\\\n        operation: 'RSHIFT',\\\\n        input: ['a', 1],\\\\n        output: 'b'\\\\n      };\\\\n\\\\n      electronicCircuit.execute(instruction);\\\\n      const wires = electronicCircuit.getWires();\\\\n\\\\n      assert.deepStrictEqual(wires, { a: 7, b: 3 });\\\\n    });\\\\n  });\\\\n\\\\n  describe('makeCircuit', () => {\\\\n    it('should return false if the given does not make up the circuit', () => {\\\\n      const electronicCircuit = new ElectronicCircuit();\\\\n      const components = [\\\\n        {\\\\n          operation: \\\\\\\"OR\\\\\\\",\\\\n          input: ['at', 'az'],\\\\n          output: 'ba'\\\\n        },\\\\n        {\\\\n          operation: \\\\\\\"AND\\\\\\\",\\\\n          input: [1, 'cx'],\\\\n          output: 'cy'\\\\n        },\\\\n        {\\\\n          operation: \\\\\\\"NOT\\\\\\\",\\\\n          input: ['go'],\\\\n          output: 'gp'\\\\n        }\\\\n      ];\\\\n\\\\n      const isCircuitMade = makeCircuit(components, electronicCircuit);\\\\n\\\\n      assert.strictEqual(isCircuitMade, false);\\\\n    });\\\\n\\\\n    it('should add component to the circuit when all the required wires are present', () => {\\\\n      const electronicCircuit = new ElectronicCircuit();\\\\n      const components = [\\\\n        {\\\\n          operation: \\\\\\\"ASSIGN\\\\\\\",\\\\n          input: [10],\\\\n          output: 'ba'\\\\n        },\\\\n        {\\\\n          operation: \\\\\\\"ASSIGN\\\\\\\",\\\\n          input: [1],\\\\n          output: 'cy'\\\\n        },\\\\n        {\\\\n          operation: \\\\\\\"AND\\\\\\\",\\\\n          input: ['ba', 'cy'],\\\\n          output: 'gp'\\\\n        }\\\\n      ];\\\\n\\\\n      const isCircuitMade = makeCircuit(components, electronicCircuit);\\\\n      assert.strictEqual(isCircuitMade, true);\\\\n\\\\n      const wires = electronicCircuit.getWires();\\\\n      assert.deepStrictEqual(wires, { 'ba': 10, 'cy': 1, 'gp': 0 })\\\\n    });\\\\n  });\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]},{\\\"filePath\\\":\\\"/Users/mohdqasim/workspace/javascript/projects/linter-report/.repos/b-rajkumar/aoc-2015/day-7/test/instruction-extractor-test.js\\\",\\\"messages\\\":[{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":1,\\\"column\\\":34,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":1,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[33,44],\\\"text\\\":\\\"\\\\\\\"node:test\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":2,\\\"column\\\":24,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":2,\\\"endColumn\\\":32,\\\"fix\\\":{\\\"range\\\":[70,78],\\\"text\\\":\\\"\\\\\\\"assert\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":3,\\\"column\\\":40,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":3,\\\"endColumn\\\":70,\\\"fix\\\":{\\\"range\\\":[120,150],\\\"text\\\":\\\"\\\\\\\"../src/instructoin-extractor\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":5,\\\"column\\\":10,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":5,\\\"endColumn\\\":30,\\\"fix\\\":{\\\"range\\\":[163,183],\\\"text\\\":\\\"\\\\\\\"extractInstruction\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":6,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":6,\\\"endColumn\\\":72,\\\"fix\\\":{\\\"range\\\":[198,264],\\\"text\\\":\\\"\\\\\\\"should extract the instruction from the raw \\\\\\\\\\\\\\\"assign\\\\\\\\\\\\\\\" instruction\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":7,\\\"column\\\":29,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":7,\\\"endColumn\\\":39,\\\"fix\\\":{\\\"range\\\":[302,312],\\\"text\\\":\\\"\\\\\\\"123 -> x\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":11,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":11,\\\"endColumn\\\":18,\\\"fix\\\":{\\\"range\\\":[411,414],\\\"text\\\":\\\"\\\\\\\"x\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":18,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":18,\\\"endColumn\\\":69,\\\"fix\\\":{\\\"range\\\":[576,639],\\\"text\\\":\\\"\\\\\\\"should extract the instruction from the raw \\\\\\\\\\\\\\\"not\\\\\\\\\\\\\\\" instruction\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":19,\\\"column\\\":29,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":19,\\\"endColumn\\\":43,\\\"fix\\\":{\\\"range\\\":[677,691],\\\"text\\\":\\\"\\\\\\\"NOT go -> gp\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":22,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":22,\\\"endColumn\\\":19,\\\"fix\\\":{\\\"range\\\":[767,771],\\\"text\\\":\\\"\\\\\\\"go\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":23,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":23,\\\"endColumn\\\":19,\\\"fix\\\":{\\\"range\\\":[788,792],\\\"text\\\":\\\"\\\\\\\"gp\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":30,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":30,\\\"endColumn\\\":69,\\\"fix\\\":{\\\"range\\\":[954,1017],\\\"text\\\":\\\"\\\\\\\"should extract the instruction from the raw \\\\\\\\\\\\\\\"and\\\\\\\\\\\\\\\" instruction\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":31,\\\"column\\\":29,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":31,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[1055,1071],\\\"text\\\":\\\"\\\\\\\"1 AND cx -> cy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":34,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":34,\\\"endColumn\\\":22,\\\"fix\\\":{\\\"range\\\":[1150,1154],\\\"text\\\":\\\"\\\\\\\"cx\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":35,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":35,\\\"endColumn\\\":19,\\\"fix\\\":{\\\"range\\\":[1171,1175],\\\"text\\\":\\\"\\\\\\\"cy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":42,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":42,\\\"endColumn\\\":68,\\\"fix\\\":{\\\"range\\\":[1337,1399],\\\"text\\\":\\\"\\\\\\\"should extract the instruction from the raw \\\\\\\\\\\\\\\"or\\\\\\\\\\\\\\\" instruction\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":43,\\\"column\\\":29,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":43,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[1437,1453],\\\"text\\\":\\\"\\\\\\\"at OR az -> ba\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":46,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":46,\\\"endColumn\\\":19,\\\"fix\\\":{\\\"range\\\":[1528,1532],\\\"text\\\":\\\"\\\\\\\"at\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":46,\\\"column\\\":21,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":46,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[1534,1538],\\\"text\\\":\\\"\\\\\\\"az\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":47,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":47,\\\"endColumn\\\":19,\\\"fix\\\":{\\\"range\\\":[1555,1559],\\\"text\\\":\\\"\\\\\\\"ba\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":54,\\\"column\\\":6,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":54,\\\"endColumn\\\":70,\\\"fix\\\":{\\\"range\\\":[1721,1785],\\\"text\\\":\\\"\\\\\\\"should extract multiple instructions from the raw instructions\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":55,\\\"column\\\":29,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":55,\\\"endColumn\\\":45,\\\"fix\\\":{\\\"range\\\":[1823,1839],\\\"text\\\":\\\"\\\\\\\"at OR az -> ba\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":55,\\\"column\\\":47,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":55,\\\"endColumn\\\":63,\\\"fix\\\":{\\\"range\\\":[1841,1857],\\\"text\\\":\\\"\\\\\\\"1 AND cx -> cy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":55,\\\"column\\\":65,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":55,\\\"endColumn\\\":79,\\\"fix\\\":{\\\"range\\\":[1859,1873],\\\"text\\\":\\\"\\\\\\\"NOT go -> gp\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":58,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":58,\\\"endColumn\\\":19,\\\"fix\\\":{\\\"range\\\":[1948,1952],\\\"text\\\":\\\"\\\\\\\"at\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":58,\\\"column\\\":21,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":58,\\\"endColumn\\\":25,\\\"fix\\\":{\\\"range\\\":[1954,1958],\\\"text\\\":\\\"\\\\\\\"az\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":59,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":59,\\\"endColumn\\\":19,\\\"fix\\\":{\\\"range\\\":[1975,1979],\\\"text\\\":\\\"\\\\\\\"ba\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":63,\\\"column\\\":18,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":63,\\\"endColumn\\\":22,\\\"fix\\\":{\\\"range\\\":[2034,2038],\\\"text\\\":\\\"\\\\\\\"cx\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":64,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":64,\\\"endColumn\\\":19,\\\"fix\\\":{\\\"range\\\":[2055,2059],\\\"text\\\":\\\"\\\\\\\"cy\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":68,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":68,\\\"endColumn\\\":19,\\\"fix\\\":{\\\"range\\\":[2111,2115],\\\"text\\\":\\\"\\\\\\\"go\\\\\\\"\\\"}},{\\\"ruleId\\\":\\\"quotes\\\",\\\"severity\\\":2,\\\"message\\\":\\\"Strings must use doublequote.\\\",\\\"line\\\":69,\\\"column\\\":15,\\\"nodeType\\\":\\\"Literal\\\",\\\"messageId\\\":\\\"wrongQuotes\\\",\\\"endLine\\\":69,\\\"endColumn\\\":19,\\\"fix\\\":{\\\"range\\\":[2132,2136],\\\"text\\\":\\\"\\\\\\\"gp\\\\\\\"\\\"}}],\\\"suppressedMessages\\\":[],\\\"errorCount\\\":31,\\\"fatalErrorCount\\\":0,\\\"warningCount\\\":0,\\\"fixableErrorCount\\\":31,\\\"fixableWarningCount\\\":0,\\\"source\\\":\\\"const { describe, it } = require('node:test');\\\\nconst assert = require('assert');\\\\nconst { extractInstruction } = require('../src/instructoin-extractor');\\\\n\\\\ndescribe('extractInstruction', () => {\\\\n  it('should extract the instruction from the raw \\\\\\\"assign\\\\\\\" instruction', () => {\\\\n    const rawInstruction = ['123 -> x'];\\\\n    const expectedInstruction = [{\\\\n      operation: \\\\\\\"ASSIGN\\\\\\\",\\\\n      input: [123],\\\\n      output: 'x'\\\\n    }];\\\\n\\\\n    const extractedInstruction = extractInstruction(rawInstruction);\\\\n    assert.deepStrictEqual(extractedInstruction, expectedInstruction);\\\\n  });\\\\n\\\\n  it('should extract the instruction from the raw \\\\\\\"not\\\\\\\" instruction', () => {\\\\n    const rawInstruction = ['NOT go -> gp'];\\\\n    const expectedInstruction = [{\\\\n      operation: \\\\\\\"NOT\\\\\\\",\\\\n      input: ['go'],\\\\n      output: 'gp'\\\\n    }];\\\\n\\\\n    const extractedInstruction = extractInstruction(rawInstruction);\\\\n    assert.deepStrictEqual(extractedInstruction, expectedInstruction);\\\\n  });\\\\n\\\\n  it('should extract the instruction from the raw \\\\\\\"and\\\\\\\" instruction', () => {\\\\n    const rawInstruction = ['1 AND cx -> cy'];\\\\n    const expectedInstruction = [{\\\\n      operation: \\\\\\\"AND\\\\\\\",\\\\n      input: [1, 'cx'],\\\\n      output: 'cy'\\\\n    }];\\\\n\\\\n    const extractedInstruction = extractInstruction(rawInstruction);\\\\n    assert.deepStrictEqual(extractedInstruction, expectedInstruction);\\\\n  });\\\\n\\\\n  it('should extract the instruction from the raw \\\\\\\"or\\\\\\\" instruction', () => {\\\\n    const rawInstruction = ['at OR az -> ba'];\\\\n    const expectedInstruction = [{\\\\n      operation: \\\\\\\"OR\\\\\\\",\\\\n      input: ['at', 'az'],\\\\n      output: 'ba'\\\\n    }];\\\\n\\\\n    const extractedInstruction = extractInstruction(rawInstruction);\\\\n    assert.deepStrictEqual(extractedInstruction, expectedInstruction);\\\\n  });\\\\n\\\\n  it('should extract multiple instructions from the raw instructions', () => {\\\\n    const rawInstruction = ['at OR az -> ba', '1 AND cx -> cy', 'NOT go -> gp'];\\\\n    const expectedInstruction = [{\\\\n      operation: \\\\\\\"OR\\\\\\\",\\\\n      input: ['at', 'az'],\\\\n      output: 'ba'\\\\n    },\\\\n    {\\\\n      operation: \\\\\\\"AND\\\\\\\",\\\\n      input: [1, 'cx'],\\\\n      output: 'cy'\\\\n    },\\\\n    {\\\\n      operation: \\\\\\\"NOT\\\\\\\",\\\\n      input: ['go'],\\\\n      output: 'gp'\\\\n    }];\\\\n\\\\n    const extractedInstruction = extractInstruction(rawInstruction);\\\\n    assert.deepStrictEqual(extractedInstruction, expectedInstruction);\\\\n  });\\\\n});\\\",\\\"usedDeprecatedRules\\\":[]}]\\n\""}]}